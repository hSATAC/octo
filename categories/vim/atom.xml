<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vim | hSATAC]]></title>
  <link href="http://blog.hsatac.net/categories/vim/atom.xml" rel="self"/>
  <link href="http://blog.hsatac.net/"/>
  <updated>2014-06-01T09:06:58+08:00</updated>
  <id>http://blog.hsatac.net/</id>
  <author>
    <name><![CDATA[Ash Wu]]></name>
    <email><![CDATA[hsatac@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xray-rails 與 tmux, vim 整合]]></title>
    <link href="http://blog.hsatac.net/2013/07/xray-rails-tmux-vim-integration/"/>
    <updated>2013-07-09T22:00:00+08:00</updated>
    <id>http://blog.hsatac.net/2013/07/xray-rails-tmux-vim-integration</id>
    <content type="html"><![CDATA[<p>剛好又開新專案了，來介紹一下 <a href="https://github.com/brentd/xray-rails">Xray-rails</a> 與 tmux, vim 的整合。</p>

<p><a href="https://github.com/brentd/xray-rails">Xray-rails</a> 是一層 rack middleware，會 inject 你的 view 和 javascript 檔案，只要在開發模式按快速鍵 <code>⌘ + ⇧ + x</code> 就會開啟一層 overlay，讓你很清楚的看出現在的畫面由哪些 view, partial, controller 生成，更方便的是只要一點畫面，即可在編輯器中開啟該檔案，大大降低 trace 程式碼的時間。</p>

<p><img src="https://dl.dropboxusercontent.com/u/156655/xray-screenshot.png" alt="Xray-rails" /></p>

<!--more-->


<p><a href="https://github.com/brentd/xray-rails">Xray-rails</a> 預設的編輯器是 <a href="http://www.sublimetext.com/2">Sublime Text 2</a> (<code>/usr/local/bin/subl</code>)。可以透過 overlay 右下角的設定圖示、或者自己新增 <code>~/.xrayconfig</code> 檔案來設定你使用的編輯器。</p>

<p>我平常使用 <a href="https://github.com/aziz/tmuxinator">Tmuxinator</a> 來管理我的專案和 tmux, 每個專案有自己的 tmux session，讓我可以快速在不同專案的開發環境之間切換。</p>

<p>我的 <code>~/.xrayconfig</code> 也改成透過 tmux 傳送指令給我的 vim，範例設定檔如下：</p>

<p><code>
:editor: "/usr/local/bin/tmux send -t openapply:editor ESCAPE :tabe $file ENTER"
</code></p>

<p><code>openapply</code> 是我的專案 tmux session 名稱，而 <code>editor</code> 是該 session 的 window 名稱，專門用來開啟 vim 編輯檔案。</p>

<p>但問題來了，我每一個專案都有自己獨立的 tmux session，這樣每次切換專案的時候我都要修改 <code>~/.xrayconfig</code> 實在很不方便，所以希望能在每一個專案底下放自己的 <code>.xrayconfig</code>。</p>

<p><p class='info info' data-title='Update 2013/08/14'>這個 Pull request 已被 upstream 收下，可以直接使用官方 git repo。</p></p>

<p>這個功能已經<a href="https://github.com/brentd/xray-rails/issues/21">提案給原作者同意</a>，也送了 <a href="https://github.com/brentd/xray-rails/pull/23">pull request</a>，不過還沒被 merge 回主幹，如果現在有需要這個功能的朋友可以暫時先使用我修改的 fork。</p>

<p>```
  gem &lsquo;xray-rails&rsquo;, :git => &lsquo;<a href="https://github.com/hSATAC/xray-rails.git">https://github.com/hSATAC/xray-rails.git</a>&rsquo;,</p>

<pre><code>                :branch =&gt; 'feature/project_specific_config'
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim runtime 不需存檔檢查 PHP 語法]]></title>
    <link href="http://blog.hsatac.net/2011/12/vim-php-runtime-syntax-check-without-saving-file/"/>
    <updated>2011-12-22T17:29:00+08:00</updated>
    <id>http://blog.hsatac.net/2011/12/vim-php-runtime-syntax-check-without-saving-file</id>
    <content type="html"><![CDATA[<p>之前 vim PHP syntax check 都是跟存檔綁在一起，同事想要不用存檔就可以檢查，就弄了一下。</p>

<p><div><script src='https://gist.github.com/1496197.js'></script>
<noscript><pre><code>  set errorformat=%m\ in\ %f\ on\ line\ %l
  if !exists(&#39;*PHPsynCHK&#39;)
    function! PHPsynCHK()
      ccl
      let winnum = winnr()
      let linenum = line(&#39;.&#39;)
      let colnum = col(&#39;.&#39;)
      silent execute &quot;%!php -l -f /dev/stdin | sed &#39;s/\\/dev\\/stdin/&quot;.bufname(&quot;%&quot;).&quot;/g&#39; &gt;.vimerr; cat&quot;
      silent cf .vimerr
      cw
      execute winnum . &quot;wincmd w&quot;
      silent undo
      silent cf
      if 1 == len(getqflist())
         call cursor(linenum, colnum)
      endif
    endfunction
  endif
</code></pre></noscript></div>
</p>

<p>用法直接 <code>:call PHPsynCHK()</code> 即可，可以自己綁定熱鍵。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的 Golang Vim 配置]]></title>
    <link href="http://blog.hsatac.net/2013/08/my-vimrc-for-golang/"/>
    <updated>2013-08-31T19:09:00+08:00</updated>
    <id>http://blog.hsatac.net/2013/08/my-vimrc-for-golang</id>
    <content type="html"><![CDATA[<p>去年九月發過一篇<a href="http://blog.hsatac.net/2012/09/golang-ides/">開發 Golang 的 IDEs</a>，不過現在我基本上都使用 vim 開發了， update 一下我現在的配置。所有資料都可以在我的 <a href="https://github.com/hSATAC/vimrc">vimrc</a> 找到。</p>

<h3>插件</h3>

<p>和之前一樣最主要還是靠 golang 官方 plugin 以及 <a href="https://github.com/nsf/gocode">gocode</a> 這兩個，多加了一個 <a href="https://github.com/jstemmer/gotags">gotags</a> 取代 ctags，這個超好用的。</p>

<p>由於 golang 官方 plugin 和 gocode 的 plugin 都沒有抽出單獨的 repo，不方便 vundle 或 pathogen 使用，所以我之前就有自己抽出方便安裝的 repo：</p>

<ul>
<li><a href="https://github.com/golangtw/go.vim">Golang 官方 vim plugin</a></li>
<li><a href="https://github.com/golangtw/gocode.vim">Gocode vim plugin</a></li>
</ul>


<p>如果搭配 <a href="https://github.com/ervandew/supertab">supertab</a> 可以設 <code>let g:SuperTabDefaultCompletionType = "context"</code> 來 trigger gocode 自動補完。</p>

<p><img src="/images/vimrc_golang/gocode.png" alt="gocode" /></p>

<!--more-->


<p><a href="https://github.com/jstemmer/gotags">gotags</a> 的部份則是要搭配 <a href="http://majutsushi.github.com/tagbar/">tagbar</a> 來使用，抓的非常準(感謝 go 天生內建語法樹 parser)，而且安排的順序就完全是建議的順序，按這個順序組織你的程式碼就對了。</p>

<p><img src="/images/vimrc_golang/gotags.png" alt="gotags" /></p>

<p><a href="https://github.com/bling/vim-airline">vim-airline</a> 現在也內建 <a href="http://majutsushi.github.com/tagbar/">tagbar</a> 支援了，所以可以直接在狀態列看到現在在程式的什麼區塊。</p>

<h3>設定與巨集</h3>

<p><code>go fmt</code> 實在是一個非常優秀的設計，不用再為了 style 的瑣事吵半天。在存檔的時候順手執行 <code>go fmt</code> 吧！安裝過官方插件的話，只要加上 <code>au FileType go au BufWritePre &lt;buffer&gt; Fmt</code> 即可。</p>

<p>由於 golang 的哲學是，不需要的程式碼就不要，所以沒用到的變數或 import package 都會被當成 error 處理。導致常常改一改就要回到檔案最上方處理 import。多利用 <code>:Import &lt;package&gt;</code> 跟 <code>:Drop &lt;package&gt;</code> 兩個命令可以簡化這個步驟。</p>

<p>測試的部份，原來我就有使用 <a href="https://github.com/jgdavey/tslime.vim">tslime</a> 這個插件，就多 bind 一個指令 <code>au FileType go map &lt;leader&gt;t :Tmux go test&lt;CR&gt;</code> 把 <code>go test</code> 指令送到 tmux 其他 window。目前這樣就能滿足我的需求。</p>

<p><img src="/images/vimrc_golang/gotest.png" alt="gotest" /></p>

<h3>參考資料</h3>

<p>還有更多 plugin 可以參考這篇：<a href="http://0value.com/my-Go-centric-Vim-setup">My (Go-centric) Vim Setup</a></p>
]]></content>
  </entry>
  
</feed>
