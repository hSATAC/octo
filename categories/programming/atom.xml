<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | hSATAC]]></title>
  <link href="http://blog.hsatac.net/categories/programming/atom.xml" rel="self"/>
  <link href="http://blog.hsatac.net/"/>
  <updated>2013-08-14T16:29:49+08:00</updated>
  <id>http://blog.hsatac.net/</id>
  <author>
    <name><![CDATA[Ash Wu]]></name>
    <email><![CDATA[hsatac@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Art of Readable Code 讀書筆記]]></title>
    <link href="http://blog.hsatac.net/2013/08/the-art-of-readable-code/"/>
    <updated>2013-08-07T22:07:00+08:00</updated>
    <id>http://blog.hsatac.net/2013/08/the-art-of-readable-code</id>
    <content type="html"><![CDATA[<p>這次公司的讀書分享會我被指定報告這本 <a href="http://shop.oreilly.com/product/9780596802301.do">The Art of Readable Code</a>。</p>

<p><img src="/images/art_of_readable_code/cover.jpg" alt="The Art of Readable Code Cover" /></p>

<p>這本書我以前就看過英文本，這次借這個機會重新複習整理了一下，又有新的收穫。把一些我覺得比較重要的點筆記下來，太基礎或可能用不太到的這邊就省略了。很推薦各位翻一下這本，是一本很值得一讀的小書。</p>

<!--more-->


<h2>摘要</h2>

<p>可讀性就是易於理解(最短時間理解)。</p>

<p>把寫程式從「會動就好」(寫給機器讀)，提升到「表明自己的意圖」(寫給人讀)的層次。</p>

<p>試著思考，閱讀這段程式的人會用怎樣的脈絡來理解你的程式碼。</p>

<h2>Part 1. 表層改善</h2>

<h3>富含資訊的名稱</h3>

<ul>
<li>選擇詞彙</li>
</ul>


<p><code>FetchPage</code> 比 <code>GetPage</code> 要好，表達出從網路拉資料的行為。</p>

<p>可以使用比 <code>Stop</code> 更清楚的名稱，例如不能復原的用 <code>Kill</code>，能復原的用 <code>Pause</code>, <code>Resume</code>。</p>

<ul>
<li><p>避免使用 tmp, ret, i, j, k (除非真的是要交換變數)</p></li>
<li><p>優先使用具體名稱而非抽象名稱</p></li>
</ul>


<p><code>ServerCanStart</code> 抽象</p>

<p><code>ServerCanListenOnPort</code> 具體</p>

<ul>
<li>在名稱中加入額外資訊</li>
</ul>


<p><code>start</code> => <code>start_ms</code></p>

<p><code>size</code> => <code>size_mb</code></p>

<ul>
<li>加入其他重要屬性</li>
</ul>


<p><code>password</code> => <code>plaintext_password</code></p>

<p><code>comment</code> => <code>unescaped_comment</code></p>

<p>較小範圍適合較短變數名稱</p>

<h3>不被誤解的名稱</h3>

<p><code>Filter()</code> 是包含還是排除？ <code>Select()</code>, <code>Exclude()</code> 更清楚</p>

<p><code>start, stop</code> 有沒有包含？ <code>first, last</code> 清楚表明有包含</p>

<ul>
<li>符合使用者的預期</li>
</ul>


<p><code>get*()</code> 開頭預期是輕量 getter，不要做耗時運算。</p>

<p><code>size()</code> 預期輕量，要計算可改為 <code>computeSize()</code></p>

<h3>美學</h3>

<ul>
<li><p>排版</p></li>
<li><p>有意義的順序</p></li>
</ul>


<p><code>first_name, last_name, email</code></p>

<p><code>first_name, email,...last_name</code></p>

<ul>
<li><p>風格一致性</p></li>
<li><p>區分程式碼段落</p></li>
</ul>


<h3>註解</h3>

<ul>
<li><p>註解自己的想法</p></li>
<li><p>註解程式碼缺陷</p></li>
<li><p>註解常數 (常數的設定通常都有其原因和意義)</p></li>
</ul>


<p><code>NUM_THREADS</code> 可能是根據 CPU 核心數推算出來。</p>

<ul>
<li>為讀者設想(可能需要額外思考)</li>
</ul>


<p>{% codeblock lang:obj-c %}
NSSet *selectedAdvisorIDs  = _filterVC.selectedAdvisors;</p>

<p>for (MBAdvisor *advisor in [self currentGroup].advisors) {</p>

<pre><code>if ([selectedAdvisorIDs containsObject:advisor.ID]) {
    [_filteredAdvisors addObject:advisor];
}
</code></pre>

<p>}</p>

<p>// 為什麼不直接從 selectedAdvisorIDs 迴圈作處理？
for (NSNumber *advisorID in selectedAdvisorIDs) {</p>

<pre><code>    [_filteredAdvisors addObject:[self findAdvisorByID:advisorID]];
</code></pre>

<p>}</p>

<p>// 為了維持原本 Advisor 的順序
{% endcodeblock %}</p>

<ul>
<li>註明可能的陷阱</li>
</ul>


<h3>讓註解精確與簡潔</h3>

<ul>
<li>精確描述函數行為</li>
</ul>


<p><code>傳回檔案行數</code> 可能有很多狀況，改為 <code>計算檔案中 \n 個數</code> 更為精確。</p>

<ul>
<li><p>使用代表性的輸入輸出範例 (rdoc)</p></li>
<li><p>函數參數名稱註解 (named parameters)</p></li>
</ul>


<p>{% codeblock lang:c %}
Connect(10, false);</p>

<p>//=></p>

<p>Connect(timeout_ms = 10, use_encryption = false);</p>

<p>//=></p>

<p>Connect(/<em> timeout_ms = </em>/ 10, /<em> use_encryption = </em>/ false);
{% endcodeblock %}</p>

<ul>
<li>使用訊息密集的詞彙</li>
</ul>


<p><code>cache</code>, <code>singleton</code></p>

<h2>Part 2. 簡化迴圈與邏輯</h2>

<h3>提高控制流程與可讀性</h3>

<ul>
<li>if/else 區塊順序

<ol>
<li> 先肯定而非否定的情況</li>
<li> 先簡單的情況</li>
<li> 先<em>有趣</em>或明顯的情況</li>
</ol>
</li>
</ul>


<p>{% codeblock lang:c %}
if (!url.HasQueryParameter(&ldquo;expand_all&rdquo;)) {     response.Render(items);     &hellip;} else {     for (int i = 0; i &lt; items.size(); i++) {         items[i].Expand();     }     &hellip;}
// 看到 expand_all 會一直想著 expand_all =>
if (url.HasQueryParameter(&ldquo;expand_all&rdquo;)) {     for (int i = 0; i &lt; items.size(); i++) {         items[i].Expand();     }     &hellip;} else {     response.Render(items);     &hellip;}
{% endcodeblock %}</p>

<ul>
<li><p>盡早返回 (return)</p></li>
<li><p>消除迴圈中的巢狀結構 (continue)</p></li>
</ul>


<h3>分解巨大表示式</h3>

<ul>
<li>解釋性變數</li>
</ul>


<p>{% codeblock lang:python %}
if line.split(&lsquo;:&rsquo;)[0].strip() == &ldquo;root&rdquo;:</p>

<h1>=></h1>

<p>username = line.split(&lsquo;:&rsquo;)[0].strip()
if username == &ldquo;root&rdquo;:
{% endcodeblock %}</p>

<h3>變數與可讀性</h3>

<ul>
<li>消除變數</li>
</ul>


<p>{% codeblock lang:python %}
now = datetime.datetime.now()
root_message.last_view_time = now</p>

<h1>=></h1>

<p>root_message.last_view_time = datetime.datetime.now()
{% endcodeblock %}</p>

<ul>
<li>縮減變數範圍</li>
</ul>


<p>{% codeblock lang:obj-c %}
UIButton *sideMenuButton = [UIButton buttonWithType:UIButtonTypeCustom];
sideMenuButton.bounds = CGRectMake(0, 0, 20, 20);
[sideMenuButton setImage:[UIImage imageNamed:@&ldquo;sidemenu_icon.png&rdquo;] forState:UIControlStateNormal];
[sideMenuButton addTarget:self action:@selector(toggleRightPanelAction) forControlEvents:UIControlEventTouchUpInside];
self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc] initWithCustomView:sideMenuButton];</p>

<p>// =></p>

<p>// scoped temp variables. last line will be returned.
self.navigationItem.rightBarButtonItem = ({
  UIButton *sideMenuButton = [UIButton buttonWithType:UIButtonTypeCustom];
  sideMenuButton.bounds = CGRectMake(0, 0, 20, 20);
  [sideMenuButton setImage:[UIImage imageNamed:@&ldquo;sidemenu_icon.png&rdquo;] forState:UIControlStateNormal];
  [sideMenuButton addTarget:self action:@selector(toggleRightPanelAction) forControlEvents:UIControlEventTouchUpInside];
  [[UIBarButtonItem alloc] initWithCustomView:sideMenuButton];
});
{% endcodeblock %}</p>

<ul>
<li>減少變數改變</li>
</ul>


<h2>Part 3. 重新組織程式碼</h2>

<h3>抽離不相關子問題</h3>

<ul>
<li>避免過猶不及</li>
</ul>


<p>{% codeblock lang:python %}
user_info = { &ldquo;username&rdquo;: &ldquo;&hellip;&rdquo;, &ldquo;password&rdquo;: &ldquo;&hellip;&rdquo; }user_str = json.dumps(user_info)cipher = Cipher(&ldquo;aes_128_cbc&rdquo;, key=PRIVATE_KEY, init_vector=INIT_VECTOR, op=ENCODE)encrypted_bytes = cipher.update(user_str)encrypted_bytes += cipher.final() # flush out the current 128 bit blockurl = &ldquo;<a href="http://example.com/?user_info=">http://example.com/?user_info=</a>&rdquo; + base64.urlsafe_b64encode(encrypted_bytes)
…</p>

<h1>=></h1>

<p>def url_safe_encrypt(obj):  obj_str = json.dumps(obj)   cipher = Cipher(&ldquo;aes_128_cbc&rdquo;, key=PRIVATE_KEY, init_vector=INIT_VECTOR, op=ENCODE) encrypted_bytes = cipher.update(obj_str)    encrypted_bytes += cipher.final() # flush out the current 128 bit block return base64.urlsafe_b64encode(encrypted_bytes)user_info = { &ldquo;username&rdquo;: &ldquo;&hellip;&rdquo;, &ldquo;password&rdquo;: &ldquo;&hellip;&rdquo; }url = &ldquo;<a href="http://example.com/?user_info=">http://example.com/?user_info=</a>&rdquo; + url_safe_encrypt(user_info)</p>

<h1>=> this went too far…</h1>

<p>user_info = { &ldquo;username&rdquo;: &ldquo;&hellip;&rdquo;, &ldquo;password&rdquo;: &ldquo;&hellip;&rdquo; }url = &ldquo;<a href="http://example.com/?user_info=">http://example.com/?user_info=</a>&rdquo; + url_safe_encrypt_obj(user_info)
def url_safe_encrypt_obj(obj):  obj_str = json.dumps(obj)   return url_safe_encrypt_str(obj_str)def url_safe_encrypt_str(data): encrypted_bytes = encrypt(data) return base64.urlsafe_b64encode(encrypted_bytes)def encrypt(data):  cipher = make_cipher()  encrypted_bytes = cipher.update(data)   encrypted_bytes += cipher.final() # flush out any remaining bytes   return encrypted_bytesdef make_cipher():    return Cipher(&ldquo;aes_128_cbc&rdquo;, key=PRIVATE_KEY, init_vector=INIT_VECTOR, op=ENCODE)
{% endcodeblock %}</p>

<h3>撰寫較少程式碼</h3>

<ul>
<li><p>可讀性最高的程式碼就是完全沒有程式碼</p></li>
<li><p>不開發那些功能 &ndash; 不會需要</p></li>
<li><p>詢問與分解需求</p></li>
<li><p>熟悉你的函式庫</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
