<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | hSATAC]]></title>
  <link href="http://blog.hsatac.net/categories/rails/atom.xml" rel="self"/>
  <link href="http://blog.hsatac.net/"/>
  <updated>2013-05-19T20:35:59+08:00</updated>
  <id>http://blog.hsatac.net/</id>
  <author>
    <name><![CDATA[hSATAC]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TDD Rails]]></title>
    <link href="http://blog.hsatac.net/2013/05/tdd-rails/"/>
    <updated>2013-05-19T19:23:00+08:00</updated>
    <id>http://blog.hsatac.net/2013/05/tdd-rails</id>
    <content type="html"><![CDATA[<p>這兩個月到新公司學到了不少東西，對於「寫測試」這件事也有了新的想法。先感謝最近一直和我 pair 的 @ilake 許多觀念和工具都是他帶給我的。</p>

<p>還記得幾年前剛聽到「測試」、「TDD」這些名詞的時候，那時我去 Ruby Tuesday 碰到人就會問一下：「你有在寫測試嗎？」@ihower 跟 @xdite 應該都被我問過這個問題。那時雖然知道寫測試的好處，也大概試過 TDD 的手法，不過總感覺搔不到癢處；再加上那時待的公司也都沒有這個環境，就放置 Play 了。</p>

<p>一直到跟 @ilake pair 過後才知道，問題不在「要不要寫測試」、而是「測試該怎麼寫」。</p>

<!-- more -->


<h3>Why TDD? Why Not?</h3>

<p>我們一般對寫測試和 TDD 會有以下的迷思：</p>

<ul>
<li>TDD 違反人類思考的習慣</li>
<li>寫測試會比較耗時間</li>
<li>沒牽涉到金流等重大功能不需要寫測試</li>
</ul>


<p>先講第一點，<strong>TDD 違反人類思考的習慣？</strong>：其實我們平常寫程式的行為，本來就是寫一點點、然後切過去執行看看、再寫一點點、再切過去執行看看......重複這個循環。</p>

<p>這跟 TDD 的開發模式基本上是一樣的，差別只在於先把想要的結果寫好而已。而且這樣的方式可以強迫你用比較好測試的方式去組織你的程式碼，也就是說你的 code 天生架構就會比較好。</p>

<p><strong>寫測試會比較耗時間嗎？</strong>這邊應該分成整體開發時間和單元開發時間來看。先說整體開發時間，有寫測試可以讓整個 team 都放心改 code ，減低踩雷的機會。</p>

<p>那單元測試時間呢？TDD 寫的 code 比較多，理論上應該會增加單元開發時間，不過只要使用對的工具和 work flow，其實單元開發時間不會增加多少，甚至還有可能更快。開發 Rails 可能寫一寫就要切到瀏覽器看一下行為，但是使用 TDD 我們可以一鍵直接測到我們想測的部份，不用花時間在切換、等待上面。等到整個 feature 開發完成再去瀏覽器做最後確認就好，反而增加了開發效率。</p>

<p><strong>沒牽涉到金流等重大功能不需要寫測試？</strong>：當你享受過 TDD 帶來的好處時其實就不會再有這樣的想法了，不過寫測試的確還有其他的優點。我到 Faria 第一天就能直接上工解 issue 就是因為有測試當我的後盾。測試本身也就是 spec ，能清楚定義你程式的行為。碰到有 bug 的時候就直接寫一個這個 bug 的測試，修到他過了，以後就再也不會碰到那種「咦，這個 bug 不是我以前解過了嗎？怎麼又跑出來了？」的狀況。</p>

<h3>Work Flow</h3>

<p>前面說到只要使用對的工具和 work flow，就能享受到 TDD 的快感。相關的工具和 library 非常多，這邊直接講兩個重點：</p>

<ol>
<li>快速執行測試以及觀看測試結果(一鍵執行)</li>
<li>跑測試本身的速度要快</li>
</ol>


<p>前陣子使用 Sublime Text 2 時，搭配 <a href="https://github.com/maltize/sublime-text-2-ruby-tests">Sublime Text 2 Ruby Tests</a> 這個 plugin，只要按 <code>cmd + shift + r</code> 就可以直接跑當前游標所在測試 <code>cmd + shift + t</code> 跑整個檔案 <code>cmd + shift + e</code> 跑上一次執行的測試。</p>

<p>最近改回 vim 環境則是使用 @ilake 推薦的 <a href="https://github.com/jgdavey/vim-turbux">turbux</a> 和 <a href="https://github.com/jgdavey/tslime.vim">tslime</a> 一樣一鍵執行測試，並送到你選擇的 tmux windows 去執行。詳細的設定可以參考<a href="https://github.com/hSATAC/vimrc">我的 vimrc</a>。</p>

<p>至於跑測試本身的速度要快這點，由於 Rails 環境要 boot 起來其實花的時間真的挺久的，可以使用 <a href="https://github.com/burke/zeus">Zeus</a> 或 <a href="https://github.com/jonleighton/spring">Spring</a> 來加速。</p>

<p>其實以上這兩點都是為了一個目的，就是要「快速拿到你的 feedback」。當你有了這個環境，你寫好測試你就只要一直去 run 他 run 到你的實作通過測試為止。絕對比寫一寫切到瀏覽器看一下來的快速可靠。</p>

<h3>結語</h3>

<p>寫測試的好處真的百百種，說都說不完，而且現在寫測試應該也算是 programmer 的必備技能了。前陣子我發給 <a href="https://github.com/mroth/lolcommits">lolcommits</a> 的 pull request 也被要求補測試才收我的 patch。可預見不遠的將來，甚至是現在，寫測試將會是軟體開發中不可或缺的一個環節。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redmine + Bundler 復活記]]></title>
    <link href="http://blog.hsatac.net/2011/09/redmine-bundler-%E5%BE%A9%E6%B4%BB%E8%A8%98/"/>
    <updated>2011-09-30T00:00:00+08:00</updated>
    <id>http://blog.hsatac.net/2011/09/redmine-bundler-復活記</id>
    <content type="html"><![CDATA[<p>老實說，不記得之前是動了什麼，總之我的佈署 apache + passenger + ree 環境<br />
redmine 爆炸了。推測應該是 gem 的關係。<br />
上網看了一下， rails 2.3 只支援 rubygems 1.7<br />
就先把 rubygems downgrade 回來
<pre lang="bash">gem update --system 1.7</pre></p>




<p>和 tkalu, xdite, ihower, 以及小蟹詢問了各種可能的解決方案後<br />
確定我應該是要用 bundler 來管理一下 redmine 的 gems</p>




<p>根據 ihower 提供的資訊， redmine 有一個內建 bundler 的 fork 版<br />
搜尋了一下找到了 https://www.chiliproject.org/<br />
把他的 <a href="https://github.com/chiliproject/chiliproject/blob/unstable/Gemfile" target="_blank">Gemfile</a> 借過來一用</p>




<p>再按照 <a href="http://gembundler.com/rails23.html" target="_blank">Bundler 官網上的 Rails 2 教學</a>
來設定，果然成功把我的 redmine 救了回來！</p>




<p>chiliproject 的 Gemfile 可能要稍加修改，例如他用 rails 2.3.14，可以改成 redmine 官網支援的 2.3.11<br />
然後一些沒用到的 gem 例如 pg 可以移除。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rake 0.9 爆炸解法]]></title>
    <link href="http://blog.hsatac.net/2011/09/rake-0-9/"/>
    <updated>2011-09-20T00:00:00+08:00</updated>
    <id>http://blog.hsatac.net/2011/09/rake-0-9</id>
    <content type="html"><![CDATA[<p>由於 rake 0.9 跟之前的不相容，因此裝了以後大概都會碰到這堆錯誤：
<pre lang="bash">/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/version.rb:4: warning: already initialized constant MAJOR
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/version.rb:5: warning: already initialized constant MINOR
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/version.rb:6: warning: already initialized constant BUILD
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/version.rb:3: warning: already initialized constant NUMBERS
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/version.rb:9: warning: already initialized constant VERSION
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake.rb:26: warning: already initialized constant RAKEVERSION
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/early_time.rb:17: warning: already initialized constant EARLY
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/alt_system.rb:32: warning: already initialized constant WINDOWS
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/application.rb:28: warning: already initialized constant DEFAULT_RAKEFILES
WARNING: Possible conflict with Rake extension: String#ext already exists
WARNING: Possible conflict with Rake extension: String#pathmap already exists
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/task_arguments.rb:73: warning: already initialized constant EMPTY_TASK_ARGS
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/invocation_chain.rb:49: warning: already initialized constant EMPTY
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/file_utils.rb:10: warning: already initialized constant RUBY
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/file_utils.rb:84: warning: already initialized constant LN_SUPPORTED
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/dsl_definition.rb:143: warning: already initialized constant Commands
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/file_list.rb:44: warning: already initialized constant ARRAY_METHODS
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/file_list.rb:47: warning: already initialized constant MUST_DEFINE
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/file_list.rb:51: warning: already initialized constant MUST_NOT_DEFINE
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/file_list.rb:55: warning: already initialized constant SPECIAL_RETURN
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/file_list.rb:61: warning: already initialized constant DELEGATING_METHODS
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/file_list.rb:364: warning: already initialized constant DEFAULT_IGNORE_PATTERNS
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/file_list.rb:370: warning: already initialized constant DEFAULT_IGNORE_PROCS
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake.rb:64: warning: already initialized constant FileList
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake.rb:65: warning: already initialized constant RakeFileUtils
rake aborted!
stack level too deep</pre></p>




<p>(See full trace by running task with --trace)
<!--more--></p>




<p>解決的方法很簡單，你知道、我知道、獨眼龍也知道：就是 bundle exec rake</p>




<p>但是一直打一直打實在很煩。寫 Ruby 的時候，當你開始覺得有重複的打字作業的時候，就表示事情不太對勁了......</p>




<p>那該怎麼辦呢？<del>你怎麼不問問神奇海螺呢？</del></p>




<p>Google 了一下，發現 <a href="http://ihower.tw/blog/archives/5762" target="_blank">ihower 的這個解法</a>不錯。</p>




<p>簡單說，在你的目錄下先下
<pre lang="bash">bundle install --binstubs</pre>
這個指令會把 Gemfile 裡面的執行檔安裝在專案目錄的 bin 目錄下面。</p>




<p>接著在專案目錄開一個 .rvmrc 裡面填
<pre lang="bash">export PATH="./bin:$PATH"</pre>
這樣當你執行 rake 的時候 rvm 就會幫你抓到專案目錄下的 bin 下的 rake 執行檔了！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[整合 Redmine 和 git]]></title>
    <link href="http://blog.hsatac.net/2011/04/redmine-git-integration/"/>
    <updated>2011-04-14T00:00:00+08:00</updated>
    <id>http://blog.hsatac.net/2011/04/redmine-git-integration</id>
    <content type="html"><![CDATA[<p>其實就是[專案設定] > [版本控管] 裡面填 git repo path 而已<br />
不過一直報找不到專案，看了一下 error log  原來是找不到 git 執行檔<br />
解法很簡單，原本 httpd.conf 設定的 ruby 要再包一層去 export path<br />
例如原本你設定的是
<pre lang="bash">
PassengerRuby /usr/local/Cellar/ruby-enterprise-edition/2011.03/bin/ruby
</pre></p>




<p>就開一個  /usr/local/bin/ruby_with_env 的可執行檔<br />
裡面把 export $PATH
<pre lang="bash">
#!/bin/bash
export PATH="/usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/X11/bin:/opt/local/bin:/usr/local/git/bin:/usr/local/git/bin/:$PATH"
/usr/local/Cellar/ruby-enterprise-edition/2011.03/bin/ruby $*
</pre></p>




<p>再把 httpd.conf 的裡面設定的 ruby 改成
<pre lang="bash">
PassengerRuby /usr/local/bin/ruby_with_env
</pre></p>




<p>大功告成！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 Passenger(mod_rails) 部屬 Sinatra]]></title>
    <link href="http://blog.hsatac.net/2011/02/%E7%94%A8-passengermod_rails-%E9%83%A8%E5%B1%AC-sinatra/"/>
    <updated>2011-02-22T00:00:00+08:00</updated>
    <id>http://blog.hsatac.net/2011/02/用-passengermod_rails-部屬-sinatra</id>
    <content type="html"><![CDATA[<p>最近寫了一些小 app / web service ，因為用不到 rails 那樣的大架構和功能，於是嘗試了 sinatra。<br />
寫起來挺快得，感覺跟之前玩 node.js 的感覺有點像。<br />
部屬方面也很容易<br />
在你的專案目錄下新建一個 config.ru 檔案，以及 public 和 tmp 資料夾<br />
config.ru 檔案內容為
<pre lang="ruby">
require 'project'</pre></p>




<p>root_dir = File.dirname(__FILE__)</p>




<p>set :environment, ENV['RACK_ENV'].to_sym<br />
set :root,        root_dir<br />
set :app_file,    File.join(root_dir, 'project.rb')<br />
disable :run</p>




<p>run Sinatra::Application</p>




<p>
把 project 替換成你的專案名稱<br />
apache vhost的設法和 rails 的一樣即可
<pre lang="bash">
<VirtualHost *:80>
  ServerName project.hsatac.net
  DocumentRoot "/project/public"
  RackEnv production
  <Directory "/project/public">
    Order allow,deny
    Allow from all
  

</pre></p>

]]></content>
  </entry>
  
</feed>
