<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: aws | hSATAC]]></title>
  <link href="http://blog.hsatac.net/categories/aws/atom.xml" rel="self"/>
  <link href="http://blog.hsatac.net/"/>
  <updated>2013-08-14T16:29:49+08:00</updated>
  <id>http://blog.hsatac.net/</id>
  <author>
    <name><![CDATA[Ash Wu]]></name>
    <email><![CDATA[hsatac@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Migrate AWS AMI across region painlessly]]></title>
    <link href="http://blog.hsatac.net/2013/02/migrate-aws-ami-across-region-painlessly-en/"/>
    <updated>2013-02-27T15:45:00+08:00</updated>
    <id>http://blog.hsatac.net/2013/02/migrate-aws-ami-across-region-painlessly-en</id>
    <content type="html"><![CDATA[<p>Recently I need to migrate my infrastructure from Tokyo to Singapore. According to the information I gathered from AWS 201 course, it&rsquo;s a little troublesome to migrate AWS AMI between regions.</p>

<p>As <a href="http://alestic.com/2010/10/ec2-ami-copy">Copying EBS Boot AMIs Between EC2 Regions</a> demostrated, we need to mount ebs for each regions and rsync them, than we register the ebs as AMI; Also there&rsquo;s <a href="https://cloudyscripts.com/tool/show/5">CloudyScript</a>, it&rsquo;s a online tool that does these steps for you.</p>

<p>After some study, I found that it&rsquo;s not necessary now. Amazon announced <a href="http://aws.typepad.com/aws/2012/12/ebs-snapshot-copy.html">EBS Snapshot Copy</a> last December. Although you can&rsquo;t migrate AMI but we could do so just for some more steps.</p>

<!--more-->


<p>It&rsquo;s really simple:</p>

<p>Find the snapshot or your AMI, click <code>Copy Snapshot</code> to copy snapshot to your destinated region.</p>

<p><a href="/images/ami_migrate/migrate_aws_ami_across_region_painlessly_1.png"><img src="/images/ami_migrate/migrate_aws_ami_across_region_painlessly_1.png" alt="1" /></a></p>

<p>Check the <code>Kernel ID</code> field of your AMI.</p>

<p><a href="/images/ami_migrate/migrate_aws_ami_across_region_painlessly_2.png"><img src="/images/ami_migrate/migrate_aws_ami_across_region_painlessly_2.png" alt="2" /></a></p>

<p>Visit <a href="http://thecloudmarket.com/image/aki-ee5df7ef">the cloud market</a> to check AKI&rsquo;s description to see which manifest.xml it belongs. For instance: <code>pv-grub-hd0_1.02-x86_64.gz.manifest.xml</code></p>

<p><a href="/images/ami_migrate/migrate_aws_ami_across_region_painlessly_3.png"><img src="/images/ami_migrate/migrate_aws_ami_across_region_painlessly_3.png" alt="3" /></a></p>

<p>Search for <code>pv-grub-hd0_1.02-x86_64.gz.manifest.xml</code> and find the AKI for your destinated region.</p>

<p><a href="/images/ami_migrate/migrate_aws_ami_across_region_painlessly_4.png"><img src="/images/ami_migrate/migrate_aws_ami_across_region_painlessly_4.png" alt="4" /></a></p>

<p>Perform <code>Create Image from Snapshot</code> on your cloned snapshot.</p>

<p><a href="/images/ami_migrate/migrate_aws_ami_across_region_painlessly_5.png"><img src="/images/ami_migrate/migrate_aws_ami_across_region_painlessly_5.png" alt="5" /></a></p>

<p>Select the AKI you just got.</p>

<p><a href="/images/ami_migrate/migrate_aws_ami_across_region_painlessly_6.png"><img src="/images/ami_migrate/migrate_aws_ami_across_region_painlessly_6.png" alt="6" /></a></p>

<p>You don&rsquo;t need to rsync anything. It&rsquo;s just that easy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[無痛跨 region 轉移 AWS AMI]]></title>
    <link href="http://blog.hsatac.net/2013/02/migrate-aws-ami-across-region-painlessly/"/>
    <updated>2013-02-27T15:45:00+08:00</updated>
    <id>http://blog.hsatac.net/2013/02/migrate-aws-ami-across-region-painlessly</id>
    <content type="html"><![CDATA[<p>最近要把一些日本的東西轉移到新加坡，根據以前參加 AWS 201 的資料，跨 region 轉移 AMI(Amazon Machine Image) 這件事有點麻煩。</p>

<p>通常找來找去都是用 <a href="http://alestic.com/2010/10/ec2-ami-copy">Copying EBS Boot AMIs Between EC2 Regions</a> 推薦的方法，在兩邊各開一個 ebs mount 起來然後 rsync 再 register 成 AMI…操作起來耗時又複雜；不然就是用 <a href="https://cloudyscripts.com/tool/show/5">CloudyScript</a> 提供的線上工具，不過他其實就只是幫你把上面這些動作自動化而已&hellip;。</p>

<p>弄了一陣子發現，現在根本不需要這些瑣碎的步驟！ Amazone 在去年 12 月就發表了 <a href="http://aws.typepad.com/aws/2012/12/ebs-snapshot-copy.html">EBS Snapshot Copy</a> 可以自由的跨區複製 snapshot! 雖然還不能複製 AMI，不過我們只要手動多幾個步驟就好。</p>

<!--more-->


<p>整個過程很簡單，以下用圖示說明：</p>

<p>先找出你 AMI 的 snapshot, 點選 <code>Copy Snapshot</code> 複製到你要的 region.</p>

<p><a href="/images/ami_migrate/migrate_aws_ami_across_region_painlessly_1.png"><img src="/images/ami_migrate/migrate_aws_ami_across_region_painlessly_1.png" alt="1" /></a></p>

<p>複製完成後，看一下原本的 AMI 資訊，注意 <code>Kernel ID</code> 這個欄位，把他記下來。</p>

<p><a href="/images/ami_migrate/migrate_aws_ami_across_region_painlessly_2.png"><img src="/images/ami_migrate/migrate_aws_ami_across_region_painlessly_2.png" alt="2" /></a></p>

<p>接著我們要使用演算法優化的大絕招 &ndash; 查表法。拜訪 <a href="http://thecloudmarket.com/image/aki-ee5df7ef">the cloud market</a> 找出這個 AKI 的 Description 是哪個 manifest.xml ，例如我的就是 <code>pv-grub-hd0_1.02-x86_64.gz.manifest.xml</code></p>

<p><a href="/images/ami_migrate/migrate_aws_ami_across_region_painlessly_3.png"><img src="/images/ami_migrate/migrate_aws_ami_across_region_painlessly_3.png" alt="3" /></a></p>

<p>接著再搜尋 <code>pv-grub-hd0_1.02-x86_64.gz.manifest.xml</code> 並找出你要的 region，記住這個 AKI。</p>

<p><a href="/images/ami_migrate/migrate_aws_ami_across_region_painlessly_4.png"><img src="/images/ami_migrate/migrate_aws_ami_across_region_painlessly_4.png" alt="4" /></a></p>

<p>在已複製好的 snapshot 上右鍵點選 <code>Create Image from Snapshot</code></p>

<p><a href="/images/ami_migrate/migrate_aws_ami_across_region_painlessly_5.png"><img src="/images/ami_migrate/migrate_aws_ami_across_region_painlessly_5.png" alt="5" /></a></p>

<p>Kernel ID 選擇你剛剛查到的 AKI 就可以了！</p>

<p><a href="/images/ami_migrate/migrate_aws_ami_across_region_painlessly_6.png"><img src="/images/ami_migrate/migrate_aws_ami_across_region_painlessly_6.png" alt="6" /></a></p>

<p>完全不需要什麼 rsync 啦！無痛跨 region 轉移就這麼簡單！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 ec2 的 Name tag 設定 hostname]]></title>
    <link href="http://blog.hsatac.net/2012/06/set-ec2-hostname-from-name-tag/"/>
    <updated>2012-06-07T15:50:00+08:00</updated>
    <id>http://blog.hsatac.net/2012/06/set-ec2-hostname-from-name-tag</id>
    <content type="html"><![CDATA[<p>如果 hostname 每一台都要自己一一指定相當麻煩，寫了一個小 script 放在開機時執行，抓取 instance-id 後取得 Name tag 再設定成 hostname。</p>

<p>{% gist 2887240 %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[動態產生 ec2 的 hosts 檔案]]></title>
    <link href="http://blog.hsatac.net/2012/06/generate-aws-ec2-hosts-file/"/>
    <updated>2012-06-07T11:43:00+08:00</updated>
    <id>http://blog.hsatac.net/2012/06/generate-aws-ec2-hosts-file</id>
    <content type="html"><![CDATA[<p>這個議題類似上一篇 <a href="http://blog.hsatac.net/2012/06/aws-ec2-setup-dynamic-dns-using-route-53/">利用 Route 53 設定 Ec2 動態 DNS</a> ，同樣也是要解決主機名稱對應浮動 ip 的問題。</p>

<p>雖然現在用完整域名已經可以對應到 ip ，但是還是有很多時候我們的主機需要知道主機名稱和 ip 的對應。</p>

<p>這個問題大概也是可以用 hosts 或 dns 來解決，不過由於我已經把 yp nis 架設起來，其他機器可以直接吃 nis 伺服器的 hosts 檔案，所以決定用 hosts 這個方式來處理。</p>

<p>概念很簡單，利用 ec2 api sdk 抓取正在運行的主機列表，一一寫入 /etc/hosts 後再重新 make yp 的資料庫。</p>

<p>設個排程每個小時跑一下或開新機器時手動執行一下即可。</p>

<p>script 如下：</p>

<p>{% gist 2881131 %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用 route 53 設定 ec2 動態 DNS]]></title>
    <link href="http://blog.hsatac.net/2012/06/aws-ec2-setup-dynamic-dns-using-route-53/"/>
    <updated>2012-06-06T14:44:00+08:00</updated>
    <id>http://blog.hsatac.net/2012/06/aws-ec2-setup-dynamic-dns-using-route-53</id>
    <content type="html"><![CDATA[<p>最近在玩 aws ec2 第一個一定會碰到的問題就是 ip 都是動態的，每次開機都不一樣。造成大部分的佈署方式會有問題，一般都是用動態 dns 來解決，原本想自己架 bind 或 djbdns ，但是架好以後還要處理動態 dns 更新的機制，於是把想法動到價格低廉的 route 53 身上，他有完整的 restful api 應該很符合我的需求。</p>

<p>找到這個 <a href="http://www.linkdata.se/downloads/sourcecode/other/route53-dyndns.sh">script</a> 是利用 <a href="http://checkip.dyndns.com">http://checkip.dyndns.com</a> 來抓取自己 ip 再更新 route 53 的 A record 。</p>

<p>不過 ec2 的 public dns 有一個特性，從外面解會解到 public ip ，但是從裡面解會解到 private ip ，同一個 availability zone 用 private ip 互連是不多收費的。</p>

<p>如果設 A record 使用 public 連線，就沒有這個優勢了，所以我改用 CNAME 指到 ec2 的 public dns。然後原本取得 ip 的部分也改用 aws 取 meta-data 就可以了。</p>

<p>具體作法，可以開一個 subdomain 例如 ec2.hsatac.net ，然後把這個 subdomain delegate 給我們的 route 53 來解析。在 DNS 的部分新增一筆 NS  <code>ec2.hsatac.net</code> 然後 server 設定為 route 53 給的那幾組即可。</p>

<!-- more -->


<p>修改過後的 script 如下：</p>

<p>{% gist 2880516 %}</p>
]]></content>
  </entry>
  
</feed>
