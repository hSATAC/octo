<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mac | hSATAC]]></title>
  <link href="http://blog.hsatac.net/categories/mac/atom.xml" rel="self"/>
  <link href="http://blog.hsatac.net/"/>
  <updated>2012-08-09T11:56:14+08:00</updated>
  <id>http://blog.hsatac.net/</id>
  <author>
    <name><![CDATA[hSATAC]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xcode 4.3 publish ipa for testflight]]></title>
    <link href="http://blog.hsatac.net/2012/03/xcode-4-dot-3-publish-ipa-for-testflight/"/>
    <updated>2012-03-07T10:05:00+08:00</updated>
    <id>http://blog.hsatac.net/2012/03/xcode-4-dot-3-publish-ipa-for-testflight</id>
    <content type="html"><![CDATA[<p>這兩天在研究 testflight 碰到了一點 Xcode 4.3 的小雷，記錄一下。</p>

<p>按照 testflight 的教學上傳 ipa 檔，一直出現 <code>mismatched-ubiquitykvstore-identifier-value</code> 的錯誤，但是憑證已經確認多次，肯定沒有問題。</p>

<p>翻了一下應該是 APP ID enable iCloud 的問題，但是不能 disable 掉的狀況，只好自己去 entitlement 補上需要的參數。</p>

<p>Xcode 4.3 的 entitlement 換地方了。</p>

<ul>
<li>請到 target 的 summary tab 拉到最底下找到 entitlement 區塊，勾選 <code>enable Entitlement</code>。</li>
<li><code>iCloud key-value Store</code> 這個欄位填上 <code>.*</code></li>
<li><code>iCloud Container</code> 這個部分自己加一個值 <code>.*</code></li>
</ul>


<p>存檔後你的專案就會多一個 <code>專案名.entitlements</code> 的檔案，打開確認一下內容是否有</p>

<p>```
<key>com.apple.developer.ubiquity-container-identifiers</key>
 <array></p>

<pre><code> &lt;string&gt;$(TeamIdentifierPrefix).*&lt;/string&gt;
</code></pre>

<p> </array>
 <key>com.apple.developer.ubiquity-kvstore-identifier</key>
 <string>$(TeamIdentifierPrefix).*</string>
```</p>

<p>再做 Archive, Share 成 ipa 檔上傳就可以了。</p>

<p><em>2012/04/42 補充</em></p>

<p>用 .* 的 key 送審 AppStore 時會被 reject，請設成跟你的 bundle identifier 一樣即可。</p>

<p>也就是：</p>

<p>```
<key>com.apple.developer.ubiquity-container-identifiers</key>
 <array></p>

<pre><code> &lt;string&gt;$(TeamIdentifierPrefix)com.yourcompany.coolapp&lt;/string&gt;
</code></pre>

<p> </array>
 <key>com.apple.developer.ubiquity-kvstore-identifier</key>
 <string>$(TeamIdentifierPrefix)com.yourcompany.coolapp</string>
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[整合 Redmine 和 git]]></title>
    <link href="http://blog.hsatac.net/2011/04/redmine-git-integration/"/>
    <updated>2011-04-14T00:00:00+08:00</updated>
    <id>http://blog.hsatac.net/2011/04/redmine-git-integration</id>
    <content type="html"><![CDATA[<p>其實就是[專案設定] > [版本控管] 裡面填 git repo path 而已<br />
不過一直報找不到專案，看了一下 error log  原來是找不到 git 執行檔<br />
解法很簡單，原本 httpd.conf 設定的 ruby 要再包一層去 export path<br />
例如原本你設定的是
<pre lang="bash">
PassengerRuby /usr/local/Cellar/ruby-enterprise-edition/2011.03/bin/ruby
</pre></p>




<p>就開一個  /usr/local/bin/ruby_with_env 的可執行檔<br />
裡面把 export $PATH
<pre lang="bash">
#!/bin/bash
export PATH="/usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/X11/bin:/opt/local/bin:/usr/local/git/bin:/usr/local/git/bin/:$PATH"
/usr/local/Cellar/ruby-enterprise-edition/2011.03/bin/ruby $*
</pre></p>




<p>再把 httpd.conf 的裡面設定的 ruby 改成
<pre lang="bash">
PassengerRuby /usr/local/bin/ruby_with_env
</pre></p>




<p>大功告成！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to enable php gmp on Mac OS X without macports]]></title>
    <link href="http://blog.hsatac.net/2011/04/how-to-enable-php-gmp-on-mac-os-x/"/>
    <updated>2011-04-07T00:00:00+08:00</updated>
    <id>http://blog.hsatac.net/2011/04/how-to-enable-php-gmp-on-mac-os-x</id>
    <content type="html"><![CDATA[<p>If you are using macports, you can easily install the package of "php-gmp".</p>




<p>But if you are a user of homebrew like me, you may need these tips.</p>




<p>First, you have to install gmp via homebrew, but it will give you gmp 5.0.1, which doesn't work with PHP 5.3</p>




<p>So you have to modify your Formula, go to /usr/local/Library/Formula/gmp.rb and modify:
<pre lang="ruby">url 'ftp://ftp.gnu.org/gnu/gmp/gmp-5.0.1.tar.bz2'
sha1 '6340edc7ceb95f9015a758c7c0d196eb0f441d49'</pre>
to
<pre lang="ruby">url 'ftp://ftp.gmplib.org/pub/gmp-4.3.2/gmp-4.3.2.tar.bz2'
sha1 'c011e8feaf1bb89158bd55eaabd7ef8fdd101a2c'</pre></p>




<p>Now, you can run <pre lang="bash">brew install gmp</pre> to install gmp.</p>




<p>Next step, download the php source code from php.net, we will need to build a php_gmp.so module from it.</p>




<p>Extract the source code and go to phpsource/ext/gmp/</p>




<p>run
<pre lang="bash">
phpize
./configure
MACOSX_DEPLOYMENT_TARGET=10.6 CFLAGS='-O3 -fno-common -arch i386 -arch x86_64' LDFLAGS='-O3 -arch i386 -arch x86_64' CXXFLAGS='-O3 -fno-common -arch i386 -arch x86_64' make -j6;sudo make install
</pre></p>




<p>And you will get your gmp.so in phpsource/ext/gmp/module/</p>




<p>Copy that to your /usr/lib/php/extensions/no-debug-non-zts-20090626/</p>




<p>And load it in your /private/etc/php.ini</p>




<p>It's done!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[連猴子也會之：在 Mac mini server 上架設 WebDAV git server]]></title>
    <link href="http://blog.hsatac.net/2011/04/%E9%80%A3%E7%8C%B4%E5%AD%90%E4%B9%9F%E6%9C%83%E4%B9%8B%EF%BC%9A%E5%9C%A8-mac-mini-server-%E4%B8%8A%E6%9E%B6%E8%A8%AD-webdav-git-server/"/>
    <updated>2011-04-04T00:00:00+08:00</updated>
    <id>http://blog.hsatac.net/2011/04/連猴子也會之：在-mac-mini-server-上架設-webdav-git-server</id>
    <content type="html"><![CDATA[<p>因為我的 mac mini server 不想開著 ssh 一直給人掃，所以想設定 https 的 git server，試了一下真的超簡單的。
<p style="text-align: center;"><a href="http://blog.hsatac.net/images/wp-uploads/2011/04/螢幕快照-2011-04-04-下午1.47.38.png"><img class="aligncenter size-full wp-image-360" title="螢幕快照 2011-04-04 下午1.47.38" src="http://blog.hsatac.net/images/wp-uploads/2011/04/螢幕快照-2011-04-04-下午1.47.38.png" alt="" width="522" height="312" /></a></p>
▲首先打開你的 Server Admin 建立一個新 Site 例如 repo.hsatac.net
<!--more--></p>




<p><p style="text-align: center;"><a href="http://blog.hsatac.net/images/wp-uploads/2011/04/螢幕快照-2011-04-04-下午1.48.24.jpg"><img class="aligncenter size-full wp-image-371" title="螢幕快照 2011-04-04 下午1.48.24" src="http://blog.hsatac.net/images/wp-uploads/2011/04/螢幕快照-2011-04-04-下午1.48.24.jpg" alt="" width="523" height="307" /></a></p>
▲Option 的部份把 WebDAV 打勾，我們要用這個做認證，Folding Listing 也勾起來比較方便。
<p style="text-align: center;"><a href="http://blog.hsatac.net/images/wp-uploads/2011/04/螢幕快照-2011-04-04-下午1.49.02.jpg"><img class="aligncenter size-full wp-image-372" title="螢幕快照 2011-04-04 下午1.49.02" src="http://blog.hsatac.net/images/wp-uploads/2011/04/螢幕快照-2011-04-04-下午1.49.02.jpg" alt="" width="332" height="162" /></a></p>
▲接著建立一個新的 Realm ，範例就用 project.git
<p style="text-align: center;"><a href="http://blog.hsatac.net/images/wp-uploads/2011/04/螢幕快照-2011-04-04-下午1.49.51.jpg"><img class="aligncenter size-full wp-image-373" title="螢幕快照 2011-04-04 下午1.49.51" src="http://blog.hsatac.net/images/wp-uploads/2011/04/螢幕快照-2011-04-04-下午1.49.51.jpg" alt="" width="522" height="288" /></a></p>
▲按+號把你的使用者拖過來，給他權限 Browse and Read/Write WebDAV，</p>




<p>當然如果你要公開這個 repo 給別人讀取，可以把 everyone 的權限設成 Browse and Read
<p style="text-align: center;"><a href="http://blog.hsatac.net/images/wp-uploads/2011/04/螢幕快照-2011-04-04-下午1.50.20.jpg"><img class="aligncenter size-full wp-image-374" title="螢幕快照 2011-04-04 下午1.50.20" src="http://blog.hsatac.net/images/wp-uploads/2011/04/螢幕快照-2011-04-04-下午1.50.20.jpg" alt="" width="521" height="310" /></a></p>
▲最後在 Security 的部份 把 SSL 打勾並選你的憑證</p>




<p>接著就來設定 remote repo 吧！<br />
把你剛剛設定的目錄建立起來
<pre lang="bash">mkdir /Library/WebServer/Documents/repo/project.git
cd /Library/WebServer/Documents/repo/project.git
git init --bare
mv hooks/post-update.sample hooks/post-update
git update-server-info</pre>
記得整個目錄的owner要改回 _www</p>




<p>遠端這樣就設定好啦！<br />
接著本地端的部份：</p>




<p>因為我們是走 https ，如果你的憑證是自簽的話，請先跟我這樣做：
<pre lang="bash">git config --global http.sslVerify false</pre>
接著一樣三步驟：
<pre lang="bash">git init
git add .
git commit -m "first commit"
git remote add origin https://repo.hsatac.net/project.git/
git push origin master --force -v</pre>
最後編輯 .git/config<br />
加上
<pre lang="bash">[branch "master"]
     remote = origin
     merge = refs/heads/master</pre></p>




<p>以上，就大功告成啦！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OSX Server 10.6 安裝 mysql2 gem]]></title>
    <link href="http://blog.hsatac.net/2011/02/mac-osx-server-10-6-%E5%AE%89%E8%A3%9D-mysql2-gem/"/>
    <updated>2011-02-22T00:00:00+08:00</updated>
    <id>http://blog.hsatac.net/2011/02/mac-osx-server-10-6-安裝-mysql2-gem</id>
    <content type="html"><![CDATA[<p>想當初因為 mac osx server 已經內建 mysql ，所以就沒有完全照 xdite 大神和 ihower 大神的環境安裝 best practice 走<br />
下場就是真的踩到很多地雷，真的是不聽老人言，吃虧在眼前。 mysql2 這個雷真的踩的很痛，然後 rvm 真的是好東西，別省這點時間。</p>




<p>言歸正傳，當你安裝 mysql2 gem 時碰到這個錯誤訊息：
<pre lang="bash">
EBuilding native extensions.  This could take a while...
ERROR:  Error installing mysql2:
    ERROR: Failed to build gem native extension.</pre></p>




<p>/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby extconf.rb<br />
checking for rb_thread_blocking_region()... no<br />
checking for mysql.h... no<br />
checking for mysql/mysql.h... no<br />
-----<br />
mysql.h is missing.  please check your installation of mysql and try again.<br />
-----
</p>




<p>請下：
<pre lang="bash">
env ARCHFLAGS="-arch x86_64" gem install mysql2 -- --with-mysql-config=/usr/local/mysql/bin/mysql_config
</pre></p>




<p>這樣應該就可以正常編譯了。(不過因為我為了解這個雷自己亂改過很多東西，所以我也不太確定，歡迎留言討論。)</p>

]]></content>
  </entry>
  
</feed>
