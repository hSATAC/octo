<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: devops | hSATAC]]></title>
  <link href="http://blog.hsatac.net/categories/devops/atom.xml" rel="self"/>
  <link href="http://blog.hsatac.net/"/>
  <updated>2014-10-22T11:15:51+08:00</updated>
  <id>http://blog.hsatac.net/</id>
  <author>
    <name><![CDATA[Ash Wu]]></name>
    <email><![CDATA[hsatac@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Docker 1.3 釋出]]></title>
    <link href="http://blog.hsatac.net/2014/10/docker-1-dot-3-release/"/>
    <updated>2014-10-22T11:09:00+08:00</updated>
    <id>http://blog.hsatac.net/2014/10/docker-1-dot-3-release</id>
    <content type="html"><![CDATA[<p><a href="https://blog.docker.com/2014/10/docker-1-3-signed-images-process-injection-security-options-mac-shared-directories/">Docker 1.3</a> 釋出。</p>

<p>最方便的一個地方是多了一個 <code>docker exec</code> 可以 inject 新的 process 到正在執行中的 docker container 中，只要下 <code>docker exec -i -t &lt;container id&gt; /bin/bash</code> 就可以進 shell 了， debug 方便許多，不需要再像之前一樣用各種 hack 例如 <code>lxc-attach</code> 或者 endpoint script 最後下 <code>/bin/bash</code> 之類的 workaround 來解了。</p>

<p>再來就是 boot2docker 在這版也解了 OSX 的 mount volume 的問題，可以正確 mount 到 Mac 本機，一樣可以拋棄之前的第三方 workaround 了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Duplicate Production Requests for Testing]]></title>
    <link href="http://blog.hsatac.net/2014/10/duplicate-production-requests-for-testing/"/>
    <updated>2014-10-21T00:09:00+08:00</updated>
    <id>http://blog.hsatac.net/2014/10/duplicate-production-requests-for-testing</id>
    <content type="html"><![CDATA[<p>當我們上新的架構或者調整資料庫參數等等的時候，總希望能夠用 production 環境來測試才比較準確，不過這麼重大的改變不能隨便拿正式環境和使用者當白老鼠；就算使用 production 資料庫的 dump, 也無法重複真正使用者的行為。</p>

<p>一般常用的方式是偷偷把 production 環境的流量複製一份，導到測試機器/環境去，觀察看看行為是否符合預期。</p>

<p>相較於以往看到較為複雜的 solution, 這邊介紹一個用 Go 開發的工具 &ndash; <a href="https://github.com/buger/gor">gor</a></p>

<!--more-->


<h2>簡介</h2>

<p>gor 已經發展了一年多了，進展的非常快。現在是一個簡單又非常好用的工具。可以監聽你指定的 port, 把流量轉到其他機器、或者 dump 成檔案，之後可再從這個檔案 replay、如果有統計分析的需求，也可以直接 redirect 進 elasticsearch 中再進行處理。</p>

<h2>Usage</h2>

<p>這邊列幾個基本常用的用途：</p>

<ul>
<li>把 request dump 到檔案</li>
</ul>


<p><code>sudo ./gor --input-raw :80 --output-file requests.gor</code></p>

<ul>
<li>從檔案 replay 流量 (限定 GET)</li>
</ul>


<p><code>sudo ./gor --input-file requests.gor --output-http http://10.2.7.202 --output-http-method GET</code></p>

<ul>
<li>直接複製流量丟到測試機</li>
</ul>


<p><code>sudo ./gor --input-raw :80 --output-http http://10.2.7.202 --output-http-method GET</code></p>

<p>注意：這個動作會比較吃 CPU, 官方文件是建議開兩個 process 一個錄流量，一個丟到 output.</p>

<p>除此之外還有很多功能，例如各種 regex, filter, 插入 header, http basic auth, 丟到多個機器&hellip;等等。</p>
]]></content>
  </entry>
  
</feed>
