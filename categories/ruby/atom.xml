<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | hSATAC]]></title>
  <link href="http://blog.hsatac.net/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blog.hsatac.net/"/>
  <updated>2013-02-15T18:08:21+08:00</updated>
  <id>http://blog.hsatac.net/</id>
  <author>
    <name><![CDATA[hSATAC]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[追蹤 Rubygems require 緩慢紀錄]]></title>
    <link href="http://blog.hsatac.net/2013/01/trace-rubygems-require-slow/"/>
    <updated>2013-01-30T10:18:00+08:00</updated>
    <id>http://blog.hsatac.net/2013/01/trace-rubygems-require-slow</id>
    <content type="html"><![CDATA[<p>昨天灌了一台新的機器，正準備用 <a href="http://puppetlabs.com">puppet</a> bootstrap 時卻發現他的 puppet 執行的非常緩慢。追蹤解決問題的過程十分有趣，在這邊紀錄一下。</p>

<p>由於 puppet 執行檔本身是一隻 ruby script，於是開啟了 irb -d 使用 DEBUG 模式直接執行看看該 script 的內容，看看能否看出問題在哪。</p>

<!--more-->


<p>結果是慢在 <code>require 'puppet'</code> 這裡。想說是不是 gempath 的問題，先用 gem env 看一下設定和環境變數，感覺一切正常。在使用 gem 指令的過程中，發現 <code>gem help commands</code> 這個指令也異常緩慢，而且和 puppet 慢的速度感覺是一樣的。使用 <code>time gem help commands</code> 和 <code>time puppet</code>
測量，果然兩邊都是慢 20 秒，感覺之間可能有某些關聯。</p>

<p>一度懷疑是硬碟壞軌，使用 <code>smartctl</code> 顯示硬碟狀況良好，又開始懷疑是 Ruby 1.9.3-p374 的 bug。但是上網搜尋沒有這樣的狀況，拿另一台舊的機器升級 Ruby 1.9.3-p374 也沒有這樣的狀況。看來是機器本身的問題。</p>

<p><code>ruby -d</code> 和 <code>irb -d</code> 都無法提供有用的資訊，只能看出在某個階段會卡住很久，只能往更低階的方向走。</p>

<p>先使用 <code>ltrace</code> 來觀察：</p>

<pre>
# ltrace -r ruby `which gem` help commands
  0.000000 __libc_start_main(0x400860, 4, 0x7fff767d5ce8, 0x4009a0 <unfinished ...>
  0.000301 setlocale(LC_CTYPE, "")                                                                                                            = "en_US.UTF-8"
  0.000577 ruby_sysinit(0x7fff767d5bec, 0x7fff767d5be0, 1, 1)                                                                                 = 0
  0.000319 ruby_init_stack(0x7fff767d5bf8, 0x7fff767d5b30, 0x7fff767d5b30, -1)                                                                = 0
  0.000759 ruby_init(0x7febf8, 0xffffffff, 0, 0)                                                                                              = 0x876f20
  0.005726 ruby_options(4, 0x7fff767d5ce8, 0x877520, 0x7f3c31b59640)                                                                          = 0xad4800
  0.025221 ruby_run_node(0xad4800, 0x7fff767d6fea, 0x877520, 0xad9560
  20.511227 +++ exited (status 0) +++
</pre>


<p>只能看出卡在 ruby_run_node 這邊，再翻出 <code>strace</code> 試試：</p>

<pre>
# strace -rT ruby `which gem` help commands
     0.000051 open("/usr/lib/libresolv.so.2", O_RDONLY|O_CLOEXEC) = 5 <0.000012>
     0.000049 read(5, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\220:\0\0\0\0\0\0"..., 832) = 832 <0.000008>
     0.000049 fstat(5, {st_mode=S_IFREG|0755, st_size=84840, ...}) = 0 <0.000007>
     0.000049 mmap(NULL, 2189960, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 5, 0) = 0x7fd97dd1e000 <0.000009>
     0.000047 mprotect(0x7fd97dd31000, 2097152, PROT_NONE) = 0 <0.000012>
     0.000048 mmap(0x7fd97df31000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 5, 0x13000) = 0x7fd97df31000 <0.000011>
     0.000054 mmap(0x7fd97df33000, 6792, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fd97df33000 <0.000010>
     0.000053 close(5)                  = 0 <0.000007>
     0.000104 mprotect(0x7fd97df31000, 4096, PROT_READ) = 0 <0.000011>
     0.000059 mprotect(0x7fd97e139000, 4096, PROT_READ) = 0 <0.000009>
     0.000048 munmap(0x7fd98213a000, 24363) = 0 <0.000011>
     0.000100 socket(PF_INET, SOCK_DGRAM|SOCK_NONBLOCK, IPPROTO_IP) = 5 <0.000013>
     0.000051 connect(5, {sa_family=AF_INET, sin_port=htons(53), sin_addr=inet_addr("192.168.79.161")}, 16) = 0 <0.000017>
     0.000073 poll([{fd=5, events=POLLOUT}], 1, 0) = 1 ([{fd=5, revents=POLLOUT}]) <0.000009>
     0.000058 sendmmsg(5, {{{msg_name(0)=NULL, msg_iov(1)=[{"\362\36\1\0\0\1\0\0\0\0\0\0\5devm3\0\0\1\0\1", 23}], msg_controllen=0, msg_flags=MSG_EOR|MSG_TRUNC|MSG_DONTWAIT|MSG_FIN|MSG_SYN|MSG_NOSIGNAL|MSG_MORE|MSG_WAITFORONE|0x13a0000}, 23}, {{msg_name(0)=NULL, msg_iov(1)=[{":O\1\0\0\1\0\0\0\0\0\0\5devm3\0\0\34\0\1", 23}], msg_controllen=0, msg_flags=MSG_PROXY|MSG_EOR|MSG_WAITALL|MSG_TRUNC|MSG_DONTWAIT|MSG_SYN|MSG_RST|MSG_WAITFORONE|0x1120000}, 23}}, 2, MSG_NOSIGNAL) = 2 <0.000020>
     0.000081 poll([{fd=5, events=POLLIN}], 1, 5000) = 0 (Timeout) <5.004974>
     5.005030 poll([{fd=5, events=POLLOUT}], 1, 0) = 1 ([{fd=5, revents=POLLOUT}]) <0.000008>
     0.000051 sendmmsg(5, {{{msg_name(0)=NULL, msg_iov(1)=[{"\362\36\1\0\0\1\0\0\0\0\0\0\5devm3\0\0\1\0\1", 23}], msg_controllen=0, msg_flags=MSG_EOR|MSG_TRUNC|MSG_DONTWAIT|MSG_FIN|MSG_SYN|MSG_NOSIGNAL|MSG_MORE|MSG_WAITFORONE|0x13a0000}, 23}, {{msg_name(0)=NULL, msg_iov(1)=[{":O\1\0\0\1\0\0\0\0\0\0\5devm3\0\0\34\0\1", 23}], msg_controllen=0, msg_flags=MSG_PROXY|MSG_EOR|MSG_WAITALL|MSG_TRUNC|MSG_DONTWAIT|MSG_SYN|MSG_RST|MSG_WAITFORONE|0x1120000}, 23}}, 2, MSG_NOSIGNAL) = 2 <0.000015>
     0.000075 poll([{fd=5, events=POLLIN}], 1, 5000^CProcess 7498 detached
 <detached ...>
</pre>


<p>可以很明顯看出是往 192.168.79.161:53 問 devm3 ，結果 timeout 了四次，一次五秒剛好 20 秒。</p>

<p>兇手已經呼之欲出了，就是我 =皿=</p>

<p>當時幫這台新機器改了 hostname 以後，忘記修改 /etc/hosts ，導致他自己不認得自己的 hostname。當然那個會 timeout 的 DNS 也是有問題，不過那是關於 djbdns 的另一個故事了...。</p>

<p>最後將 /etc/hosts 改回來就完全正常了。可喜可賀。最難抓的 bug 果然都是最愚蠢的...。</p>

<p>在這邊要感謝 <a href="http://www.tenlong.com.tw/items/9862765674?item_id=481936">Debug Hacks 除錯駭客－極致除錯的技巧與工具</a> 一書的譯者，事實證明寫 scripting language 也是要會一些基礎 debug 技巧的！推薦各位購買這本書。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyConf.tw 2012 流水帳]]></title>
    <link href="http://blog.hsatac.net/2012/12/ruby-conf-taiwan-2012/"/>
    <updated>2012-12-09T13:04:00+08:00</updated>
    <id>http://blog.hsatac.net/2012/12/ruby-conf-taiwan-2012</id>
    <content type="html"><![CDATA[<p>今年的 Ruby Conf Taiwan 2012 實在太精彩，太感動了，一定要寫下來紀錄一下。</p>

<h3>前夜祭</h3>

<p>首先是經過 ihower 三年的邀請，今年終於邀請到 Ruby 之父 Matz 來到台灣。由於 Matz 提早到台灣，所以在 Ruby Conf 的前一天晚上也臨時加開了 Matz 見面會，能有這個近距離和大師接觸，聊天，提問的機會實在非常難得。不過也許是這時候大家把問題都問的差不多了，結果隔天 Matz 的 keynote 反而沒什麼人提問(笑)。</p>

<p><img src="/images/rubyconftw2012/matz_and_i.jpg" alt="matz and I" /></p>

<!--more-->


<h3>Day 1</h3>

<p>這次場地不是在老地方中研院，而是在天母農訓中心國際會議廳，大家應該都是第一次來這個地方。場地設備算 OK ，不過沒有有線網路可用，然後剛好無線網路又悲劇了，後來大家好像都是靠自己的 3G 上網。午餐也是在這邊有 buffet 可以吃，非常好吃！一般訂便當完全無法相提並論。不過座位稍微矮小狹窄了一點，我這個身高的人坐一整天其實膝蓋很痛⋯⋯。</p>

<p>這個廳比中研院的大廳小，比中研院的小廳大。其實我覺得這樣的配置挺不錯的，不會離講者太遠，互動性比較高，也不會太擁擠。</p>

<p>一早就是 Matz 的 Keynote，同時講了三個主題，非常豐富；接下來是來自新加坡的 Wei Lu 分享 Pair Programming ，台風非常穩健。最令人驚喜的是 Jserv 的 mruby talk！從為什麼他們選擇 mruby 到 ARM 優化的細節，最後 live demo，連 Matz 在台下都聽得連連點頭。</p>

<blockquote class="twitter-tweet"><p>こういうmrubyの話が聞けるのは予想外だったなあ</p>&mdash; Yukihiro Matsumoto (@yukihiro_matz) <a href="https://twitter.com/yukihiro_matz/status/276903947690729472" data-datetime="2012-12-07T04:20:20+00:00">December 7, 2012</a></blockquote>


<script src="http://blog.hsatac.net//platform.twitter.com/widgets.js" charset="utf-8"></script>


<blockquote><p>「聽到這種 mruby 的資訊真是意料之外」</p></blockquote>

<p>下午 godfat 關於 concurrency application servers 的 talk 也很精彩，從實務出發，由淺入深。</p>

<p>這次與會的外國來賓和講者比例非常高，所以很多中文議程講者都臨時決定改用英文分享。其實我是覺得滿好的，身為一個國際性的研討會，盡可能照顧到所有人，讓外國來賓比較有參與感。</p>

<p>結果第一天的議程除了 godfat 以外全部都用英文演說了，恭喜 godfat 得到「Day 1 唯一中文講者」的成就 XD</p>

<h3>Party</h3>

<p>晚上參加了 official party，表定到晚上 12 點，因為我不太喝酒，本來想說去 social 一下就回家了。沒想到真的喝到 12 點才走(爆)</p>

<p>這個場合真的很好，可以很輕鬆的跟新朋友老朋友、各國來賓輕鬆的對談。跟好久不見的 dreamslab ben update 了一下近況；跟 jserv 聊了一下他的新公司；也跟慕凡交換了一下遊戲界甘苦談。</p>

<p>席間我問 Matz：「您去過許多 ruby conf, 這是第一次來 ruby conf taiwan ，您覺得怎麼樣？」</p>

<p>他回答，ruby conf taiwan 規模雖然小，但是質量水準很高，他相當驚訝。又問明年他是否願意再來，他說只要我們有邀請，他就會再來。</p>

<p>能讓 Matz 如此肯定，ihower 跟慕凡辦的真的是太優秀了。</p>

<h3>Day 2</h3>

<p>Day 2 是我原本就期待許久的議程，主要是 dlackty 的 devOps toolbox 會提到 chef，緊接著 thegiive 會介紹 puppet，這兩套工具我 survey 了一陣子，無法決定要用哪套，剛好來聽聽看心得。在兩位 Session 結束後也分別向兩位請教了一些 devOps 上的疑惑。</p>

<p>早上 Gosuke Miyashita 的 talk 也講了很多有趣的東西，例如他們的 <a href="https://github.com/paperboy-sqale/sqale-patches">anti fork bomb patch</a> 和 <a href="https://github.com/mizzy/openssh-script-auth">SSH router 實作</a>，讓我對 paperboy &amp; co. 這家陌生的日本公司有很深刻的印象。</p>

<p>下午 josephku 的 RubyMotion 也講的很精彩。 RubyMotion 也是我關注很久的技術，可以用 ruby 語法寫 iOS 對我這種被逼上梁山的 iOS 開發者來說有很大的吸引力。但是他的資料一直非常少，很訝異 josephku 能掌握並分享這樣一個新穎的技術，QA 時我也提問了兩個問題。會後本想找 josephku 認識一下，但緣鏗一面，希望日後有機會。</p>

<h3>End</h3>

<p>這次 Ruby Conf Taiwan 2012 的 Session 質量非常高，高到連外國來賓都很訝異。</p>

<blockquote class="twitter-tweet"><p>しかし，私が最適化の話とかをして，真面目に最適化の中身の質問を受けるカンファレンスは非常に久しぶりな気がする．台湾凄い．</p>&mdash; _ko1 (@_ko1) <a href="https://twitter.com/_ko1/status/277339165358714880" data-datetime="2012-12-08T09:09:44+00:00">December 8, 2012</a></blockquote>


<script src="http://blog.hsatac.net//platform.twitter.com/widgets.js" charset="utf-8"></script>


<blockquote><p>「不過, 讓我談到最佳化之類的議題、被認真地問最佳化核心部份的問題 conference 似乎非常久沒遇過了, 台灣真厲害。」</p></blockquote>

<p>我覺得這次議程篩選和安排的相當好，各領域的主題都有，展現了 Ruby 的多種可能性；深度也夠，不僅是聽眾收穫豐碩，講者們也能有互動。例如第一天 mruby 的幾位講者和來賓 jserv, matz, 高橋彼此會後也都能有交流。</p>

<p>聽 ihower 說這次篩選主題非常嚴格，有許多 sponser 的投稿都沒能入選，我覺得這樣非常好，贊助歸贊助，會給他們廣告的空間，不過維持大會的水準才是第一要務。</p>

<p>不誇張，這次 Ruby Conf Taiwan 2012 真的是我參加到目前為止台灣研討會裡最棒的一場，感謝 ihower 和慕凡以及所有工作人員的努力！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Youtube 加入我的最愛後自動抓檔上傳至 Google Music]]></title>
    <link href="http://blog.hsatac.net/2012/01/youtube-favorite-add-google-music/"/>
    <updated>2012-01-17T19:33:00+08:00</updated>
    <id>http://blog.hsatac.net/2012/01/youtube-favorite-add-google-music</id>
    <content type="html"><![CDATA[<p>這個標題很冗長，不過正是 Youtube 加入我的最愛後自動抓檔上傳到 Google Music 。</p>

<p>這個需求是這樣來的，我常常在 Youtube 聽到喜歡的歌，習慣性按加入最愛，隨時可以拿出來重複播放。不過在最近都用 Google Music 來管理我的音樂庫，行進時也可以用 Android 上的 Google Music App 聆聽音樂。</p>

<p>但這樣一來，就要透過 Youtube Downloader 等網站或軟體抓下影片檔後再轉檔、上傳到 Google Music ，這樣實在是太麻煩了。</p>

<p>有沒有什麼方法可以把這個過程自動化呢？第一個想到的是利用 ifttt 。不過 ifttt 要達成這個功能需要繞許多彎路，最後決定自己寫一個。</p>

<!--more-->


<p>想法很簡單，大概分為四部分：</p>

<ul>
<li><p>讀取 Youtube 我的最愛</p></li>
<li><p>抓到有新增就取得資訊下載影片</p></li>
<li><p>透過 <code>ffmpeg</code> 之類轉為 mp3</p></li>
<li><p>透過 Google Music Manager 上傳</p></li>
</ul>


<p>做了一番 survey 後發現 <a href="https://github.com/rg3/youtube-dl">youtube-dl</a> 這個工具實在非常好用。他是用 python 寫的一個 script ，只要丟網址給他就會幫你下載。更棒的是他連 <code>ffmpeg</code> 都接好了，加上參數就可以直接輸出成 mp3 檔案。</p>

<p>抓取的指令是：</p>

<p><code>youtube-dl -o "%(title)s.%(ext)s" -q --extract-audio --audio-format "mp3" "[youtube_url]"</code></p>

<p>剩下的工作就只剩下讀取 Youtube 我的最愛，判斷加入的時間。想來應該很簡單，不過這部份卻卡了一兩個小時。</p>

<p>原因是 <strong>Youtube 的 API 寫的太不清楚啦！！！</strong></p>

<p>根據 <a href="http://code.google.com/intl/zh-TW/apis/youtube/2.0/developers_guide_protocol_favorites.html#Retrieving_favorite_videos">GData Youtube API</a> ：</p>

<blockquote><p>The <code>&lt;published&gt;</code> tag in a favorite videos feed entry identifies the time that the video was marked as a favorite and not the time that the video was published.</p></blockquote>

<p>用 <code>&lt;published&gt;</code> 這個欄位就可以取得這筆影片新增到我的最愛的時間，這樣就可以用來判斷是否是新加入的項目。</p>

<p>但是他從頭到尾沒有提到 <strong>這個 API 要用 v=2 來連這個欄位才會有效</strong> 這件事。如果沒有指定 version ，這個欄位出來的值是影片上傳時間，卡在這邊超久的啊。</p>

<p>總之用一個檔案來記錄上次抓取的時間，就可以達成原本的目的了。</p>

<p>記得最後把 Google Music Manager 設定成這個目錄，這樣轉好的 mp3 就會自動上傳到 Google Music 啦。</p>

<p>所有的程式碼在這裡。</p>

<p><a href="https://github.com/hSATAC/youtube-favorite-to-google-music">https://github.com/hSATAC/youtube-favorite-to-google-music</a></p>

<h3>附錄</h3>

<p>其實原本的需求是抓下來以後先存進 itunes 再上傳到 Google Music ，但是後來因為現在沒在用 itunes 所以簡化了。</p>

<p>如果有這個需求的朋友可以參考 <a href="http://dougscripts.com/itunes/itinfo/folderaction01.php">Folder Actions and iTunes</a> (Mac Only)。</p>

<p>對指定資料夾設定動作，當有新增音樂檔案到此資料夾的時候自動把檔案丟進 itunes 。再把 Google Music Manager 設定成自動上傳 itunes 新增的音樂即可。</p>

<p>之後可能會加上轉好 mp3 後加上 ID3 TAG 的功能吧，不過那又是另外一個故事了(遠目)。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redmine + Bundler 復活記]]></title>
    <link href="http://blog.hsatac.net/2011/09/redmine-bundler-%E5%BE%A9%E6%B4%BB%E8%A8%98/"/>
    <updated>2011-09-30T00:00:00+08:00</updated>
    <id>http://blog.hsatac.net/2011/09/redmine-bundler-復活記</id>
    <content type="html"><![CDATA[<p>老實說，不記得之前是動了什麼，總之我的佈署 apache + passenger + ree 環境<br />
redmine 爆炸了。推測應該是 gem 的關係。<br />
上網看了一下， rails 2.3 只支援 rubygems 1.7<br />
就先把 rubygems downgrade 回來
<pre lang="bash">gem update --system 1.7</pre></p>




<p>和 tkalu, xdite, ihower, 以及小蟹詢問了各種可能的解決方案後<br />
確定我應該是要用 bundler 來管理一下 redmine 的 gems</p>




<p>根據 ihower 提供的資訊， redmine 有一個內建 bundler 的 fork 版<br />
搜尋了一下找到了 https://www.chiliproject.org/<br />
把他的 <a href="https://github.com/chiliproject/chiliproject/blob/unstable/Gemfile" target="_blank">Gemfile</a> 借過來一用</p>




<p>再按照 <a href="http://gembundler.com/rails23.html" target="_blank">Bundler 官網上的 Rails 2 教學</a>
來設定，果然成功把我的 redmine 救了回來！</p>




<p>chiliproject 的 Gemfile 可能要稍加修改，例如他用 rails 2.3.14，可以改成 redmine 官網支援的 2.3.11<br />
然後一些沒用到的 gem 例如 pg 可以移除。</p>

]]></content>
  </entry>
  
</feed>
