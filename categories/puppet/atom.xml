<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: puppet | hSATAC]]></title>
  <link href="http://blog.hsatac.net/categories/puppet/atom.xml" rel="self"/>
  <link href="http://blog.hsatac.net/"/>
  <updated>2014-06-01T01:55:21+08:00</updated>
  <id>http://blog.hsatac.net/</id>
  <author>
    <name><![CDATA[Ash Wu]]></name>
    <email><![CDATA[hsatac@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Puppet 學習筆記]]></title>
    <link href="http://blog.hsatac.net/2013/02/puppet-study-note/"/>
    <updated>2013-02-22T11:38:00+08:00</updated>
    <id>http://blog.hsatac.net/2013/02/puppet-study-note</id>
    <content type="html"><![CDATA[<p>前陣子玩了 Puppet…把一些重點和資源紀錄在這邊…
初學 Puppet 的話很建議看一遍<a href="http://docs.puppetlabs.com/learning/">官方教學</a>，雖然沒有很完整但整個 run 過基礎的概念會有。</p>

<h2>Infrastructure as Code</h2>

<p>Puppet 的概念是 infrastructure as code，那跟以往寫 shell scripts 有何不同&hellip;？</p>

<p>其實基本上是相通的…但概念層次上高了一層。寫 shell script 主要是加速重複性工作、減少人為疏失，但你也很難去 reuse 這些東西。</p>

<p>Puppet 則是往上拉了一層虛擬層，你只要定義你 infrastructure 的狀態，。可以模組化、重用你程式碼，用清楚易懂的 code 描述套件要怎麼裝，設定檔有哪些，每個 server 之間的關係是怎麼樣&hellip;。</p>

<p>Code 就是文件， code 就是你的 infrastructure。不但好寫好讀好維護，更可直接拿來執行。</p>

<!--more-->


<h2>Resource</h2>

<p>Puppet 中最重要的東西、以及最基本的基礎元件叫做 resource，例如 file, package, service 這三個就是最常用的 resource ，你可以透過 resource 來指定你的檔案狀態、套件安裝狀態、服務狀態等等。</p>

<p>Resource 列表和用法可參考：<a href="http://docs.puppetlabs.com/references/latest/type.html">http://docs.puppetlabs.com/references/latest/type.html</a></p>

<p>resource type 要注意大小寫，當作 metaparameters 的時候寫作 <code>Type[title]</code> Type 要大寫。</p>

<h2>Dependencies</h2>

<p>我們會撰寫 manifest 檔案來描述 resource，需要注意的是這些 resource 都是 sync 執行的，並不是順序執行，因此就會有相依性的問題產生。</p>

<p>Puppet 提供了 before / require 關鍵字</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>file {'/tmp/test1':
</span><span class='line'>  ensure  =&gt; present,
</span><span class='line'>  content =&gt; "Hi.",
</span><span class='line'>  before  =&gt; Notify['/tmp/test1 has already been synced.'],
</span><span class='line'>  # (See what I meant about symbolic titles being a good idea?)
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>notify {'/tmp/test1 has already been synced.':}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>也可以用 chaining 的寫法，以箭頭表示 &lt;&ndash; 或 &ndash;> 都可以：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>file {'/tmp/test1':
</span><span class='line'>  ensure  =&gt; present,
</span><span class='line'>  content =&gt; "Hi.",
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>notify {'after':
</span><span class='line'>  message =&gt; '/tmp/test1 has already been synced.',
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>File['/tmp/test1'] -&gt; Notify['after']
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>另外有一組「觸發」的關鍵字叫 notify / subscribe ，可以用 &lt;~ 或 ~> 表示，當前面的 Resource 有更新，會通知後面的 resource 執行。</p>

<p>還有一些狀況 Puppet 會自動處理 dependencies 。這叫 Autorequire。</p>

<p>例如你定義了兩個目錄，其中一個目錄在另一個目錄之下，Puppet 很聰明會自動判斷他們的相依性。又例如你定義 user 和這個 user 的 ssh_authorized_key，Puppet 也會自動處理他們的順序。</p>

<h2>Module</h2>

<p>在 Puppet 裡面我們可以寫 class，而 module 就是可重用的 class。放在 modulepath 裡面。</p>

<p>可使用 <code>puppet apply --configprint modulepath</code> 查看 modulepath 設定值。</p>

<p><code>puppet apply --configprint all</code> 可看全部設定。</p>

<p>Module 目錄有固定的格式</p>

<ul>
<li><p><code>/etc/puppet/module/{module_name}/manifests/init.pp</code> 這是 module 的 main file</p></li>
<li><p><code>/etc/puppet/module/{module_name}/manifests/files</code> 使用 <code>puppet://</code> 來 serve file 的時候會抓這下面的檔案。例如 <code>puppet:///module/php/php.conf</code> 就是 <code>`/etc/puppet/module/php/files/php.conf</code>。</p></li>
<li><p><code>/etc/puppet/module/{module_name}/templates/</code> module 若有使用 template 就要放在這。</p></li>
</ul>


<p>寫好 module 後想測試可執行 <code>puppet apply -e "include php"</code> 來測試，想看完整 debug 訊息可加上 <code>-vd</code> 參數 <code>puppet apply -e "include php" -vd</code></p>

<p>除了自己寫的 module 以外也可以使用別人寫好的 module 來加快開發速度。</p>

<p>關於 module 設計的一些基本概念可以參考這篇好文：<a href="http://www.devco.net/archives/2012/12/13/simple-puppet-module-structure-redux.php">Simple Puppet Module Structure Redux</a></p>

<h3>Puppet Forge</h3>

<p>Puppet 提供了一個 module 集中地 <a href="http://forge.puppetlabs.com/">Puppet Forge</a> 可以直接來此搜尋現成的 module。不過根據我的觀察這些 module 大多都是支援 debian/ubuntu 等主流 distro，若使用其他 distro 的可能要考慮自己寫或是 contribute 。</p>

<p>不管怎樣，可以來這裡參考別人寫的 module 收穫會很多。</p>

<p>安裝 Puppet module 可使用以下指令：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>puppet module install puppetlabs-apache &mdash;version 0.0.2
</span><span class='line'>puppet module list
</span><span class='line'>puppet module search apache
</span><span class='line'>puppet module uninstall puppetlabs-apache
</span><span class='line'>puppet module upgrade puppetlabs-apache &mdash;version 0.0.3</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>更詳細的說明可參考：<a href="http://docs.puppetlabs.com/puppet/latest/reference/modules_installing.html">Modules Installing</a></p>

<h2>Defined Resource Types</h2>

<p>我們可以定義自己的 resource type，透過 <code>define</code> 這個關鍵字。跟 class 用法基本上一樣，但是 define 不支援繼承。有點像是 marco 的功能，例如我們可以定義一個 developer 的 resource，把相關的東西都包在一起：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>define developer($user = $title, $uid, $ssh_key) {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>    $key_seg = split($ssh_key, ' ')
</span><span class='line'>    $ssh_key_title = $key_seg[2]
</span><span class='line'>    $ssh_key_type  = $key_seg[0]
</span><span class='line'>    $ssh_key_hash  = $key_seg[1]
</span><span class='line'>    user {$user:
</span><span class='line'>            ensure =&gt; present,
</span><span class='line'>            managehome =&gt; true,
</span><span class='line'>            groups =&gt; ['wheel', 'users'],
</span><span class='line'>            uid =&gt; $uid,
</span><span class='line'>    } -&gt;
</span><span class='line'>    ssh_authorized_key {"${user}_puppet_key":
</span><span class='line'>            ensure =&gt; present,
</span><span class='line'>            key =&gt; $ssh_key_hash,
</span><span class='line'>            user =&gt; $user,
</span><span class='line'>            type =&gt; $ssh_key_type,
</span><span class='line'>            name =&gt; "${user}_puppet_key",
</span><span class='line'>    } -&gt;
</span><span class='line'>    file {"/home/${user}":
</span><span class='line'>            mode =&gt; 0755,
</span><span class='line'>    } -&gt;
</span><span class='line'>    file {"/home/dev/${user}":
</span><span class='line'>            ensure =&gt; link,
</span><span class='line'>            target =&gt; '/home/$user',
</span><span class='line'>    }
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Functions</h2>

<p>Puppet 提供了一些函數可運用，可透過 <code>puppet doc --reference function</code> 指令查看，或者至 <a href="http://docs.puppetlabs.com/references/latest/function.html%20function%20list">http://docs.puppetlabs.com/references/latest/function.html function list</a></p>

<h2>Stage</h2>

<p>有些狀況想讓不同 module 在不同的 stage 執行，就可以使用 stage 功能。</p>

<p>預設所有 module 都是 default 在 <code>main</code> stage，所以可以定義其他的 stage 在 main 之前或之後即可。</p>

<p>詳細參考 <a href="http://docs.puppetlabs.com/puppet/latest/reference/lang_run_stages.html">Puppet Run Stages</a></p>

<h2>Puppet 目錄架構</h2>

<ul>
<li><p><code>/etc/puppet/puppet.conf</code> 主要設定檔，可參考<a href="http://docs.puppetlabs.com/guides/configuring.html">官方文件</a></p></li>
<li><p><code>/etc/puppet/modules/</code> 放你寫的 modules</p></li>
<li><p><code>/etc/puppet/manifests/site.pp</code> 放你的 node 描述檔，也就是你每台伺服器要怎樣定義寫在這。</p></li>
</ul>


<h2>Puppet 流程</h2>

<p>Puppet 會把我們撰寫的 manifest 檔案 compile 起來並處理其中的 dependencies 後打成一包，再查詢目前系統的狀態後更改系統到我們定義的狀態，如圖示：</p>

<p><img src="http://docs.puppetlabs.com/learning/images/manifest_to_defined_state_unified.png" alt="manifest to defined state" /></p>

<h3>Master-Agent</h3>

<p>Puppet 可以採用 Master-Agent 架構，一台 master 據說能承載 5000 個 agents。也可以單機跑，也就是類似所謂的 Chef solo。</p>

<p>Master-Agent 的流程如下圖：</p>

<p><img src="http://docs.puppetlabs.com/learning/images/manifest_to_defined_state_split.png" alt="master agent" /></p>

<p>基本架構就是 master 上 run <code>puppetmaster</code> 服務， agent 上 run <code>puppetagent</code> 服務。</p>

<p>也可以手動從 agent 觸發，執行 <code>puppet agent --test -vd</code>。</p>

<h3>Masterless Puppet</h3>

<p>想要使用 masterless puppet 非常容易，只要自己指定你的 modulepath 和你的 site.pp 即可。</p>

<p><code>puppet apply --modulepath ./modules manifests/site.pp</code></p>

<h2>其他參考資料</h2>

<ul>
<li><p><a href="http://docs.puppetlabs.com/guides/troubleshooting.html">Trouble Shooting</a> Puppet 使用上有問題可以先來這邊查查看。</p></li>
<li><p><a href="http://www.puppetcookbook.com/">Puppet CookBook</a> 有許多實用案例</p></li>
<li><p><a href="https://github.com/jordansissel/puppet-examples">Puppet Examples</a> 有很多東西直接看 code 是最快的&hellip;。</p></li>
<li><p>關於 Archlinux 使用 Puppet 相關可參考我上兩篇文章：<a href="http://blog.hsatac.net/2013/02/using-puppet-on-archlinux/">ArchLinux 使用 Puppet 注意事項</a>、<a href="http://blog.hsatac.net/2013/02/bootstrap-archlinux-with-puppet/">使用 Puppet 快速佈署 Archlinux</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ArchLinux 使用 Puppet 注意事項]]></title>
    <link href="http://blog.hsatac.net/2013/02/using-puppet-on-archlinux/"/>
    <updated>2013-02-21T14:12:00+08:00</updated>
    <id>http://blog.hsatac.net/2013/02/using-puppet-on-archlinux</id>
    <content type="html"><![CDATA[<p>想在 ArchLinux 使用 Puppet 有一些需要注意的地方，在這邊順便補充一下。</p>

<h2>systemctl 路徑</h2>

<p>Arch 在之前的改版已經把 <code>/bin/systemctl</code> 移到 <code>/usr/bin/systemctl</code> 下，但 Puppet 還是抓 <code>/usr/systemctl</code> 導致找不到 systemd 這個 provider ，這個問題已經在 Puppet 3.1 修改，也可以自己手動 link 一下。</p>

<h2>套件庫需更新到最新版</h2>

<p>Arch 每次都要先 <code>pacman -Syy</code> 一下不然 package 會無法使用。</p>

<p>以上這兩個問題我有寫了一段 module</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>For Archlinux. This issue will be fixed in puppet 3.1&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>class archfix {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>file {'/bin/systemctl':
</span><span class='line'>    ensure =&gt; link,
</span><span class='line'>    target =&gt; '/usr/bin/systemctl',
</span><span class='line'>}   
</span><span class='line'>exec {'pacman -Syy':
</span><span class='line'>    path =&gt; ["/usr/bin"]
</span><span class='line'>}   
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在 manifest 中利用 stage 功能先執行 archfix 這個 module 就可以了。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>node &lsquo;devm3&rsquo; {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>stage { 'pre': }
</span><span class='line'>class {
</span><span class='line'>    "archfix": stage =&gt; "pre"; 
</span><span class='line'>}   
</span><span class='line'>Stage["pre"] -&gt; Stage["main"]
</span><span class='line'>
</span><span class='line'># include other modules...
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Openrc &amp; Systemd</h2>

<p>ArchLinux 現在還有很多套件同時支援 openrc 的 initscript 和 systemd，Puppet 會偵測到兩個 provider 但是他會選擇用 initscript 。可以在 service resource 指定 <code>provider =&gt; systemd</code> 即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Puppet 快速佈署 Archlinux]]></title>
    <link href="http://blog.hsatac.net/2013/02/bootstrap-archlinux-with-puppet/"/>
    <updated>2013-02-19T17:51:00+08:00</updated>
    <id>http://blog.hsatac.net/2013/02/bootstrap-archlinux-with-puppet</id>
    <content type="html"><![CDATA[<p>筆記一下安裝步驟&hellip;。</p>

<h2>Install Archlinux</h2>

<p>由於 Archlinux 本身沒有提供方便的安裝模式、因此我們使用 <a href="https://twitter.com/helmuthdu">@helmuthdu</a> 的快速安裝 script <a href="https://github.com/helmuthdu/aui">AUI</a>，安裝完成後再使用 puppet bootstrap 環境</p>

<ul>
<li>放入 CD 選擇 x64_64 開機</li>
<li>執行 <code>curl hsatac.net/getaui | sh</code></li>
<li>進入 helmuthdu-aui-xxxx 目錄</li>
<li>執行 <code>./aui --ais</code> 進入安裝程式</li>
<li>輸入 1-14 執行全部安裝步驟</li>
</ul>


<p>ps. 如遇特定機種無法使用 grub2 可改用 syslinux bootloader</p>

<h2>Reboot</h2>

<p>安裝完成重開機後後首先設定讓網路能通
可參考<a href="https://wiki.archlinux.org/index.php/Network_Configuration">官方wiki</a></p>

<p>如欲使用 dhcp 可執行 <code>systemctl start dhcpcd</code>
<code>systemctl enable dhcpcd</code> 開機自動執行</p>

<ul>
<li>回到 helmuthdu-aui-xxx 目錄</li>
<li>執行 <code>./aui</code> 繼續安裝</li>
<li>新增使用者步驟必須執行，因後續步驟需用 sudo</li>
<li>AUR helper 選擇 yaourt
(Yaourt 和 packer 大同小異，但因 puppet 使用 yaourt 所以改用。)</li>
<li>後面的 setup 可跳過，或者裝 Basic Setup 即可，這邊都是 桌面環境相關</li>
<li>設定 /etc/resolv.conf</li>
</ul>


<h2>使用 puppet</h2>

<p>puppet 可使用 master-agent 架構或者單機(solo) 安裝，詳見 puppet wiki</p>

<ul>
<li><code>yaourt puppet</code> 安裝 puppet</li>
<li>在 /etc/hosts 設定 puppet master hostname 並在 /etc/puppet/puppet.conf [agent] 區塊設定 <code>server = xxx</code> (hostname 要跟 master hostname 一樣不然憑證不會過)</li>
<li>run <code>puppet agent --test</code> 會出現沒有憑證訊息</li>
<li>回到 puppet master 執行 <code>puppet cert list</code> 會看到待簽署的憑證</li>
<li>執行 <code>puppet cert sign [hostname]</code> 簽署</li>
<li>記得在 master 的 /etc/puppet/manifests/site.pp 設定新的 node 定義</li>
<li>回到 agent 執行 <code>puppet agent --test</code> 進行安裝</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puppet Development Tools]]></title>
    <link href="http://blog.hsatac.net/2014/04/puppet-development-tools/"/>
    <updated>2014-04-20T13:36:00+08:00</updated>
    <id>http://blog.hsatac.net/2014/04/puppet-development-tools</id>
    <content type="html"><![CDATA[<p>好一陣子沒寫 Puppet, 最近回來研究發現多了不少好用的工具，可以有效加速開發速度。</p>

<h2>Vagrant</h2>

<p>現在 <a href="http://www.vagrantup.com/">Vagrant</a> provisioner 直接提供了 <a href="http://docs.vagrantup.com/v2/provisioning/puppet_apply.html">Puppet 選項</a>，可以幫你 sync hiera, manifests, modules 進去直接 run，也可以帶入 custom options 或是 facter，在開發 modules 的時候可以不用管其他東西，專心 focus 在 pp 本身。</p>

<p>只要在 Vagrantfile 裡面加入這樣的設定即可：</p>

<p>```
  # Puppet config
  config.vm.provider &ldquo;virtualbox&rdquo; do |vb, override|</p>

<pre><code>override.vm.provision "puppet" do |puppet|
  puppet.options = "--parser future --verbose --debug" # For debug only
  puppet.manifests_path = "manifests"
  puppet.manifest_file  = "vagrant.pp"
  puppet.module_path    = "modules"
  puppet.hiera_config_path = "hiera.yaml"
end
</code></pre>

<p>  end
```</p>

<p>不過有兩個小地方需要注意：</p>

<!-- more -->


<h3>Puppet 版本</h3>

<p>Vagrant 附的 Puppet 版本比較舊，是 2.7x。如果有新版本的需求，可以使用這隻 script 來升級 Puppet：</p>

<script src="https://gist.github.com/hSATAC/11106132.js"></script>


<p><code>
  # Upgrade Puppet from 2.7 to 3.x
  config.vm.provision :shell, :path =&gt; "scripts/upgrade_puppet.sh"
</code></p>

<h3>Hiera 目錄</h3>

<p>通常 hiera 不會只有一隻檔案，但 Vagrant 只會幫你掛上 modules 和 manifests 資料夾。這時就需要把 hiera 的目錄丟到 manifests 下面，並且在 hiera 設定 <code>:datadir: "%{settings::manifestdir}/hieradata"</code> 直接去吃 manifests 的路徑即可。</p>

<hr />

<h2>Librarian-Puppet</h2>

<p><a href="http://librarian-puppet.com/">Librarian-Puppet</a> 是一個管理 puppet modules 的工具，基本上跟 bundler 的概念一樣。編寫 Puppetfile 以後，使用指令 <code>librarian-puppet install</code> 來安裝到 <code>modules</code> 目錄下。這樣就不用處理 <code>puppet module install</code> 和指定版本，以及安裝自己 private modules 的問題了。反正使用 librarian-puppet 他會幫你管好一個 <code>modules</code> 目錄。</p>

<p>Puppetfile 支援幾種指定方式，都非常實用：</p>

<p><code>
modulefile
</code></p>

<p>只要直接下 modulefile 他就會去吃你 modulefile 裡面的 dependencies。這在開發 puppet modules 的時候會用到。</p>

<p><code>
mod "puppetlabs/stdlib"
</code></p>

<p>指定 puppet forge 的 package name。</p>

<p><code>
mod "puppetlabs/apt",
  :git =&gt; "git://github.com/puppetlabs/puppetlabs-apt.git",
  :ref =&gt; '0.0.3'
</code></p>

<p>指定某 repo 的 ref。</p>

<p><code>
mod "puppetlabs/apt",
  :git =&gt; "git://github.com/fake/puppet-modules.git",
  :path =&gt; "modules/apt"
</code></p>

<p>指定 repo 下的 path。</p>

<p><code>
mod "puppetlabs/apt", :path =&gt; "modules/apt"
</code></p>

<p>指定 local path，可以用在 private modules。</p>

<hr />

<h2>Puppet Skeleton</h2>

<p>以上這兩個工具搭配起來，開發 Puppet 就變得很容易了：把需要的 community modules 定義在 Puppetfile 裡面，private modules 放在 local, 一樣用 Puppetfile 掛起來安裝，再透過 Vagrant 指定 manifest path, file, hiera 的設定，直接 <code>$ vagrant up</code> 就可以反覆測試 puppet 了。</p>

<p>我有做了一個 <a href="https://github.com/hSATAC/puppet-skeleton">puppet-skeleton</a> 的專案，這是我自己開發 Puppet 的專案架構跟 workspace。</p>

<h3>Rake Tasks</h3>

<p>這邊是一些我自己開發常用的 rake tasks，基本上就是省 keystroke&hellip;</p>

<p><code>bash
$ rake -T                                  # List all tasks.
$ rake -D                                  # List all tasks with descriptions.
$ rake module:lint                         # Puppet lint.
$ rake module:reinstall                    # Clean and reinstall modules.
$ rake module:sync                         # Sync private modules.
$ rake syntax                              # Syntax check Puppet manifests and templates
$ rake syntax:hiera                        # Syntax check Hiera config files
$ rake syntax:manifests                    # Syntax check Puppet manifests
$ rake syntax:templates                    # Syntax check Puppet templates
$ rake vagrant:provision[name,provisioner] # Provision vagrant VM.
$ rake vagrant:rebuild[name]               # Rebuild vagrant VM.
</code></p>

<h3>目錄架構</h3>

<p>跟上面講的差不多，除了特別把 <code>role</code> 跟 <code>profile</code> 兩個 modules 從 <code>private</code> modules 裡面抽出來到頂層。</p>

<p>關於 <code>role</code> 以及 <code>profile</code> 可以看我之前的文章 <a href="http://blog.hsatac.net/2014/04/roles-and-profiles-pattern-in-puppet/">Roles and Profiles Pattern in Puppet</a>。</p>

<p>也算是提供一個這個 pattern 的範例。</p>

<p><code>``bash
.
├── Gemfile             # Required rubygems, use bundler to install.
├── Puppetfile          # Required puppet modules, use librarian-puppet to install.
├── README.md
├── Rakefile            # Some predefined tasks, to speed up development.
├── Vagrantfile         # Vagrant configuration.
├── hiera.yaml          # Puppet hiera config, only define hierarchy and datadir in this file.
├── docs                # Some documents
├── manifests
│   ├── hieradata         # The actual heirdata stored in this folder.
│   ├── site.pp           # Node definition for production.
│   └── vagrant.pp        # Node definition for local development.
├── private             # Private modules, will be sync into</code>modules<code>folder by</code>librarian-puppet`.
│   ├── common
│   └── users
├── profile             # Profile, abstraction of &ldquo;Technology stack&rdquo;
│   ├── files
│   └── manifests
├── role                # Role, abstraction of &ldquo;What does this server do?&rdquo;
│   └── manifests
├── spec                # Put test files
└── scripts</p>

<pre><code>└── upgrade_puppet.sh # Script of upgrading puppet to version 3 on Ubuntu
</code></pre>

<p>```</p>

<h3>在 EC2 上測試</h3>

<p>只要稍微設定一下 Vagrantfile，就可以利用 <a href="https://github.com/mitchellh/vagrant-aws">Vagrant-AWS</a> 直接 deploy 到 AWS EC2 上面測試。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Roles and Profiles Pattern in Puppet]]></title>
    <link href="http://blog.hsatac.net/2014/04/roles-and-profiles-pattern-in-puppet/"/>
    <updated>2014-04-12T14:04:00+08:00</updated>
    <id>http://blog.hsatac.net/2014/04/roles-and-profiles-pattern-in-puppet</id>
    <content type="html"><![CDATA[<p>一開始寫 Puppet 就是 node definition 直接寫寫寫&hellip;後來就會開始把重複的 resource, file 等等拆成 modules&hellip;。不過當機器越來越多，發現還是有許多重複的地方，例如有好多台 web server, 但是他們有些又有些許的不同&hellip;。</p>

<!-- more -->


<h2>Original Style</h2>

<p>先看看傳統的寫法：</p>

<p>```
node web {</p>

<pre><code>include users
include nginx
include rails
</code></pre>

<p>}</p>

<p>node worker {</p>

<pre><code>include users
include rails
include redis
</code></pre>

<p>}</p>

<p>node db {</p>

<pre><code>include users
include mysql
</code></pre>

<p>}</p>

<p>node web-qa {</p>

<pre><code>include users
include nginx
include rails
include mysql
include redis
</code></pre>

<p>}
```</p>

<p>四個看起來還好，但是當機器越來越多的時候，就會感到難以維護了。</p>

<h2>Roles and Profiles Pattern</h2>

<blockquote><p>All problems in computer science can be solved by another level of indirection.</p></blockquote>

<p>所有電腦科學領域的問題都可以用抽象化來解決(除了抽象太多層以外)，以上的問題我們可以用現在常見的 &ldquo;Roles and Profiles Pattern&rdquo; 來做抽象。</p>

<h2>Role</h2>

<p>Role 很好理解，顧名思義就是「扮演的角色」，以上面的例子我們就有 web, db, worker，web 可能又分成 production 環境和 QA 環境。</p>

<p>這邊舉的例子可能太技術取向了，可以想想平常團隊在溝通時，在稱呼某台機器的時候都是怎麼稱呼的：「那台壓影片的」、「那台 QA 環境」&hellip;就很清楚明瞭了。</p>

<p>用這個思路來整理 node 會變成這樣：</p>

<p>```
node web {</p>

<pre><code>include role::web::production
</code></pre>

<p>}</p>

<p>node worker {</p>

<pre><code>include role::worker
</code></pre>

<p>}</p>

<p>node db {</p>

<pre><code>include role::db
</code></pre>

<p>}</p>

<p>node web-qa {</p>

<pre><code>include role::web::qa
</code></pre>

<p>}
```</p>

<p>Role 本身大概會長這樣：</p>

<p>```
class role {
  include profile::base
}</p>

<p>class role::web inherits role {
  include profile::nginx
}</p>

<p>class role::web::production inherits role::web {
  include profile::nginx::production
}</p>

<p>class role::web::qa inherits role::web {
  include profile::nginx::qa
  include profile::db
  include profile::worker
}</p>

<p>class role::db inherits role {
  include profile::mysql
}</p>

<p>class role::worker inherits role {
  include profile::worker
}
```</p>

<h2>Profile</h2>

<p>Profile 則是用來抽象化「一組服務、設定」的。看上面 Role 的部份應該有點感覺了：</p>

<p>```
class profile::base {</p>

<pre><code>include users
</code></pre>

<p>}</p>

<p>class profile::web {</p>

<pre><code>include nginx
include rails
</code></pre>

<p>}</p>

<p>class profile::web::production inherits profile::web {</p>

<pre><code>::nginx::file { 'production.conf':
  content =&gt; ...,
</code></pre>

<p>  }
}</p>

<p>class profile::web::qa inherits profile::web {</p>

<pre><code>::nginx::file { 'qa.conf':
  content =&gt; ...,
</code></pre>

<p>  }
}</p>

<p>class profile::db inherits {</p>

<pre><code>include profile::mysql
</code></pre>

<p>}</p>

<p>class profile::worker {}</p>

<pre><code>include rails
include redis
</code></pre>

<p>}
```</p>

<p>這樣就可以把重複的程式碼減少，同時又保留彈性。</p>

<h2>Tips</h2>

<ul>
<li>一個 node 只 include <em>一個</em> role。如果這兩個 role 很像，但又有些微不同，那就是一個新 role。</li>
<li>一個 role include 一個或多個 profile，而且 <em>只能 include profile</em> 。</li>
</ul>


<h2>Further Reading</h2>

<p>更多詳細細節、優缺點以及不同的設計方式可以參考以下的幾篇連結：</p>

<ul>
<li><a href="http://www.craigdunn.org/2012/05/239/">Designing Puppet – Roles and Profiles</a></li>
<li><a href="http://www.slideshare.net/PuppetLabs/roles-talk">Designing Puppet: Roles/Profiles Pattern</a></li>
<li><a href="http://garylarizza.com/blog/2014/02/17/puppet-workflow-part-2/">Building a Functional Puppet Workflow Part 2: Roles and Profiles</a></li>
<li><a href="http://sysadvent.blogspot.tw/2012/12/day-13-configuration-management-as-legos.html">Configuration Management as Legos</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
