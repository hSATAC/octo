<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: go | hSATAC]]></title>
  <link href="http://blog.hsatac.net/categories/go/atom.xml" rel="self"/>
  <link href="http://blog.hsatac.net/"/>
  <updated>2014-10-22T11:15:51+08:00</updated>
  <id>http://blog.hsatac.net/</id>
  <author>
    <name><![CDATA[Ash Wu]]></name>
    <email><![CDATA[hsatac@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[同步 git 和 hg 的 repository]]></title>
    <link href="http://blog.hsatac.net/2012/10/sync-git-with-hg/"/>
    <updated>2012-10-17T10:20:00+08:00</updated>
    <id>http://blog.hsatac.net/2012/10/sync-git-with-hg</id>
    <content type="html"><![CDATA[<p>最近在玩 go，編輯器主要是使用 vim 搭配 <a href="https://github.com/nsf/gocode">gocode</a>。我習慣用 <a href="https://github.com/tpope/vim-pathogen">pathogen.vim</a> 來管理我的 vim 套件，不過 go 官方附的 vim syntax plugin 和 gocode 提供的 autocompletion plugin 目錄結構都無法直接當成 git submodule 引入我的 vim 設定中。</p>

<p>由於我個人潔癖作祟，不想再用 copy 的方式來管理我的 vim plugins，所以我決定自己把這兩份 plugin 抽出來獨立成各自的 git repositories，就可以當成 git submodule 引用了。</p>

<!--more-->


<p>gocode 的部分很容易，他原本就是 git，只要參考我之前的文章「<a href="http://blog.hsatac.net/2012/04/moving-files-from-one-git-repository-to-another-keeping-commit-history/">把 Git 中的目錄搬到另一個 Git 並保留 Commit</a>」就可以了。不過 go 的部分就沒這麼簡單了。go 的原始碼 host 在 google code 上，採用 hg，因此要想辦法先把他由 hg 轉換成 git 才行。</p>

<p>一開始使用的是 <a href="http://hg-git.github.com/">hg-git</a> 這套，不過在 gexport 這個過程非常緩慢，不知道是這個套件本身有問題還是 go 的 hg repository 太大了。試了兩天之後只好放棄，改用 <a href="http://offbytwo.com/git-hg/">git-hg</a> 這套。這套一樣也是使用 python 寫的，不過效率上就挺不錯的。使用上也很方便，直接 <code>git-hg clone https://code.google.com/p/go/</code> 出來就是 git 的目錄了。</p>

<p>值得一提的是，使用 homebrew 安裝 git-hg 時，由於 git-hg 有 require <a href="http://repo.or.cz/w/fast-export.git">fast-export</a> 這個 submodule，但 homebrew 安裝下來的 fast-export 居然不是最新的，導致無法使用。後來自己到 <code>/usr/local/Cellar/git-hg/HEAD</code> 把 fast-export 這個目錄移除，再 clone 一份新的 fast-export 就可以正常使用了。</p>

<p>我不想弄亂這個目錄，所以我是在 local 端再 clone 一次這個使用 git-hg clone 下來的 repository，再來作 <code>git filter-branch</code> 的動作。另外這個 repository 也順便丟到 github 上當作一個 go 的 git mirror 給有需要的人使用。</p>

<p>產出三個 repositories:</p>

<ul>
<li><p><a href="https://github.com/golangtw/go.vim">https://github.com/golangtw/go.vim</a> go 的 syntax plugin</p></li>
<li><p><a href="https://github.com/golangtw/gocode.vim">https://github.com/golangtw/gocode.vim</a> gocode 的 autocomplete plugin</p></li>
<li><p><a href="https://github.com/golangtw/go">https://github.com/golangtw/go</a> go 的 git mirror</p></li>
</ul>


<p>最後再寫一個 script 每天跑一次 cronjob 自動去 sync 就完成啦！</p>

<p><div><script src='https://gist.github.com/3903435.js'></script>
<noscript><pre><code>#!/bin/sh

# do gocode first
cd /Users/cat/golang.tw/gocode
git pull
git filter-branch -f --subdirectory-filter vim -- --all
git push pathogen master
git fetch
git reset --hard origin/master

# do git-hg sync go
cd /Users/cat/golang.tw/go.git
git-hg pull
git push origin master

# do go.vim

cd /Users/cat/golang.tw/go.vim
git pull
git filter-branch -f --subdirectory-filter misc/vim -- --all
git push github master
git fetch
git reset --hard origin/master
</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Duplicate Production Requests for Testing]]></title>
    <link href="http://blog.hsatac.net/2014/10/duplicate-production-requests-for-testing/"/>
    <updated>2014-10-21T00:09:00+08:00</updated>
    <id>http://blog.hsatac.net/2014/10/duplicate-production-requests-for-testing</id>
    <content type="html"><![CDATA[<p>當我們上新的架構或者調整資料庫參數等等的時候，總希望能夠用 production 環境來測試才比較準確，不過這麼重大的改變不能隨便拿正式環境和使用者當白老鼠；就算使用 production 資料庫的 dump, 也無法重複真正使用者的行為。</p>

<p>一般常用的方式是偷偷把 production 環境的流量複製一份，導到測試機器/環境去，觀察看看行為是否符合預期。</p>

<p>相較於以往看到較為複雜的 solution, 這邊介紹一個用 Go 開發的工具 &ndash; <a href="https://github.com/buger/gor">gor</a></p>

<!--more-->


<h2>簡介</h2>

<p>gor 已經發展了一年多了，進展的非常快。現在是一個簡單又非常好用的工具。可以監聽你指定的 port, 把流量轉到其他機器、或者 dump 成檔案，之後可再從這個檔案 replay、如果有統計分析的需求，也可以直接 redirect 進 elasticsearch 中再進行處理。</p>

<h2>Usage</h2>

<p>這邊列幾個基本常用的用途：</p>

<ul>
<li>把 request dump 到檔案</li>
</ul>


<p><code>sudo ./gor --input-raw :80 --output-file requests.gor</code></p>

<ul>
<li>從檔案 replay 流量 (限定 GET)</li>
</ul>


<p><code>sudo ./gor --input-file requests.gor --output-http http://10.2.7.202 --output-http-method GET</code></p>

<ul>
<li>直接複製流量丟到測試機</li>
</ul>


<p><code>sudo ./gor --input-raw :80 --output-http http://10.2.7.202 --output-http-method GET</code></p>

<p>注意：這個動作會比較吃 CPU, 官方文件是建議開兩個 process 一個錄流量，一個丟到 output.</p>

<p>除此之外還有很多功能，例如各種 regex, filter, 插入 header, http basic auth, 丟到多個機器&hellip;等等。</p>
]]></content>
  </entry>
  
</feed>
