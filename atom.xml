<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[hSATAC]]></title>
  <link href="http://blog.hsatac.net/atom.xml" rel="self"/>
  <link href="http://blog.hsatac.net/"/>
  <updated>2013-08-09T17:51:40+08:00</updated>
  <id>http://blog.hsatac.net/</id>
  <author>
    <name><![CDATA[Ash Wu]]></name>
    <email><![CDATA[hsatac@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Art of Readable Code 讀書筆記]]></title>
    <link href="http://blog.hsatac.net/2013/08/the-art-of-readable-code/"/>
    <updated>2013-08-07T22:07:00+08:00</updated>
    <id>http://blog.hsatac.net/2013/08/the-art-of-readable-code</id>
    <content type="html"><![CDATA[<p>這次公司的讀書分享會我被指定報告這本 <a href="http://shop.oreilly.com/product/9780596802301.do">The Art of Readable Code</a>。</p>

<p><a href="http://blog.hsatac.net/images/art_of_readable_code/cover.jpg"><img src="http://blog.hsatac.net/images/art_of_readable_code/cover.jpg" alt="The Art of Readable Code Cover" /></a></p>

<p>這本書我以前就看過英文本，這次借這個機會重新複習整理了一下，又有新的收穫。把一些我覺得比較重要的點筆記下來，太基礎或可能用不太到的這邊就省略了。很推薦各位翻一下這本，是一本很值得一讀的小書。</p>

<!--more-->


<h2>摘要</h2>

<p>可讀性就是易於理解(最短時間理解)。</p>

<p>把寫程式從「會動就好」(寫給機器讀)，提升到「表明自己的意圖」(寫給人讀)的層次。</p>

<p>試著思考，閱讀這段程式的人會用怎樣的脈絡來理解你的程式碼。</p>

<h2>Part 1. 表層改善</h2>

<h3>富含資訊的名稱</h3>

<ul>
<li>選擇詞彙</li>
</ul>


<p><code>FetchPage</code> 比 <code>GetPage</code> 要好，表達出從網路拉資料的行為。</p>

<p>可以使用比 <code>Stop</code> 更清楚的名稱，例如不能復原的用 <code>Kill</code>，能復原的用 <code>Pause</code>, <code>Resume</code>。</p>

<ul>
<li><p>避免使用 tmp, ret, i, j, k (除非真的是要交換變數)</p></li>
<li><p>優先使用具體名稱而非抽象名稱</p></li>
</ul>


<p><code>ServerCanStart</code> 抽象</p>

<p><code>ServerCanListenOnPort</code> 具體</p>

<ul>
<li>在名稱中加入額外資訊</li>
</ul>


<p><code>start</code> => <code>start_ms</code></p>

<p><code>size</code> => <code>size_mb</code></p>

<ul>
<li>加入其他重要屬性</li>
</ul>


<p><code>password</code> => <code>plaintext_password</code></p>

<p><code>comment</code> => <code>unescaped_comment</code></p>

<p>較小範圍適合較短變數名稱</p>

<h3>不被誤解的名稱</h3>

<p><code>Filter()</code> 是包含還是排除？ <code>Select()</code>, <code>Exclude()</code> 更清楚</p>

<p><code>start, stop</code> 有沒有包含？ <code>first, last</code> 清楚表明有包含</p>

<ul>
<li>符合使用者的預期</li>
</ul>


<p><code>get*()</code> 開頭預期是輕量 getter，不要做耗時運算。</p>

<p><code>size()</code> 預期輕量，要計算可改為 <code>computeSize()</code></p>

<h3>美學</h3>

<ul>
<li><p>排版</p></li>
<li><p>有意義的順序</p></li>
</ul>


<p><code>first_name, last_name, email</code></p>

<p><code>first_name, email,...last_name</code></p>

<ul>
<li><p>風格一致性</p></li>
<li><p>區分程式碼段落</p></li>
</ul>


<h3>註解</h3>

<ul>
<li><p>註解自己的想法</p></li>
<li><p>註解程式碼缺陷</p></li>
<li><p>註解常數 (常數的設定通常都有其原因和意義)</p></li>
</ul>


<p><code>NUM_THREADS</code> 可能是根據 CPU 核心數推算出來。</p>

<ul>
<li>為讀者設想(可能需要額外思考)</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">NSSet</span> <span class="o">*</span><span class="n">selectedAdvisorIDs</span>  <span class="o">=</span> <span class="n">_filterVC</span><span class="p">.</span><span class="n">selectedAdvisors</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">MBAdvisor</span> <span class="o">*</span><span class="n">advisor</span> <span class="k">in</span> <span class="p">[</span><span class="n">self</span> <span class="n">currentGroup</span><span class="p">].</span><span class="n">advisors</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">selectedAdvisorIDs</span> <span class="nl">containsObject:</span><span class="n">advisor</span><span class="p">.</span><span class="n">ID</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">_filteredAdvisors</span> <span class="nl">addObject:</span><span class="n">advisor</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 為什麼不直接從 selectedAdvisorIDs 迴圈作處理？</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">NSNumber</span> <span class="o">*</span><span class="n">advisorID</span> <span class="k">in</span> <span class="n">selectedAdvisorIDs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">_filteredAdvisors</span> <span class="nl">addObject:</span><span class="p">[</span><span class="n">self</span> <span class="nl">findAdvisorByID:</span><span class="n">advisorID</span><span class="p">]];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 為了維持原本 Advisor 的順序</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>註明可能的陷阱</li>
</ul>


<h3>讓註解精確與簡潔</h3>

<ul>
<li>精確描述函數行為</li>
</ul>


<p><code>傳回檔案行數</code> 可能有很多狀況，改為 <code>計算檔案中 \n 個數</code> 更為精確。</p>

<ul>
<li><p>使用代表性的輸入輸出範例 (rdoc)</p></li>
<li><p>函數參數名稱註解 (named parameters)</p></li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">Connect</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//=&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">Connect</span><span class="p">(</span><span class="n">timeout_ms</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="n">use_encryption</span> <span class="o">=</span> <span class="nb">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//=&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">Connect</span><span class="p">(</span><span class="cm">/* timeout_ms = */</span> <span class="mi">10</span><span class="p">,</span> <span class="cm">/* use_encryption = */</span> <span class="nb">false</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>使用訊息密集的詞彙</li>
</ul>


<p><code>cache</code>, <code>singleton</code></p>

<h2>Part 2. 簡化迴圈與邏輯</h2>

<h3>提高控制流程與可讀性</h3>

<ul>
<li>if/else 區塊順序

<ol>
<li> 先肯定而非否定的情況</li>
<li> 先簡單的情況</li>
<li> 先<em>有趣</em>或明顯的情況</li>
</ol>
</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">url</span><span class="p">.</span><span class="n">HasQueryParameter</span><span class="p">(</span><span class="s">&quot;expand_all&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>     <span class="n">response</span><span class="p">.</span><span class="n">Render</span><span class="p">(</span><span class="n">items</span><span class="p">);</span>
</span><span class='line'>     <span class="p">...</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">items</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>         <span class="n">items</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">Expand</span><span class="p">();</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>     <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 看到 expand_all 會一直想著 expand_all =&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">url</span><span class="p">.</span><span class="n">HasQueryParameter</span><span class="p">(</span><span class="s">&quot;expand_all&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">items</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>         <span class="n">items</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">Expand</span><span class="p">();</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>     <span class="p">...</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>     <span class="n">response</span><span class="p">.</span><span class="n">Render</span><span class="p">(</span><span class="n">items</span><span class="p">);</span>
</span><span class='line'>     <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>盡早返回 (return)</p></li>
<li><p>消除迴圈中的巢狀結構 (continue)</p></li>
</ul>


<h3>分解巨大表示式</h3>

<ul>
<li>解釋性變數</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">if</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;:&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span> <span class="o">==</span> <span class="s">&quot;root&quot;</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'><span class="c">#=&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">username</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;:&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'><span class="k">if</span> <span class="n">username</span> <span class="o">==</span> <span class="s">&quot;root&quot;</span><span class="p">:</span>
</span></code></pre></td></tr></table></div></figure>


<h3>變數與可讀性</h3>

<ul>
<li>消除變數</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">now</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>
</span><span class='line'><span class="n">root_message</span><span class="o">.</span><span class="n">last_view_time</span> <span class="o">=</span> <span class="n">now</span>
</span><span class='line'>
</span><span class='line'><span class="c"># =&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">root_message</span><span class="o">.</span><span class="n">last_view_time</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>縮減變數範圍</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">UIButton</span> <span class="o">*</span><span class="n">sideMenuButton</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIButton</span> <span class="nl">buttonWithType:</span><span class="n">UIButtonTypeCustom</span><span class="p">];</span>
</span><span class='line'><span class="n">sideMenuButton</span><span class="p">.</span><span class="n">bounds</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>
</span><span class='line'><span class="p">[</span><span class="n">sideMenuButton</span> <span class="nl">setImage:</span><span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;sidemenu_icon.png&quot;</span><span class="p">]</span> <span class="nl">forState:</span><span class="n">UIControlStateNormal</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">sideMenuButton</span> <span class="nl">addTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="n">toggleRightPanelAction</span><span class="p">)</span> <span class="nl">forControlEvents:</span><span class="n">UIControlEventTouchUpInside</span><span class="p">];</span>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">navigationItem</span><span class="p">.</span><span class="n">rightBarButtonItem</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIBarButtonItem</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithCustomView:</span><span class="n">sideMenuButton</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// =&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// scoped temp variables. last line will be returned.</span>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">navigationItem</span><span class="p">.</span><span class="n">rightBarButtonItem</span> <span class="o">=</span> <span class="p">({</span>
</span><span class='line'>  <span class="n">UIButton</span> <span class="o">*</span><span class="n">sideMenuButton</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIButton</span> <span class="nl">buttonWithType:</span><span class="n">UIButtonTypeCustom</span><span class="p">];</span>
</span><span class='line'>  <span class="n">sideMenuButton</span><span class="p">.</span><span class="n">bounds</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>
</span><span class='line'>  <span class="p">[</span><span class="n">sideMenuButton</span> <span class="nl">setImage:</span><span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;sidemenu_icon.png&quot;</span><span class="p">]</span> <span class="nl">forState:</span><span class="n">UIControlStateNormal</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">sideMenuButton</span> <span class="nl">addTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="n">toggleRightPanelAction</span><span class="p">)</span> <span class="nl">forControlEvents:</span><span class="n">UIControlEventTouchUpInside</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[[</span><span class="n">UIBarButtonItem</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithCustomView:</span><span class="n">sideMenuButton</span><span class="p">];</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>減少變數改變</li>
</ul>


<h2>Part 3. 重新組織程式碼</h2>

<h3>抽離不相關子問題</h3>

<ul>
<li>避免過猶不及</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">user_info</span> <span class="o">=</span> <span class="p">{</span> <span class="s">&quot;username&quot;</span><span class="p">:</span> <span class="s">&quot;...&quot;</span><span class="p">,</span> <span class="s">&quot;password&quot;</span><span class="p">:</span> <span class="s">&quot;...&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="n">user_str</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">user_info</span><span class="p">)</span>
</span><span class='line'><span class="n">cipher</span> <span class="o">=</span> <span class="n">Cipher</span><span class="p">(</span><span class="s">&quot;aes_128_cbc&quot;</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">PRIVATE_KEY</span><span class="p">,</span> <span class="n">init_vector</span><span class="o">=</span><span class="n">INIT_VECTOR</span><span class="p">,</span> <span class="n">op</span><span class="o">=</span><span class="n">ENCODE</span><span class="p">)</span>
</span><span class='line'><span class="n">encrypted_bytes</span> <span class="o">=</span> <span class="n">cipher</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">user_str</span><span class="p">)</span>
</span><span class='line'><span class="n">encrypted_bytes</span> <span class="o">+=</span> <span class="n">cipher</span><span class="o">.</span><span class="n">final</span><span class="p">()</span> <span class="c"># flush out the current 128 bit block</span>
</span><span class='line'><span class="n">url</span> <span class="o">=</span> <span class="s">&quot;http://example.com/?user_info=&quot;</span> <span class="o">+</span> <span class="n">base64</span><span class="o">.</span><span class="n">urlsafe_b64encode</span><span class="p">(</span><span class="n">encrypted_bytes</span><span class="p">)</span>
</span><span class='line'><span class="err">…</span>
</span><span class='line'>
</span><span class='line'><span class="c">#=&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">url_safe_encrypt</span><span class="p">(</span><span class="n">obj</span><span class="p">):</span>
</span><span class='line'>  <span class="n">obj_str</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
</span><span class='line'>  <span class="n">cipher</span> <span class="o">=</span> <span class="n">Cipher</span><span class="p">(</span><span class="s">&quot;aes_128_cbc&quot;</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">PRIVATE_KEY</span><span class="p">,</span> <span class="n">init_vector</span><span class="o">=</span><span class="n">INIT_VECTOR</span><span class="p">,</span> <span class="n">op</span><span class="o">=</span><span class="n">ENCODE</span><span class="p">)</span>
</span><span class='line'>  <span class="n">encrypted_bytes</span> <span class="o">=</span> <span class="n">cipher</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">obj_str</span><span class="p">)</span>
</span><span class='line'>  <span class="n">encrypted_bytes</span> <span class="o">+=</span> <span class="n">cipher</span><span class="o">.</span><span class="n">final</span><span class="p">()</span> <span class="c"># flush out the current 128 bit block</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">base64</span><span class="o">.</span><span class="n">urlsafe_b64encode</span><span class="p">(</span><span class="n">encrypted_bytes</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">user_info</span> <span class="o">=</span> <span class="p">{</span> <span class="s">&quot;username&quot;</span><span class="p">:</span> <span class="s">&quot;...&quot;</span><span class="p">,</span> <span class="s">&quot;password&quot;</span><span class="p">:</span> <span class="s">&quot;...&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="n">url</span> <span class="o">=</span> <span class="s">&quot;http://example.com/?user_info=&quot;</span> <span class="o">+</span> <span class="n">url_safe_encrypt</span><span class="p">(</span><span class="n">user_info</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#=&gt; this went too far…</span>
</span><span class='line'>
</span><span class='line'><span class="n">user_info</span> <span class="o">=</span> <span class="p">{</span> <span class="s">&quot;username&quot;</span><span class="p">:</span> <span class="s">&quot;...&quot;</span><span class="p">,</span> <span class="s">&quot;password&quot;</span><span class="p">:</span> <span class="s">&quot;...&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="n">url</span> <span class="o">=</span> <span class="s">&quot;http://example.com/?user_info=&quot;</span> <span class="o">+</span> <span class="n">url_safe_encrypt_obj</span><span class="p">(</span><span class="n">user_info</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">url_safe_encrypt_obj</span><span class="p">(</span><span class="n">obj</span><span class="p">):</span>
</span><span class='line'>  <span class="n">obj_str</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">url_safe_encrypt_str</span><span class="p">(</span><span class="n">obj_str</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">url_safe_encrypt_str</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
</span><span class='line'>  <span class="n">encrypted_bytes</span> <span class="o">=</span> <span class="n">encrypt</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">base64</span><span class="o">.</span><span class="n">urlsafe_b64encode</span><span class="p">(</span><span class="n">encrypted_bytes</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">encrypt</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
</span><span class='line'>  <span class="n">cipher</span> <span class="o">=</span> <span class="n">make_cipher</span><span class="p">()</span>
</span><span class='line'>  <span class="n">encrypted_bytes</span> <span class="o">=</span> <span class="n">cipher</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>  <span class="n">encrypted_bytes</span> <span class="o">+=</span> <span class="n">cipher</span><span class="o">.</span><span class="n">final</span><span class="p">()</span> <span class="c"># flush out any remaining bytes</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">encrypted_bytes</span>
</span><span class='line'><span class="k">def</span> <span class="nf">make_cipher</span><span class="p">():</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">Cipher</span><span class="p">(</span><span class="s">&quot;aes_128_cbc&quot;</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">PRIVATE_KEY</span><span class="p">,</span> <span class="n">init_vector</span><span class="o">=</span><span class="n">INIT_VECTOR</span><span class="p">,</span> <span class="n">op</span><span class="o">=</span><span class="n">ENCODE</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>撰寫較少程式碼</h3>

<ul>
<li><p>可讀性最高的程式碼就是完全沒有程式碼</p></li>
<li><p>不開發那些功能 &ndash; 不會需要</p></li>
<li><p>詢問與分解需求</p></li>
<li><p>熟悉你的函式庫</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 Commandline 發 github pull request]]></title>
    <link href="http://blog.hsatac.net/2013/07/github-pull-request-from-commandline/"/>
    <updated>2013-07-16T12:40:00+08:00</updated>
    <id>http://blog.hsatac.net/2013/07/github-pull-request-from-commandline</id>
    <content type="html"><![CDATA[<p>現在團隊使用 github 來作 code hosting, 利用 pull request 機制來做 code review。比以往自己架 gitosis 和 redmine 的方式更方便好用。</p>

<p>不過 programmer 天性懶惰，日子一久對於要開 github 網頁用滑鼠選 branch 發 pull request 的操作感到厭倦，能自動化的東西就懶得自己按按鈕啦！</p>

<p>使用 <a href="https://github.com/github/hub">hub</a> 就可以用 commandline 進行各種 github 的操作。</p>

<!--more-->


<p>用 <code>homebrew</code> 或 <code>gem</code> 都可以進行安裝。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install hub
</span><span class='line'>gem install hub</span></code></pre></td></tr></table></div></figure>


<p>我們 team 開發流程是 feature branch 開發完畢後 push 到專案 remote 發 pull request，所以我在 <code>.bash_profile</code> 加了下面這個 function：</p>

<div><script src='https://gist.github.com/5591270.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<blockquote><p>從 team 的 (現在目錄所在 branch) 發 pull request 到 team 的 (develop) branch</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xray-rails 與 tmux, vim 整合]]></title>
    <link href="http://blog.hsatac.net/2013/07/xray-rails-tmux-vim-integration/"/>
    <updated>2013-07-09T22:00:00+08:00</updated>
    <id>http://blog.hsatac.net/2013/07/xray-rails-tmux-vim-integration</id>
    <content type="html"><![CDATA[<p>剛好又開新專案了，來介紹一下 <a href="https://github.com/brentd/xray-rails">Xray-rails</a> 與 tmux, vim 的整合。</p>

<p><a href="https://github.com/brentd/xray-rails">Xray-rails</a> 是一層 rack middleware，會 inject 你的 view 和 javascript 檔案，只要在開發模式按快速鍵 <code>⌘ + ⇧ + x</code> 就會開啟一層 overlay，讓你很清楚的看出現在的畫面由哪些 view, partial, controller 生成，更方便的是只要一點畫面，即可在編輯器中開啟該檔案，大大降低 trace 程式碼的時間。</p>

<p><a href="https://dl.dropboxusercontent.com/u/156655/xray-screenshot.png"><img src="https://dl.dropboxusercontent.com/u/156655/xray-screenshot.png" alt="image" /></a></p>

<!--more-->


<p><a href="https://github.com/brentd/xray-rails">Xray-rails</a> 預設的編輯器是 <a href="http://www.sublimetext.com/2">Sublime Text 2</a> (<code>/usr/local/bin/subl</code>)。可以透過 overlay 右下角的設定圖示、或者自己新增 <code>~/.xrayconfig</code> 檔案來設定你使用的編輯器。</p>

<p>我平常使用 <a href="https://github.com/aziz/tmuxinator">Tmuxinator</a> 來管理我的專案和 tmux, 每個專案有自己的 tmux session，讓我可以快速在不同專案的開發環境之間切換。</p>

<p>我的 <code>~/.xrayconfig</code> 也改成透過 tmux 傳送指令給我的 vim，範例設定檔如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:editor: "/usr/local/bin/tmux send -t openapply:editor $'\e' :tabe $file ENTER"</span></code></pre></td></tr></table></div></figure>


<p><code>openapply</code> 是我的專案 tmux session 名稱，而 <code>editor</code> 是該 session 的 window 名稱，專門用來開啟 vim 編輯檔案。</p>

<p>但問題來了，我每一個專案都有自己獨立的 tmux session，這樣每次切換專案的時候我都要修改 <code>~/.xrayconfig</code> 實在很不方便，所以希望能在每一個專案底下放自己的 <code>.xrayconfig</code>。</p>

<p>這個功能已經<a href="https://github.com/brentd/xray-rails/issues/21">提案給原作者同意</a>，也送了 <a href="https://github.com/brentd/xray-rails/pull/23">pull request</a>，不過還沒被 merge 回主幹，如果現在有需要這個功能的朋友可以暫時先使用我修改的 fork。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  gem 'xray-rails', :git =&gt; 'https://github.com/hSATAC/xray-rails.git',
</span><span class='line'>                    :branch =&gt; 'feature/project_specific_config'</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpec-Given 與 RSpec-Spies]]></title>
    <link href="http://blog.hsatac.net/2013/06/rspec-given-rspec-spies/"/>
    <updated>2013-06-30T17:53:00+08:00</updated>
    <id>http://blog.hsatac.net/2013/06/rspec-given-rspec-spies</id>
    <content type="html"><![CDATA[<h2>RSpec/Given</h2>

<p><a href="https://github.com/jimweirich/rspec-given">rspec-given</a> 其實是這次去新加坡 <a href="http://www.reddotrubyconf.com/">RedDotRubyConf</a> 聽 rake 的作者 <a href="https://twitter.com/jimweirich">jimweirich</a> 介紹的。</p>

<p>乍看之下只是一個 syntax sugar，但實際用起來非常有幫助，可以有效的協助你寫出乾淨漂亮的測試。</p>

<p><a href="https://github.com/jimweirich/rspec-given">rspec-given</a> 提供了 <code>Given</code>, <code>Then</code>, <code>When</code> 三個關鍵字以及其他一些額外的功能。 <code>Given</code> 類似原本的 <code>let</code>，而 <code>it</code> 則拆成 <code>Then</code> 和 <code>When</code>。</p>

<p>原本用 <code>it</code> 來寫測試，一個 <code>it</code> 裡面容易越寫愈多，越寫越肥，而且執行的程式碼和 assertion 混在一起，不容易閱讀。</p>

<p>用 <code>Given</code> 定義需要的東西、 <code>When</code> 寫實際執行的程式碼、 <code>Then</code> 放 assertion，這樣可以很方便、清楚的組織你的測試程式碼。</p>

<!--more-->


<p>此外還有 <code>And</code> 可以搭配 <code>Then</code> 使用，以及一個比較特別的 <code>Invariant</code>：當每次 <code>Then</code> 被執行到的時候都會跑這個 assertion。</p>

<h2>RSpec-Spies</h2>

<p>我們現在把測試分很明顯的三個區塊 <code>Given</code>, <code>Then</code>, <code>When</code> 以後，就會碰到一個問題叫 <code>should_receive</code>。</p>

<p>以往 <code>should_receive</code> 這件事是跟在 mock method 一起做的，這語句本身就同時有 <code>Then</code> 和 <code>When</code> 的涵義在。而且整段測試會變成前面有 assertion, 中間一段執行程式碼，後面又是 assertion ，使的整個閱讀性大大降低。</p>

<p>並且，我們一般人思考的順序是「我做了什麼事」 → 「得到什麼結果」。而 <code>should_receive</code> 是要寫在真正執行的程式碼前面的，跟我們思考的順序恰好相反，容易混淆。所以我們需要有一個語法能把 mock 跟 assertion(should_receive) 這兩件事分開。</p>

<p>這時候就可以使用 <a href="https://github.com/technicalpickles/rspec-spies">rspec-spies</a>。</p>

<p>這樣我們就可以把 <code>have_receieved</code> 當成一般的 matcher 搬到 <code>Then</code> 區塊，整段測試就很清楚明瞭。</p>

<p>更好的是這個語法在 RSpec 2.14 就會內建支援，所以現在先使用這個 gem ，等 RSpec 2.14 正式 release 以後再拿掉即可無縫銜接。</p>

<h2>延伸閱讀</h2>

<ul>
<li><a href="https://github.com/jimweirich/rspec-given/wiki/Tutorial">RSpec/Given Tutorial</a></li>
<li><a href="http://xunitpatterns.com/Test%20Spy.html">Test Spy Pattern</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TDD Rails]]></title>
    <link href="http://blog.hsatac.net/2013/05/tdd-rails/"/>
    <updated>2013-05-19T19:23:00+08:00</updated>
    <id>http://blog.hsatac.net/2013/05/tdd-rails</id>
    <content type="html"><![CDATA[<p>這兩個月到新公司學到了不少東西，對於「寫測試」這件事也有了新的想法。先感謝最近一直和我 pair 的 @ilake，許多觀念和工具都是他帶給我的。</p>

<p>還記得幾年前剛聽到「測試」、「TDD」這些名詞的時候，那時我去 Ruby Tuesday 碰到人就會問一下：「你有在寫測試嗎？」@ihower 跟 @xdite 應該都被我問過這個問題。那時雖然知道寫測試的好處，也大概試過 TDD 的手法，不過總感覺搔不到癢處；再加上那時待的公司也都沒有這個環境，就放置 Play 了。</p>

<p>一直到跟 @ilake pair 過後才知道，問題不在「要不要寫測試」、而是「測試該怎麼寫」。</p>

<!-- more -->


<h3>Why TDD? Why Not?</h3>

<p>我們一般對寫測試和 TDD 會有以下的迷思：</p>

<ul>
<li>TDD 違反人類思考的習慣</li>
<li>寫測試會比較耗時間</li>
<li>沒牽涉到金流等重大功能不需要寫測試</li>
</ul>


<p>先講第一點，<strong>TDD 違反人類思考的習慣？</strong>：其實我們平常寫程式的行為，本來就是寫一點點、然後切過去執行看看、再寫一點點、再切過去執行看看&hellip;&hellip;重複這個循環。</p>

<p>這跟 TDD 的開發模式基本上是一樣的，差別只在於先把想要的結果寫好而已。而且這樣的方式可以強迫你用比較好測試的方式去組織你的程式碼，也就是說你的 code 天生架構就會比較好。</p>

<p><strong>寫測試會比較耗時間嗎？</strong>這邊應該分成整體開發時間和單元開發時間來看。先說整體開發時間，有寫測試可以讓整個 team 都放心改 code ，減低踩雷的機會。與其寫一寫發現之前寫的東西爆炸了再回頭修改，寫測試反而能降低整體開發的時間。</p>

<p>那單元測試時間呢？TDD 寫的 code 比較多，理論上應該會增加單元開發時間，不過只要使用對的工具和 work flow，其實單元開發時間不會增加多少，甚至還有可能更快。開發 Rails 可能寫一寫就要切到瀏覽器看一下行為，但是使用 TDD 我們可以一鍵直接測到我們想測的部份，不用花時間在切換、等待上面。等到整個 feature 開發完成再去瀏覽器做最後確認就好，反而增加了開發效率。</p>

<p><strong>沒牽涉到金流等重大功能不需要寫測試？</strong>：當你享受過 TDD 帶來的好處時其實就不會再有這樣的想法了，不過寫測試的確還有其他的優點。我到 Faria 第一天就能直接上工解 issue 就是因為有測試當我的後盾。測試本身也就是 spec ，能清楚定義你程式的行為。碰到有 bug 的時候就直接寫一個這個 bug 的測試，修到他過了，以後就再也不會碰到那種「咦，這個 bug 不是我以前解過了嗎？怎麼又跑出來了？」的狀況。</p>

<h3>Work Flow</h3>

<p>前面說到只要使用對的工具和 work flow，就能享受到 TDD 的快感。相關的工具和 library 非常多，這邊直接講兩個重點：</p>

<ol>
<li>快速執行測試以及觀看測試結果(一鍵執行)</li>
<li>跑測試本身的速度要快</li>
</ol>


<p>前陣子使用 Sublime Text 2 時，搭配 <a href="https://github.com/maltize/sublime-text-2-ruby-tests">Sublime Text 2 Ruby Tests</a> 這個 plugin，只要按 <code>cmd + shift + r</code> 就可以直接跑當前游標所在測試 <code>cmd + shift + t</code> 跑整個檔案 <code>cmd + shift + e</code> 跑上一次執行的測試。</p>

<p>最近改回 vim 環境則是使用 @ilake 推薦的 <a href="https://github.com/jgdavey/vim-turbux">turbux</a> 和 <a href="https://github.com/jgdavey/tslime.vim">tslime</a> 一樣一鍵執行測試，並送到你選擇的 tmux windows 去執行。詳細的設定可以參考<a href="https://github.com/hSATAC/vimrc">我的 vimrc</a>。</p>

<p>至於跑測試本身的速度要快這點，由於 Rails 環境要 boot 起來其實花的時間真的挺久的，可以使用 <a href="https://github.com/burke/zeus">Zeus</a> 或 <a href="https://github.com/jonleighton/spring">Spring</a> 來加速。</p>

<p>其實以上這兩點都是為了一個目的，就是要「快速拿到你的 feedback」。當你有了這個環境，你寫好測試你就只要一直去 run 他 run 到你的實作通過測試為止。絕對比寫一寫切到瀏覽器看一下來的快速可靠。</p>

<h3>結語</h3>

<p>寫測試的好處真的百百種，說都說不完，而且現在寫測試應該也算是 programmer 的必備技能了。前陣子我發給 <a href="https://github.com/mroth/lolcommits">lolcommits</a> 的 pull request 也被要求補測試才收我的 patch。可預見不遠的將來，甚至是現在，寫測試將會是軟體開發中不可或缺的一個環節。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Diff Puppet Chef]]></title>
    <link href="http://blog.hsatac.net/2013/05/diff-puppet-chef/"/>
    <updated>2013-05-14T22:29:00+08:00</updated>
    <id>http://blog.hsatac.net/2013/05/diff-puppet-chef</id>
    <content type="html"><![CDATA[<p>這次和 <a href="https://twitter.com/v1nc3ntlaw">@v1nc3ntlaw </a> 在 Ruby Tuesday 分享的 diff puppet chef 投影片</p>

<script async class="speakerdeck-embed" data-id="2ea36f409ebd01301b2f469a61e096c5" data-ratio="1.33333333333333" src="http://blog.hsatac.net//speakerdeck.com/assets/embed.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrate AWS AMI across region painlessly]]></title>
    <link href="http://blog.hsatac.net/2013/02/migrate-aws-ami-across-region-painlessly-en/"/>
    <updated>2013-02-27T15:45:00+08:00</updated>
    <id>http://blog.hsatac.net/2013/02/migrate-aws-ami-across-region-painlessly-en</id>
    <content type="html"><![CDATA[<p>Recently I need to migrate my infrastructure from Tokyo to Singapore. According to the information I gathered from AWS 201 course, it&rsquo;s a little troublesome to migrate AWS AMI between regions.</p>

<p>As <a href="http://alestic.com/2010/10/ec2-ami-copy">Copying EBS Boot AMIs Between EC2 Regions</a> demostrated, we need to mount ebs for each regions and rsync them, than we register the ebs as AMI; Also there&rsquo;s <a href="https://cloudyscripts.com/tool/show/5">CloudyScript</a>, it&rsquo;s a online tool that does these steps for you.</p>

<p>After some study, I found that it&rsquo;s not necessary now. Amazon announced <a href="http://aws.typepad.com/aws/2012/12/ebs-snapshot-copy.html">EBS Snapshot Copy</a> last December. Although you can&rsquo;t migrate AMI but we could do so just for some more steps.</p>

<!--more-->


<p>It&rsquo;s really simple:</p>

<p>Find the snapshot or your AMI, click <code>Copy Snapshot</code> to copy snapshot to your destinated region.</p>

<p><a href="http://blog.hsatac.net/images/ami_migrate/migrate_aws_ami_across_region_painlessly_1.png"><img src="http://blog.hsatac.net/images/ami_migrate/migrate_aws_ami_across_region_painlessly_1.png" alt="1" /></a></p>

<p>Check the <code>Kernel ID</code> field of your AMI.</p>

<p><a href="http://blog.hsatac.net/images/ami_migrate/migrate_aws_ami_across_region_painlessly_2.png"><img src="http://blog.hsatac.net/images/ami_migrate/migrate_aws_ami_across_region_painlessly_2.png" alt="2" /></a></p>

<p>Visit <a href="http://thecloudmarket.com/image/aki-ee5df7ef">the cloud market</a> to check AKI&rsquo;s description to see which manifest.xml it belongs. For instance: <code>pv-grub-hd0_1.02-x86_64.gz.manifest.xml</code></p>

<p><a href="http://blog.hsatac.net/images/ami_migrate/migrate_aws_ami_across_region_painlessly_3.png"><img src="http://blog.hsatac.net/images/ami_migrate/migrate_aws_ami_across_region_painlessly_3.png" alt="3" /></a></p>

<p>Search for <code>pv-grub-hd0_1.02-x86_64.gz.manifest.xml</code> and find the AKI for your destinated region.</p>

<p><a href="http://blog.hsatac.net/images/ami_migrate/migrate_aws_ami_across_region_painlessly_4.png"><img src="http://blog.hsatac.net/images/ami_migrate/migrate_aws_ami_across_region_painlessly_4.png" alt="4" /></a></p>

<p>Perform <code>Create Image from Snapshot</code> on your cloned snapshot.</p>

<p><a href="http://blog.hsatac.net/images/ami_migrate/migrate_aws_ami_across_region_painlessly_5.png"><img src="http://blog.hsatac.net/images/ami_migrate/migrate_aws_ami_across_region_painlessly_5.png" alt="5" /></a></p>

<p>Select the AKI you just got.</p>

<p><a href="http://blog.hsatac.net/images/ami_migrate/migrate_aws_ami_across_region_painlessly_6.png"><img src="http://blog.hsatac.net/images/ami_migrate/migrate_aws_ami_across_region_painlessly_6.png" alt="6" /></a></p>

<p>You don&rsquo;t need to rsync anything. It&rsquo;s just that easy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[無痛跨 region 轉移 AWS AMI]]></title>
    <link href="http://blog.hsatac.net/2013/02/migrate-aws-ami-across-region-painlessly/"/>
    <updated>2013-02-27T15:45:00+08:00</updated>
    <id>http://blog.hsatac.net/2013/02/migrate-aws-ami-across-region-painlessly</id>
    <content type="html"><![CDATA[<p>最近要把一些日本的東西轉移到新加坡，根據以前參加 AWS 201 的資料，跨 region 轉移 AMI(Amazon Machine Image) 這件事有點麻煩。</p>

<p>通常找來找去都是用 <a href="http://alestic.com/2010/10/ec2-ami-copy">Copying EBS Boot AMIs Between EC2 Regions</a> 推薦的方法，在兩邊各開一個 ebs mount 起來然後 rsync 再 register 成 AMI…操作起來耗時又複雜；不然就是用 <a href="https://cloudyscripts.com/tool/show/5">CloudyScript</a> 提供的線上工具，不過他其實就只是幫你把上面這些動作自動化而已&hellip;。</p>

<p>弄了一陣子發現，現在根本不需要這些瑣碎的步驟！ Amazone 在去年 12 月就發表了 <a href="http://aws.typepad.com/aws/2012/12/ebs-snapshot-copy.html">EBS Snapshot Copy</a> 可以自由的跨區複製 snapshot! 雖然還不能複製 AMI，不過我們只要手動多幾個步驟就好。</p>

<!--more-->


<p>整個過程很簡單，以下用圖示說明：</p>

<p>先找出你 AMI 的 snapshot, 點選 <code>Copy Snapshot</code> 複製到你要的 region.</p>

<p><a href="http://blog.hsatac.net/images/ami_migrate/migrate_aws_ami_across_region_painlessly_1.png"><img src="http://blog.hsatac.net/images/ami_migrate/migrate_aws_ami_across_region_painlessly_1.png" alt="1" /></a></p>

<p>複製完成後，看一下原本的 AMI 資訊，注意 <code>Kernel ID</code> 這個欄位，把他記下來。</p>

<p><a href="http://blog.hsatac.net/images/ami_migrate/migrate_aws_ami_across_region_painlessly_2.png"><img src="http://blog.hsatac.net/images/ami_migrate/migrate_aws_ami_across_region_painlessly_2.png" alt="2" /></a></p>

<p>接著我們要使用演算法優化的大絕招 &ndash; 查表法。拜訪 <a href="http://thecloudmarket.com/image/aki-ee5df7ef">the cloud market</a> 找出這個 AKI 的 Description 是哪個 manifest.xml ，例如我的就是 <code>pv-grub-hd0_1.02-x86_64.gz.manifest.xml</code></p>

<p><a href="http://blog.hsatac.net/images/ami_migrate/migrate_aws_ami_across_region_painlessly_3.png"><img src="http://blog.hsatac.net/images/ami_migrate/migrate_aws_ami_across_region_painlessly_3.png" alt="3" /></a></p>

<p>接著再搜尋 <code>pv-grub-hd0_1.02-x86_64.gz.manifest.xml</code> 並找出你要的 region，記住這個 AKI。</p>

<p><a href="http://blog.hsatac.net/images/ami_migrate/migrate_aws_ami_across_region_painlessly_4.png"><img src="http://blog.hsatac.net/images/ami_migrate/migrate_aws_ami_across_region_painlessly_4.png" alt="4" /></a></p>

<p>在已複製好的 snapshot 上右鍵點選 <code>Create Image from Snapshot</code></p>

<p><a href="http://blog.hsatac.net/images/ami_migrate/migrate_aws_ami_across_region_painlessly_5.png"><img src="http://blog.hsatac.net/images/ami_migrate/migrate_aws_ami_across_region_painlessly_5.png" alt="5" /></a></p>

<p>Kernel ID 選擇你剛剛查到的 AKI 就可以了！</p>

<p><a href="http://blog.hsatac.net/images/ami_migrate/migrate_aws_ami_across_region_painlessly_6.png"><img src="http://blog.hsatac.net/images/ami_migrate/migrate_aws_ami_across_region_painlessly_6.png" alt="6" /></a></p>

<p>完全不需要什麼 rsync 啦！無痛跨 region 轉移就這麼簡單！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puppet 學習筆記]]></title>
    <link href="http://blog.hsatac.net/2013/02/puppet-study-note/"/>
    <updated>2013-02-22T11:38:00+08:00</updated>
    <id>http://blog.hsatac.net/2013/02/puppet-study-note</id>
    <content type="html"><![CDATA[<p>前陣子玩了 Puppet…把一些重點和資源紀錄在這邊…
初學 Puppet 的話很建議看一遍<a href="http://docs.puppetlabs.com/learning/">官方教學</a>，雖然沒有很完整但整個 run 過基礎的概念會有。</p>

<h2>Infrastructure as Code</h2>

<p>Puppet 的概念是 infrastructure as code，那跟以往寫 shell scripts 有何不同&hellip;？</p>

<p>其實基本上是相通的…但概念層次上高了一層。寫 shell script 主要是加速重複性工作、減少人為疏失，但你也很難去 reuse 這些東西。</p>

<p>Puppet 則是往上拉了一層虛擬層，你只要定義你 infrastructure 的狀態，。可以模組化、重用你程式碼，用清楚易懂的 code 描述套件要怎麼裝，設定檔有哪些，每個 server 之間的關係是怎麼樣&hellip;。</p>

<p>Code 就是文件， code 就是你的 infrastructure。不但好寫好讀好維護，更可直接拿來執行。</p>

<!--more-->


<h2>Resource</h2>

<p>Puppet 中最重要的東西、以及最基本的基礎元件叫做 resource，例如 file, package, service 這三個就是最常用的 resource ，你可以透過 resource 來指定你的檔案狀態、套件安裝狀態、服務狀態等等。</p>

<p>Resource 列表和用法可參考：<a href="http://docs.puppetlabs.com/references/latest/type.html">http://docs.puppetlabs.com/references/latest/type.html</a></p>

<p>resource type 要注意大小寫，當作 metaparameters 的時候寫作 <code>Type[title]</code> Type 要大寫。</p>

<h2>Dependencies</h2>

<p>我們會撰寫 manifest 檔案來描述 resource，需要注意的是這些 resource 都是 sync 執行的，並不是順序執行，因此就會有相依性的問題產生。</p>

<p>Puppet 提供了 before / require 關鍵字</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>file {'/tmp/test1':
</span><span class='line'>      ensure  => present,
</span><span class='line'>      content => "Hi.",
</span><span class='line'>      before  => Notify['/tmp/test1 has already been synced.'],
</span><span class='line'>      # (See what I meant about symbolic titles being a good idea?)
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    notify {'/tmp/test1 has already been synced.':}</span></code></pre></td></tr></table></div></figure>


<p>也可以用 chaining 的寫法，以箭頭表示 &lt;&ndash; 或 &ndash;> 都可以：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>file {'/tmp/test1':
</span><span class='line'>      ensure  => present,
</span><span class='line'>      content => "Hi.",
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    notify {'after':
</span><span class='line'>      message => '/tmp/test1 has already been synced.',
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    File['/tmp/test1'] -> Notify['after']</span></code></pre></td></tr></table></div></figure>


<p>另外有一組「觸發」的關鍵字叫 notify / subscribe ，可以用 &lt;~ 或 ~> 表示，當前面的 Resource 有更新，會通知後面的 resource 執行。</p>

<p>還有一些狀況 Puppet 會自動處理 dependencies 。這叫 Autorequire。</p>

<p>例如你定義了兩個目錄，其中一個目錄在另一個目錄之下，Puppet 很聰明會自動判斷他們的相依性。又例如你定義 user 和這個 user 的 ssh_authorized_key，Puppet 也會自動處理他們的順序。</p>

<h2>Module</h2>

<p>在 Puppet 裡面我們可以寫 class，而 module 就是可重用的 class。放在 modulepath 裡面。</p>

<p>可使用 <code>puppet apply --configprint modulepath</code> 查看 modulepath 設定值。</p>

<p><code>puppet apply --configprint all</code> 可看全部設定。</p>

<p>Module 目錄有固定的格式</p>

<ul>
<li><p><code>/etc/puppet/module/{module_name}/manifests/init.pp</code> 這是 module 的 main file</p></li>
<li><p><code>/etc/puppet/module/{module_name}/manifests/files</code> 使用 <code>puppet://</code> 來 serve file 的時候會抓這下面的檔案。例如 <code>puppet:///module/php/php.conf</code> 就是 <code>`/etc/puppet/module/php/files/php.conf</code>。</p></li>
<li><p><code>/etc/puppet/module/{module_name}/templates/</code> module 若有使用 template 就要放在這。</p></li>
</ul>


<p>寫好 module 後想測試可執行 <code>puppet apply -e "include php"</code> 來測試，想看完整 debug 訊息可加上 <code>-vd</code> 參數 <code>puppet apply -e "include php" -vd</code></p>

<p>除了自己寫的 module 以外也可以使用別人寫好的 module 來加快開發速度。</p>

<p>關於 module 設計的一些基本概念可以參考這篇好文：<a href="http://www.devco.net/archives/2012/12/13/simple-puppet-module-structure-redux.php">Simple Puppet Module Structure Redux</a></p>

<h3>Puppet Forge</h3>

<p>Puppet 提供了一個 module 集中地 <a href="http://forge.puppetlabs.com/">Puppet Forge</a> 可以直接來此搜尋現成的 module。不過根據我的觀察這些 module 大多都是支援 debian/ubuntu 等主流 distro，若使用其他 distro 的可能要考慮自己寫或是 contribute 。</p>

<p>不管怎樣，可以來這裡參考別人寫的 module 收穫會很多。</p>

<p>安裝 Puppet module 可使用以下指令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>puppet module install puppetlabs-apache --version 0.0.2
</span><span class='line'>puppet module list
</span><span class='line'>puppet module search apache
</span><span class='line'>puppet module uninstall puppetlabs-apache
</span><span class='line'>puppet module upgrade puppetlabs-apache --version 0.0.3</span></code></pre></td></tr></table></div></figure>


<p>更詳細的說明可參考：<a href="http://docs.puppetlabs.com/puppet/latest/reference/modules_installing.html">Modules Installing</a></p>

<h2>Defined Resource Types</h2>

<p>我們可以定義自己的 resource type，透過 <code>define</code> 這個關鍵字。跟 class 用法基本上一樣，但是 define 不支援繼承。有點像是 marco 的功能，例如我們可以定義一個 developer 的 resource，把相關的東西都包在一起：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>define developer($user = $title, $uid, $ssh_key) {
</span><span class='line'>        $key_seg = split($ssh_key, ' ')
</span><span class='line'>        $ssh_key_title = $key_seg[2]
</span><span class='line'>        $ssh_key_type  = $key_seg[0]
</span><span class='line'>        $ssh_key_hash  = $key_seg[1]
</span><span class='line'>        user {$user:
</span><span class='line'>                ensure => present,
</span><span class='line'>                managehome => true,
</span><span class='line'>                groups => ['wheel', 'users'],
</span><span class='line'>                uid => $uid,
</span><span class='line'>        } ->
</span><span class='line'>        ssh_authorized_key {"${user}_puppet_key":
</span><span class='line'>                ensure => present,
</span><span class='line'>                key => $ssh_key_hash,
</span><span class='line'>                user => $user,
</span><span class='line'>                type => $ssh_key_type,
</span><span class='line'>                name => "${user}_puppet_key",
</span><span class='line'>        } ->
</span><span class='line'>        file {"/home/${user}":
</span><span class='line'>                mode => 0755,
</span><span class='line'>        } ->
</span><span class='line'>        file {"/home/dev/${user}":
</span><span class='line'>                ensure => link,
</span><span class='line'>                target => '/home/$user',
</span><span class='line'>        }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Functions</h2>

<p>Puppet 提供了一些函數可運用，可透過 <code>puppet doc --reference function</code> 指令查看，或者至 <a href="http://docs.puppetlabs.com/references/latest/function.html%20function%20list">http://docs.puppetlabs.com/references/latest/function.html function list</a></p>

<h2>Stage</h2>

<p>有些狀況想讓不同 module 在不同的 stage 執行，就可以使用 stage 功能。</p>

<p>預設所有 module 都是 default 在 <code>main</code> stage，所以可以定義其他的 stage 在 main 之前或之後即可。</p>

<p>詳細參考 <a href="http://docs.puppetlabs.com/puppet/latest/reference/lang_run_stages.html">Puppet Run Stages</a></p>

<h2>Puppet 目錄架構</h2>

<ul>
<li><p><code>/etc/puppet/puppet.conf</code> 主要設定檔，可參考<a href="http://docs.puppetlabs.com/guides/configuring.html">官方文件</a></p></li>
<li><p><code>/etc/puppet/modules/</code> 放你寫的 modules</p></li>
<li><p><code>/etc/puppet/manifests/site.pp</code> 放你的 node 描述檔，也就是你每台伺服器要怎樣定義寫在這。</p></li>
</ul>


<h2>Puppet 流程</h2>

<p>Puppet 會把我們撰寫的 manifest 檔案 compile 起來並處理其中的 dependencies 後打成一包，再查詢目前系統的狀態後更改系統到我們定義的狀態，如圖示：</p>

<p><img src="http://docs.puppetlabs.com/learning/images/manifest_to_defined_state_unified.png" alt="manifest to defined state" /></p>

<h3>Master-Agent</h3>

<p>Puppet 可以採用 Master-Agent 架構，一台 master 據說能承載 5000 個 agents。也可以單機跑，也就是類似所謂的 Chef solo。</p>

<p>Master-Agent 的流程如下圖：</p>

<p><img src="http://docs.puppetlabs.com/learning/images/manifest_to_defined_state_split.png" alt="master agent" /></p>

<p>基本架構就是 master 上 run <code>puppetmaster</code> 服務， agent 上 run <code>puppetagent</code> 服務。</p>

<p>也可以手動從 agent 觸發，執行 <code>puppet agent --test -vd</code>。</p>

<h3>Masterless Puppet</h3>

<p>想要使用 masterless puppet 非常容易，只要自己指定你的 modulepath 和你的 site.pp 即可。</p>

<p><code>puppet apply --modulepath ./modules manifests/site.pp</code></p>

<h2>其他參考資料</h2>

<ul>
<li><p><a href="http://docs.puppetlabs.com/guides/troubleshooting.html">Trouble Shooting</a> Puppet 使用上有問題可以先來這邊查查看。</p></li>
<li><p><a href="http://www.puppetcookbook.com/">Puppet CookBook</a> 有許多實用案例</p></li>
<li><p><a href="https://github.com/jordansissel/puppet-examples">Puppet Examples</a> 有很多東西直接看 code 是最快的&hellip;。</p></li>
<li><p>關於 Archlinux 使用 Puppet 相關可參考我上兩篇文章：<a href="http://blog.hsatac.net/2013/02/using-puppet-on-archlinux/">ArchLinux 使用 Puppet 注意事項</a>、<a href="http://blog.hsatac.net/2013/02/bootstrap-archlinux-with-puppet/">使用 Puppet 快速佈署 Archlinux</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ArchLinux 使用 Puppet 注意事項]]></title>
    <link href="http://blog.hsatac.net/2013/02/using-puppet-on-archlinux/"/>
    <updated>2013-02-21T14:12:00+08:00</updated>
    <id>http://blog.hsatac.net/2013/02/using-puppet-on-archlinux</id>
    <content type="html"><![CDATA[<p>想在 ArchLinux 使用 Puppet 有一些需要注意的地方，在這邊順便補充一下。</p>

<h2>systemctl 路徑</h2>

<p>Arch 在之前的改版已經把 <code>/bin/systemctl</code> 移到 <code>/usr/bin/systemctl</code> 下，但 Puppet 還是抓 <code>/usr/systemctl</code> 導致找不到 systemd 這個 provider ，這個問題已經在 Puppet 3.1 修改，也可以自己手動 link 一下。</p>

<h2>套件庫需更新到最新版</h2>

<p>Arch 每次都要先 <code>pacman -Syy</code> 一下不然 package 會無法使用。</p>

<p>以上這兩個問題我有寫了一段 module</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># For Archlinux. This issue will be fixed in puppet 3.1
</span><span class='line'>
</span><span class='line'>class archfix {
</span><span class='line'>    file {'/bin/systemctl':
</span><span class='line'>        ensure => link,
</span><span class='line'>        target => '/usr/bin/systemctl',
</span><span class='line'>    }   
</span><span class='line'>    exec {'pacman -Syy':
</span><span class='line'>        path => ["/usr/bin"]
</span><span class='line'>    }   
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>在 manifest 中利用 stage 功能先執行 archfix 這個 module 就可以了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>node 'devm3' {
</span><span class='line'>    stage { 'pre': }
</span><span class='line'>    class {
</span><span class='line'>        "archfix": stage => "pre"; 
</span><span class='line'>    }   
</span><span class='line'>    Stage["pre"] -> Stage["main"]
</span><span class='line'>
</span><span class='line'>  # include other modules...
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Openrc &amp; Systemd</h2>

<p>ArchLinux 現在還有很多套件同時支援 openrc 的 initscript 和 systemd，Puppet 會偵測到兩個 provider 但是他會選擇用 initscript 。可以在 service resource 指定 <code>provider =&gt; systemd</code> 即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Puppet 快速佈署 Archlinux]]></title>
    <link href="http://blog.hsatac.net/2013/02/bootstrap-archlinux-with-puppet/"/>
    <updated>2013-02-19T17:51:00+08:00</updated>
    <id>http://blog.hsatac.net/2013/02/bootstrap-archlinux-with-puppet</id>
    <content type="html"><![CDATA[<p>筆記一下安裝步驟&hellip;。</p>

<h2>Install Archlinux</h2>

<p>由於 Archlinux 本身沒有提供方便的安裝模式、因此我們使用 <a href="https://twitter.com/helmuthdu">@helmuthdu</a> 的快速安裝 script <a href="https://github.com/helmuthdu/aui">AUI</a>，安裝完成後再使用 puppet bootstrap 環境</p>

<ul>
<li>放入 CD 選擇 x64_64 開機</li>
<li>執行 <code>curl hsatac.net/getaui | sh</code></li>
<li>進入 helmuthdu-aui-xxxx 目錄</li>
<li>執行 <code>./aui --ais</code> 進入安裝程式</li>
<li>輸入 1-14 執行全部安裝步驟</li>
</ul>


<p>ps. 如遇特定機種無法使用 grub2 可改用 syslinux bootloader</p>

<h2>Reboot</h2>

<p>安裝完成重開機後後首先設定讓網路能通
可參考<a href="https://wiki.archlinux.org/index.php/Network_Configuration">官方wiki</a></p>

<p>如欲使用 dhcp 可執行 <code>systemctl start dhcpcd</code>
<code>systemctl enable dhcpcd</code> 開機自動執行</p>

<ul>
<li>回到 helmuthdu-aui-xxx 目錄</li>
<li>執行 <code>./aui</code> 繼續安裝</li>
<li>新增使用者步驟必須執行，因後續步驟需用 sudo</li>
<li>AUR helper 選擇 yaourt
(Yaourt 和 packer 大同小異，但因 puppet 使用 yaourt 所以改用。)</li>
<li>後面的 setup 可跳過，或者裝 Basic Setup 即可，這邊都是 桌面環境相關</li>
<li>設定 /etc/resolv.conf</li>
</ul>


<h2>使用 puppet</h2>

<p>puppet 可使用 master-agent 架構或者單機(solo) 安裝，詳見 puppet wiki</p>

<ul>
<li><code>yaourt puppet</code> 安裝 puppet</li>
<li>在 /etc/hosts 設定 puppet master hostname 並在 /etc/puppet/puppet.conf [agent] 區塊設定 <code>server = xxx</code> (hostname 要跟 master hostname 一樣不然憑證不會過)</li>
<li>run <code>puppet agent --test</code> 會出現沒有憑證訊息</li>
<li>回到 puppet master 執行 <code>puppet cert list</code> 會看到待簽署的憑證</li>
<li>執行 <code>puppet cert sign [hostname]</code> 簽署</li>
<li>記得在 master 的 /etc/puppet/manifests/site.pp 設定新的 node 定義</li>
<li>回到 agent 執行 <code>puppet agent --test</code> 進行安裝</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RWBY]]></title>
    <link href="http://blog.hsatac.net/2013/02/rwby/"/>
    <updated>2013-02-15T17:54:00+08:00</updated>
    <id>http://blog.hsatac.net/2013/02/rwby</id>
    <content type="html"><![CDATA[<p>RWBY 第二部預告片 &ldquo;White&rdquo; 終於推出！</p>

<p>之前看完第一部 &ldquo;Red&rdquo; 時還沒有特別被萌到，只覺得創意、畫面和音樂都還不錯。不過這次看完 &ldquo;White&rdquo; 以後整個點都被打到啦！直接去 itunes 收了這兩首 OST…</p>

<p>下一部 &ldquo;Black&rdquo; 預計在 2013.07 發佈，這樣算來本體推出都要 2014 啦！實在是很大一個坑&hellip;</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/Vt9vl8iAN5Q" frameborder="0" allowfullscreen></iframe>


<!--more-->




<blockquote><p>Mirror, tell me something.<br/>Tell me who&#8217;s the loneliest of all.</p><p>Mirror, tell me something.<br/>Tell me who&#8217;s the loneliest of all.</p><p>Mirror, locked inside of me.<br/>Tell me can a heart be turned to stone?</p><p>Mirror mirror what&#8217;s behind you?<br/>Save me from the things I see!<br/>I can keep it from the world,<br/>why wont you let me hide from me?</p><p>Mirror, mirror,<br/>tell me something.<br/>Who&#8217;s the loneliest of all?</p><p>I am the loneliest of all.</p></blockquote>


<p>第一部 &ldquo;Red&rdquo;</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/pYW2GmHB5xs" frameborder="0" allowfullscreen></iframe>




<blockquote><p>Red like roses fills my dreams and brings me to the place you rest<br/>White is cold and always yearning burdened by a royal test<br/>Black the beast descends from shadows<br/>Yellow beauty burns gold</p></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[追蹤 Rubygems require 緩慢紀錄]]></title>
    <link href="http://blog.hsatac.net/2013/01/trace-rubygems-require-slow/"/>
    <updated>2013-01-30T10:18:00+08:00</updated>
    <id>http://blog.hsatac.net/2013/01/trace-rubygems-require-slow</id>
    <content type="html"><![CDATA[<p>昨天灌了一台新的機器，正準備用 <a href="http://puppetlabs.com">puppet</a> bootstrap 時卻發現他的 puppet 執行的非常緩慢。追蹤解決問題的過程十分有趣，在這邊紀錄一下。</p>

<p>由於 puppet 執行檔本身是一隻 ruby script，於是開啟了 irb -d 使用 DEBUG 模式直接執行看看該 script 的內容，看看能否看出問題在哪。</p>

<!--more-->


<p>結果是慢在 <code>require 'puppet'</code> 這裡。想說是不是 gempath 的問題，先用 gem env 看一下設定和環境變數，感覺一切正常。在使用 gem 指令的過程中，發現 <code>gem help commands</code> 這個指令也異常緩慢，而且和 puppet 慢的速度感覺是一樣的。使用 <code>time gem help commands</code> 和 <code>time puppet</code>
測量，果然兩邊都是慢 20 秒，感覺之間可能有某些關聯。</p>

<p>一度懷疑是硬碟壞軌，使用 <code>smartctl</code> 顯示硬碟狀況良好，又開始懷疑是 Ruby 1.9.3-p374 的 bug。但是上網搜尋沒有這樣的狀況，拿另一台舊的機器升級 Ruby 1.9.3-p374 也沒有這樣的狀況。看來是機器本身的問題。</p>

<p><code>ruby -d</code> 和 <code>irb -d</code> 都無法提供有用的資訊，只能看出在某個階段會卡住很久，只能往更低階的方向走。</p>

<p>先使用 <code>ltrace</code> 來觀察：</p>

<pre>
# ltrace -r ruby `which gem` help commands
  0.000000 __libc_start_main(0x400860, 4, 0x7fff767d5ce8, 0x4009a0 <unfinished ...>
  0.000301 setlocale(LC_CTYPE, "")                                                                                                            = "en_US.UTF-8"
  0.000577 ruby_sysinit(0x7fff767d5bec, 0x7fff767d5be0, 1, 1)                                                                                 = 0
  0.000319 ruby_init_stack(0x7fff767d5bf8, 0x7fff767d5b30, 0x7fff767d5b30, -1)                                                                = 0
  0.000759 ruby_init(0x7febf8, 0xffffffff, 0, 0)                                                                                              = 0x876f20
  0.005726 ruby_options(4, 0x7fff767d5ce8, 0x877520, 0x7f3c31b59640)                                                                          = 0xad4800
  0.025221 ruby_run_node(0xad4800, 0x7fff767d6fea, 0x877520, 0xad9560
  20.511227 +++ exited (status 0) +++
</pre>


<p>只能看出卡在 ruby_run_node 這邊，再翻出 <code>strace</code> 試試：</p>

<pre>
# strace -rT ruby `which gem` help commands
     0.000051 open("/usr/lib/libresolv.so.2", O_RDONLY|O_CLOEXEC) = 5 <0.000012>
     0.000049 read(5, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\220:\0\0\0\0\0\0"..., 832) = 832 <0.000008>
     0.000049 fstat(5, {st_mode=S_IFREG|0755, st_size=84840, ...}) = 0 <0.000007>
     0.000049 mmap(NULL, 2189960, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 5, 0) = 0x7fd97dd1e000 <0.000009>
     0.000047 mprotect(0x7fd97dd31000, 2097152, PROT_NONE) = 0 <0.000012>
     0.000048 mmap(0x7fd97df31000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 5, 0x13000) = 0x7fd97df31000 <0.000011>
     0.000054 mmap(0x7fd97df33000, 6792, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fd97df33000 <0.000010>
     0.000053 close(5)                  = 0 <0.000007>
     0.000104 mprotect(0x7fd97df31000, 4096, PROT_READ) = 0 <0.000011>
     0.000059 mprotect(0x7fd97e139000, 4096, PROT_READ) = 0 <0.000009>
     0.000048 munmap(0x7fd98213a000, 24363) = 0 <0.000011>
     0.000100 socket(PF_INET, SOCK_DGRAM|SOCK_NONBLOCK, IPPROTO_IP) = 5 <0.000013>
     0.000051 connect(5, {sa_family=AF_INET, sin_port=htons(53), sin_addr=inet_addr("192.168.79.161")}, 16) = 0 <0.000017>
     0.000073 poll([{fd=5, events=POLLOUT}], 1, 0) = 1 ([{fd=5, revents=POLLOUT}]) <0.000009>
     0.000058 sendmmsg(5, {{{msg_name(0)=NULL, msg_iov(1)=[{"\362\36\1\0\0\1\0\0\0\0\0\0\5devm3\0\0\1\0\1", 23}], msg_controllen=0, msg_flags=MSG_EOR|MSG_TRUNC|MSG_DONTWAIT|MSG_FIN|MSG_SYN|MSG_NOSIGNAL|MSG_MORE|MSG_WAITFORONE|0x13a0000}, 23}, {{msg_name(0)=NULL, msg_iov(1)=[{":O\1\0\0\1\0\0\0\0\0\0\5devm3\0\0\34\0\1", 23}], msg_controllen=0, msg_flags=MSG_PROXY|MSG_EOR|MSG_WAITALL|MSG_TRUNC|MSG_DONTWAIT|MSG_SYN|MSG_RST|MSG_WAITFORONE|0x1120000}, 23}}, 2, MSG_NOSIGNAL) = 2 <0.000020>
     0.000081 poll([{fd=5, events=POLLIN}], 1, 5000) = 0 (Timeout) <5.004974>
     5.005030 poll([{fd=5, events=POLLOUT}], 1, 0) = 1 ([{fd=5, revents=POLLOUT}]) <0.000008>
     0.000051 sendmmsg(5, {{{msg_name(0)=NULL, msg_iov(1)=[{"\362\36\1\0\0\1\0\0\0\0\0\0\5devm3\0\0\1\0\1", 23}], msg_controllen=0, msg_flags=MSG_EOR|MSG_TRUNC|MSG_DONTWAIT|MSG_FIN|MSG_SYN|MSG_NOSIGNAL|MSG_MORE|MSG_WAITFORONE|0x13a0000}, 23}, {{msg_name(0)=NULL, msg_iov(1)=[{":O\1\0\0\1\0\0\0\0\0\0\5devm3\0\0\34\0\1", 23}], msg_controllen=0, msg_flags=MSG_PROXY|MSG_EOR|MSG_WAITALL|MSG_TRUNC|MSG_DONTWAIT|MSG_SYN|MSG_RST|MSG_WAITFORONE|0x1120000}, 23}}, 2, MSG_NOSIGNAL) = 2 <0.000015>
     0.000075 poll([{fd=5, events=POLLIN}], 1, 5000^CProcess 7498 detached
 <detached ...>
</pre>


<p>可以很明顯看出是往 192.168.79.161:53 問 devm3 ，結果 timeout 了四次，一次五秒剛好 20 秒。</p>

<p>兇手已經呼之欲出了，就是我 =皿=</p>

<p>當時幫這台新機器改了 hostname 以後，忘記修改 /etc/hosts ，導致他自己不認得自己的 hostname。當然那個會 timeout 的 DNS 也是有問題，不過那是關於 djbdns 的另一個故事了&hellip;。</p>

<p>最後將 /etc/hosts 改回來就完全正常了。可喜可賀。最難抓的 bug 果然都是最愚蠢的&hellip;。</p>

<p>在這邊要感謝 <a href="http://www.tenlong.com.tw/items/9862765674?item_id=481936">Debug Hacks 除錯駭客－極致除錯的技巧與工具</a> 一書的譯者，事實證明寫 scripting language 也是要會一些基礎 debug 技巧的！推薦各位購買這本書。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyConf.tw 2012]]></title>
    <link href="http://blog.hsatac.net/2012/12/ruby-conf-taiwan-2012-en/"/>
    <updated>2012-12-09T13:04:00+08:00</updated>
    <id>http://blog.hsatac.net/2012/12/ruby-conf-taiwan-2012-en</id>
    <content type="html"><![CDATA[<p>Ruby Conf Taiwan 2012 is so amazing I have to write it down.</p>

<h3>Before Party</h3>

<p><a href="http://twitter.com/ihower">ihower</a> had been inviting Matz, the creator of Ruby to Taiwan for the past three years. And finally he made it this year. Matz arrived Taiwan early, since it was a great opportunity to meet Matz in person so we hosted a meetup party with Matz the day before the conference.</p>

<p><img src="http://blog.hsatac.net/images/rubyconftw2012/matz_and_i.jpg" alt="matz and I" /></p>

<!--more-->


<h3>Day 1</h3>

<p>The location of Ruby Conf 2012 is not at Acdemia Sinica as usual, but at Tianmu Convention Center. This is the first time we host a conference here. The facilities were ok, but the wireless routers were not in good conditions, we have to get Internet via 3G. The place came with a very good restaurant, we had buffet for lunch here, it was so delicious. But the seat here were not very comfortable for talls like me.</p>

<p>The hall is not too small for a international conference, also not too large to interact to speakers. I think it&rsquo;s quite nice.</p>

<p>The first session of day 1 was Matz and of course it&rsquo;s nice. And then Wei Lu from Singapore shared about pair programming, she&rsquo;s a tactful speaker. The most surprising was the mruby talk by <a href="http://twitter.com/jserv">Jserv</a>. He talked about why his team choose mruby and go to details about ARM optimization of mruby followed up a attractive live demo, even Matz enjoyed his talk:</p>

<blockquote class="twitter-tweet"><p>こういうmrubyの話が聞けるのは予想外だったなあ</p>&mdash; Yukihiro Matsumoto (@yukihiro_matz) <a href="https://twitter.com/yukihiro_matz/status/276903947690729472" data-datetime="2012-12-07T04:20:20+00:00">December 7, 2012</a></blockquote>


<script src="http://blog.hsatac.net//platform.twitter.com/widgets.js" charset="utf-8"></script>


<blockquote><p>&ldquo;I didn&rsquo;t expect for this kind of mruby information.&rdquo;</p></blockquote>

<p>In the afternoon, <a href="http://twitter.com/godfat">godfat</a> gave a tlak about concurrency application servers, it&rsquo;s also very nice, covered from real cases to deep theories.</p>

<p>High percentage of attendances and speakers were foreigners, so most of the sessions were gave in English. In my opinion this was a great way to welcome foreign friends as a international conference.</p>

<h3>Party</h3>

<p>I went to official party at day 1 night, I don&rsquo;t usually drink so I planned to go there just to meet some friends. But at the end I drank until the club was closed.</p>

<p>This was a great event to meet new people and old friends from every places in the world.</p>

<p>I asked Matz in the party, &ldquo;You have been to lots of Ruby confs, and this is the first time you come to Ruby Conf Taiwan, what do you think?&rdquo;</p>

<p>&ldquo;Ruby Conf Taiwan is a relatively small conference compared to other conferences, but it&rsquo;s high quality&rdquo; he said. And I asked about if he would love to come next year, he gave a confirmation answer.</p>

<p>It&rsquo;s a great honor to hear Matz says this, well done for <a href="http://twitter.com/ihower">ihower</a> and <a href="https://twitter.com/ryudoawaru">Ryudoawaru</a>.。</p>

<h3>Day 2</h3>

<p>I was very excited about sessions in day 2: &ldquo;devOps toolbox&rdquo; by <a href="http://twitter.com/dlackty">dlackty</a> will talk about chef, and thegiive from Yahoo Taiwan will talk about puppet. I&rsquo;ve been studying these 2 devOps frameworks and couldn&rsquo;t decide which to use. After their sessions, I discussed some of my questions with them.</p>

<p>The talk of Gosuke Miyashita from Japan also introduced lots of interesting things, for example, their <a href="https://github.com/paperboy-sqale/sqale-patches">anti fork bomb patch</a> and <a href="https://github.com/mizzy/openssh-script-auth">SSH router implement</a>. I was impressed by paperboy &amp; co.</p>

<p><a href="http://twitter.com/josephku">Joseph Ku</a> gave a talk about RubyMotion. As a iOS develop and a Ruby develop, I was also interested in RubyMotion but I didn&rsquo;t really dig into it because the lack of information and documents on the internet.</p>

<h3>End</h3>

<p>Ruby Conf Taiwan 2012 was so good, even people from other countries agreed:</p>

<blockquote class="twitter-tweet"><p>しかし，私が最適化の話とかをして，真面目に最適化の中身の質問を受けるカンファレンスは非常に久しぶりな気がする．台湾凄い．</p>&mdash; _ko1 (@_ko1) <a href="https://twitter.com/_ko1/status/277339165358714880" data-datetime="2012-12-08T09:09:44+00:00">December 8, 2012</a></blockquote>


<script src="http://blog.hsatac.net//platform.twitter.com/widgets.js" charset="utf-8"></script>


<blockquote><p>&ldquo;It had been a long time for me to be asked questions and discuss about optimization of Ruby core in conference, Taiwan is very good.&rdquo;</p></blockquote>

<p>I think the sessions were nicely chosen. The variaties present the possibilities of Ruby as a programming language. Not only attendances learnt a lot, speakers also interacted with each other.</p>

<p>ihower said they picked topics very carefully, they didn&rsquo;t accept your proposal just because your a sponsor. I think it&rsquo;s smart to keep advertisement of sponsors from keynotes, the quality of conference is the most important.</p>

<p>It&rsquo;s fair to say that Ruby Conf Taiwan 2012 is the best techical conference I&rsquo;ve ever been to. Thanks to the efforts of ihower, Ryudoawaru and all the staff.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyConf.tw 2012 流水帳]]></title>
    <link href="http://blog.hsatac.net/2012/12/ruby-conf-taiwan-2012/"/>
    <updated>2012-12-09T13:04:00+08:00</updated>
    <id>http://blog.hsatac.net/2012/12/ruby-conf-taiwan-2012</id>
    <content type="html"><![CDATA[<p>今年的 Ruby Conf Taiwan 2012 實在太精彩，太感動了，一定要寫下來紀錄一下。</p>

<h3>前夜祭</h3>

<p>首先是經過 ihower 三年的邀請，今年終於邀請到 Ruby 之父 Matz 來到台灣。由於 Matz 提早到台灣，所以在 Ruby Conf 的前一天晚上也臨時加開了 Matz 見面會，能有這個近距離和大師接觸，聊天，提問的機會實在非常難得。不過也許是這時候大家把問題都問的差不多了，結果隔天 Matz 的 keynote 反而沒什麼人提問(笑)。</p>

<p><img src="http://blog.hsatac.net/images/rubyconftw2012/matz_and_i.jpg" alt="matz and I" /></p>

<!--more-->


<h3>Day 1</h3>

<p>這次場地不是在老地方中研院，而是在天母農訓中心國際會議廳，大家應該都是第一次來這個地方。場地設備算 OK ，不過沒有有線網路可用，然後剛好無線網路又悲劇了，後來大家好像都是靠自己的 3G 上網。午餐也是在這邊有 buffet 可以吃，非常好吃！一般訂便當完全無法相提並論。不過座位稍微矮小狹窄了一點，我這個身高的人坐一整天其實膝蓋很痛⋯⋯。</p>

<p>這個廳比中研院的大廳小，比中研院的小廳大。其實我覺得這樣的配置挺不錯的，不會離講者太遠，互動性比較高，也不會太擁擠。</p>

<p>一早就是 Matz 的 Keynote，同時講了三個主題，非常豐富；接下來是來自新加坡的 Wei Lu 分享 Pair Programming ，台風非常穩健。最令人驚喜的是 Jserv 的 mruby talk！從為什麼他們選擇 mruby 到 ARM 優化的細節，最後 live demo，連 Matz 在台下都聽得連連點頭。</p>

<blockquote class="twitter-tweet"><p>こういうmrubyの話が聞けるのは予想外だったなあ</p>&mdash; Yukihiro Matsumoto (@yukihiro_matz) <a href="https://twitter.com/yukihiro_matz/status/276903947690729472" data-datetime="2012-12-07T04:20:20+00:00">December 7, 2012</a></blockquote>


<script src="http://blog.hsatac.net//platform.twitter.com/widgets.js" charset="utf-8"></script>


<blockquote><p>「聽到這種 mruby 的資訊真是意料之外」</p></blockquote>

<p>下午 godfat 關於 concurrency application servers 的 talk 也很精彩，從實務出發，由淺入深。</p>

<p>這次與會的外國來賓和講者比例非常高，所以很多中文議程講者都臨時決定改用英文分享。其實我是覺得滿好的，身為一個國際性的研討會，盡可能照顧到所有人，讓外國來賓比較有參與感。</p>

<p>結果第一天的議程除了 godfat 以外全部都用英文演說了，恭喜 godfat 得到「Day 1 唯一中文講者」的成就 XD</p>

<h3>Party</h3>

<p>晚上參加了 official party，表定到晚上 12 點，因為我不太喝酒，本來想說去 social 一下就回家了。沒想到真的喝到 12 點才走(爆)</p>

<p>這個場合真的很好，可以很輕鬆的跟新朋友老朋友、各國來賓輕鬆的對談。跟好久不見的 dreamslab ben update 了一下近況；跟 jserv 聊了一下他的新公司；也跟慕凡交換了一下遊戲界甘苦談。</p>

<p>席間我問 Matz：「您去過許多 ruby conf, 這是第一次來 ruby conf taiwan ，您覺得怎麼樣？」</p>

<p>他回答，ruby conf taiwan 規模雖然小，但是質量水準很高，他相當驚訝。又問明年他是否願意再來，他說只要我們有邀請，他就會再來。</p>

<p>能讓 Matz 如此肯定，ihower 跟慕凡辦的真的是太優秀了。</p>

<h3>Day 2</h3>

<p>Day 2 是我原本就期待許久的議程，主要是 dlackty 的 devOps toolbox 會提到 chef，緊接著 thegiive 會介紹 puppet，這兩套工具我 survey 了一陣子，無法決定要用哪套，剛好來聽聽看心得。在兩位 Session 結束後也分別向兩位請教了一些 devOps 上的疑惑。</p>

<p>早上 Gosuke Miyashita 的 talk 也講了很多有趣的東西，例如他們的 <a href="https://github.com/paperboy-sqale/sqale-patches">anti fork bomb patch</a> 和 <a href="https://github.com/mizzy/openssh-script-auth">SSH router 實作</a>，讓我對 paperboy &amp; co. 這家陌生的日本公司有很深刻的印象。</p>

<p>下午 josephku 的 RubyMotion 也講的很精彩。 RubyMotion 也是我關注很久的技術，可以用 ruby 語法寫 iOS 對我這種被逼上梁山的 iOS 開發者來說有很大的吸引力。但是他的資料一直非常少，很訝異 josephku 能掌握並分享這樣一個新穎的技術，QA 時我也提問了兩個問題。會後本想找 josephku 認識一下，但緣鏗一面，希望日後有機會。</p>

<h3>End</h3>

<p>這次 Ruby Conf Taiwan 2012 的 Session 質量非常高，高到連外國來賓都很訝異。</p>

<blockquote class="twitter-tweet"><p>しかし，私が最適化の話とかをして，真面目に最適化の中身の質問を受けるカンファレンスは非常に久しぶりな気がする．台湾凄い．</p>&mdash; _ko1 (@_ko1) <a href="https://twitter.com/_ko1/status/277339165358714880" data-datetime="2012-12-08T09:09:44+00:00">December 8, 2012</a></blockquote>


<script src="http://blog.hsatac.net//platform.twitter.com/widgets.js" charset="utf-8"></script>


<blockquote><p>「不過, 讓我談到最佳化之類的議題、被認真地問最佳化核心部份的問題 conference 似乎非常久沒遇過了, 台灣真厲害。」</p></blockquote>

<p>我覺得這次議程篩選和安排的相當好，各領域的主題都有，展現了 Ruby 的多種可能性；深度也夠，不僅是聽眾收穫豐碩，講者們也能有互動。例如第一天 mruby 的幾位講者和來賓 jserv, matz, 高橋彼此會後也都能有交流。</p>

<p>聽 ihower 說這次篩選主題非常嚴格，有許多 sponser 的投稿都沒能入選，我覺得這樣非常好，贊助歸贊助，會給他們廣告的空間，不過維持大會的水準才是第一要務。</p>

<p>不誇張，這次 Ruby Conf Taiwan 2012 真的是我參加到目前為止台灣研討會裡最棒的一場，感謝 ihower 和慕凡以及所有工作人員的努力！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2010 MBP 升級 SSD 與 Fusion Drive]]></title>
    <link href="http://blog.hsatac.net/2012/11/macbook-pro-2010-mid-replace-optical-drive-with-ssd-and-fusion-drive/"/>
    <updated>2012-11-26T15:15:00+08:00</updated>
    <id>http://blog.hsatac.net/2012/11/macbook-pro-2010-mid-replace-optical-drive-with-ssd-and-fusion-drive</id>
    <content type="html"><![CDATA[<p>我現在用來開發 iOS 的電腦是公司提供的一台 Macbook Pro 13&#8221; 2010 mid 4G ram。使用上還算堪用，但時不時的 lag 以及 freeze 實在非常挑戰開發者的耐心。尤其當我 Xcode 開著，git 切換 branch 然後 Xcode 重新 index 的時候簡直慘不忍睹。</p>

<p>畢竟電腦還是自己在用，開心順手最重要，所以決定自己投資一點下去升級。因為光碟機很少在用，所以查了一下以前看過的硬碟轉接托架，意外發現非常便宜才 200 多元，還附拆機工具組。參考<a href="http://blog.lyhdev.com/2012/10/apple-macbook-pro-ssd.html">玩物喪誌</a>的心得一樣購買 Jeyi 的硬碟托架以及 Micron M4 7mm 超薄 SSD。別人踩過一次的雷就不用再踩了。</p>

<p>把光碟機拆下，原本的位置裝上 SSD。內裝的硬碟則不動。如果把內裝硬碟裝在硬碟托架的話硬碟的感震偵測會無法作用。拆機安裝部分參考 <a href="http://www.ifixit.com/Guide/MacBook+Pro+13-Inch+Unibody+Mid+2010+Optical+Drive+Replacement/4318/">ifixit</a> 的說明。最需要注意的是螺絲不要滑牙了。</p>

<p>在拆機的過程中也順便把家裡的 Mac mini server 8G 出包版的記憶體拆下與 MBP 的 4G 對調，兩組都是 DDR 3 1066 的規格，對換毫無困難。</p>

<p>裝上以後開機確認是否有抓到及辨識到 SSD 固態硬碟，link speed 也跑到 SATA II 全速。接著使用 Carbon Copy Cloner 先把原本的系統碟備份到外接 USB 硬碟。再改用 USB 硬碟開機，準備做 Fusion Drive。</p>

<p>會使用 Fusion Drive 的原因是 SSD 實在不夠大，原本要自己安排哪些目錄放 SSD，哪些少用放 HD ，但是使用 Fusion Drive 技術的話可以將 SSD 與 HD 變成一顆邏輯磁碟，而系統會自己幫你判斷哪些常用的檔案放在 SSD, 不常用的則移去 HD ，兼顧了速度與容量和便利性，似乎是個不錯的選擇，所以決定試試看。</p>

<p>參考 <a href="http://jollyjinx.tumblr.com/post/34638496292/fusion-drive-on-older-macs-yes-since-apple-has">Fusion drive on older Macs? YES!</a> 的說明做好 Fusion Drive，再用 Carbon Copy Cloner 把外接 USB 硬碟的資料複製回做好的 Fusion Drive。值得一提的是 Fusion Drive 似乎無法製作 Recovery Partition，這部份只好無視他的 warning 。</p>

<p>最後把 Fusion Drive 設為開機碟重開就完成了這次的升級。相關照片和紀錄都放在 <a href="http://www.facebook.com/media/set/?set=a.4857081506317.2196205.1275503618&amp;type=1&amp;l=bb8d23d675">Facebook 相簿</a> 中。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sentry 簡介投影片]]></title>
    <link href="http://blog.hsatac.net/2012/11/sentry-introduction-slides/"/>
    <updated>2012-11-13T11:53:00+08:00</updated>
    <id>http://blog.hsatac.net/2012/11/sentry-introduction-slides</id>
    <content type="html"><![CDATA[<script async class="speakerdeck-embed" data-id="509a1faa3a7976000202bd2c" data-ratio="1.2994923857868" src="http://blog.hsatac.net//speakerdeck.com/assets/embed.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP array 相加與 array_merge]]></title>
    <link href="http://blog.hsatac.net/2012/11/php-array-plus-array-versus-array-merge/"/>
    <updated>2012-11-06T13:17:00+08:00</updated>
    <id>http://blog.hsatac.net/2012/11/php-array-plus-array-versus-array-merge</id>
    <content type="html"><![CDATA[<p>今天聊到這個問題，喚起我沈睡的記憶…應該寫下來不然兩年後我大概又會忘了。</p>

<p>在 PHP 中 <code>array + array</code> 與 <code>array_merge</code> 的行為是不一樣的，陣列相加的效能會比 <code>array_merge</code> 來的好，但換來的代價是可能不是你預期的行為以及資料流失。</p>

<p>PHP 的陣列可以有 key 也可以沒有 key，也可以兩者混合。不過所謂的沒有 key ，其實他還是有 key ，只是是自動編上去的 int 流水號 key 例如 0,1,2,3&hellip;不管是哪一種，在陣列相加以及 <code>array_merge</code> 的行為都不一樣。</p>

<p>先講一下 <code>array_merge</code> 的行為，<code>array_merge($a, $b)</code> 的話，如果 <code>$a</code> 和 <code>$b</code> 裡面有 key 相同的元素，則會<strong>後蓋前</strong>也就是 <code>$b</code> 的值會蓋掉 <code>$a</code> 的值。那如果是沒有 key (流水號 key)的值，則會以附加在尾端 (append) 的方式合併上去，而所有流水號 key 的 index 則會重排。</p>

<!--more-->


<p>底下是一個簡單的例子：</p>

<figure class='code'><figcaption><span>array_merge</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$arr_a</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="o">=&gt;</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="o">=&gt;</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="o">=&gt;</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="nv">$arr_b</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="o">=&gt;</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nb">array_merge</span><span class="p">(</span><span class="nv">$arr_a</span><span class="p">,</span> <span class="nv">$arr_b</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>結果為：</p>

<figure class='code'><figcaption><span>array_merge</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">array(5) {</span>
</span><span class='line'><span class="x">  [&quot;a&quot;]=&gt;</span>
</span><span class='line'><span class="x">  int(1)</span>
</span><span class='line'><span class="x">  [&quot;b&quot;]=&gt;</span>
</span><span class='line'><span class="x">  int(1)</span>
</span><span class='line'><span class="x">  [0]=&gt;</span>
</span><span class='line'><span class="x">  int(3)</span>
</span><span class='line'><span class="x">  [1]=&gt;</span>
</span><span class='line'><span class="x">  int(4)</span>
</span><span class='line'><span class="x">  [2]=&gt;</span>
</span><span class='line'><span class="x">  int(5)</span>
</span><span class='line'><span class="x">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>那如果是 <code>array + array</code> 的狀況，在有 key 的值的部分是相反的<strong>前蓋後</strong>，而沒有 key(流水號 key)的部分也會<strong>前蓋後</strong>，流水號 index 不會重排。我們用同樣的例子來觀察：</p>

<figure class='code'><figcaption><span>array + array</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$arr_a</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="o">=&gt;</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="o">=&gt;</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="o">=&gt;</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="nv">$arr_b</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="o">=&gt;</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$arr_a</span> <span class="o">+</span> <span class="nv">$arr_b</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>結果為：</p>

<figure class='code'><figcaption><span>array + array</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">array(4) {</span>
</span><span class='line'><span class="x">  [&quot;a&quot;]=&gt;</span>
</span><span class='line'><span class="x">  int(1)</span>
</span><span class='line'><span class="x">  [&quot;b&quot;]=&gt;</span>
</span><span class='line'><span class="x">  int(2)</span>
</span><span class='line'><span class="x">  [1]=&gt;</span>
</span><span class='line'><span class="x">  int(3)</span>
</span><span class='line'><span class="x">  [0]=&gt;</span>
</span><span class='line'><span class="x">  int(4)</span>
</span><span class='line'><span class="x">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>由此可知 <code>array + array</code> 和 <code>array_merge</code> 的行為是完全不一樣的，而大多數的情況陣列相加不會是我們想要的結果。請根據使用狀況謹慎選擇。</p>

<p>我只有在一個地方使用過陣列相加，在處理使用者設定的部分，系統有一個預設的設定陣列，使用者也會有使用者自訂的設定陣列，而使用者可能只設了其中幾項，這時把這兩個陣列相加，就可以組合出一個完整的使用者設定陣列，使用者沒設定的部分就由預設值陣列填補。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="k">static</span> <span class="k">protected</span> <span class="k">function</span> <span class="nf">_fillWithDefault</span><span class="p">(</span><span class="nv">$settings</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nb">settype</span><span class="p">(</span><span class="nv">$settings</span><span class="p">,</span> <span class="s2">&quot;array&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$defaults</span> <span class="o">=</span> <span class="nx">self</span><span class="o">::</span><span class="na">getDefault</span><span class="p">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">foreach</span><span class="p">(</span><span class="nv">$settings</span> <span class="k">as</span> <span class="nv">$key</span><span class="o">=&gt;</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="nv">$key</span><span class="p">,</span> <span class="nv">$defaults</span><span class="p">))</span> <span class="nb">unset</span><span class="p">(</span><span class="nv">$settings</span><span class="p">[</span><span class="nv">$key</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">return</span> <span class="nv">$settings</span> <span class="o">+</span> <span class="nv">$defaults</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>當然這個 case 寫成 <code>array_merge($defaults, $settings)</code> 也是可以達到一樣的效果，不過當時我覺得陣列相加效能較好，語意上也不會造成混淆，所以就採用這個寫法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Obj-C 單元測試非同步連線]]></title>
    <link href="http://blog.hsatac.net/2012/10/obj-c-unit-test-with-asynchronous-request/"/>
    <updated>2012-10-30T13:14:00+08:00</updated>
    <id>http://blog.hsatac.net/2012/10/obj-c-unit-test-with-asynchronous-request</id>
    <content type="html"><![CDATA[<p>使用 Xcode 的 OCUnit 來做單元測試網路連線時，由於 OCUnit 不會等 block 執行，所以會直接跳到 pass。一般正常作法應該是用 mock object 來測試，不過總有要實際測試真實連線的時候。這時可以使用以下的 snippet:</p>

<div><script src='https://gist.github.com/3978482.js'></script>
<noscript><pre><code>- (void)testLogin
{
    dispatch_semaphore_t semaphore = dispatch_semaphore_create(0);
    [[miiiCasaServer getServer] login:@&quot;test@example.com&quot; andPassword:@&quot;password&quot; success:^(AFHTTPRequestOperation *operation, id responseObject) {
        assertThat(responseObject[@&quot;status&quot;], is(@&quot;ok&quot;));
        dispatch_semaphore_signal(semaphore);
    } failure:nil];
    while (dispatch_semaphore_wait(semaphore, DISPATCH_TIME_NOW))
        [[NSRunLoop currentRunLoop] runMode:NSDefaultRunLoopMode
                                 beforeDate:[NSDate dateWithTimeIntervalSinceNow:10]];
    dispatch_release(semaphore);   // You don't need this if your deployment target &gt;= 6.0 and ARC enabled.
}
- (void)testLoginFail
{
    dispatch_semaphore_t semaphore = dispatch_semaphore_create(0);
    [[miiiCasaServer getServer] login:@&quot;test@example.com&quot; andPassword:@&quot;wrongpassword&quot; success:nil failure:^(AFHTTPRequestOperation *operation, NSError *error) {
        assertThat([[error userInfo] objectForKey:@&quot;errmsg&quot;], containsString(@&quot;incorrect&quot;));
        assertThatInteger([error code], equalToInt(401));
        dispatch_semaphore_signal(semaphore);
    }];
    while (dispatch_semaphore_wait(semaphore, DISPATCH_TIME_NOW))
        [[NSRunLoop currentRunLoop] runMode:NSDefaultRunLoopMode
                                 beforeDate:[NSDate dateWithTimeIntervalSinceNow:10]];
    dispatch_release(semaphore);   // You don't need this if your deployment target &gt;= 6.0 and ARC enabled.
}</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[關於我的 Logo]]></title>
    <link href="http://blog.hsatac.net/2012/10/about-my-logo/"/>
    <updated>2012-10-21T11:07:00+08:00</updated>
    <id>http://blog.hsatac.net/2012/10/about-my-logo</id>
    <content type="html"><![CDATA[<p>在<a href="http://kvzhuang.blogspot.tw/2012/10/logo.html">莊神的部落格</a>被點名了，再加上我好像也沒講過我 Logo 的故事，只好發文解釋一下。</p>

<p><img src="http://www.loftwork.com/lw-content/users/8399/21a7cb1c760942198a0ace0efe362e78.gif" alt="Logo" /></p>

<!--more-->


<p>這個 Logo 是大學時代一個朋友傳給我的，一看就非常喜歡，比較熟的朋友大概都看得出來，完全能代表我這個人(笑)。所以馬上就拿來當 Logo 使用，一用就用到現在。</p>

<p>不過因為我朋友在網路掃圖掃太凶，他已經不記得這張圖是在哪裡取得，更不用說知道作者了，我一直很想知道這張圖的 license 獲得到原作者的授權，但始終無法找到，這件事就一直掛在我心上。</p>

<p>還好沒過多久，Google 推出了兇惡的「以圖找圖」功能，馬上就用這個功能下去找&hellip;&hellip;沒想到不知道是當初作者網站還沒建立起來、還是還沒索引到，又或者是那時以圖找圖搜尋技術還沒成熟，仍然是無功而返。</p>

<p>時光又過了一兩年，有一天我又突然想起這件事，再試著找看看，沒想到這時很精準的就找到了作者的網站。</p>

<p>作者是日本的 64CAT64 ，他的<a href="http://www.loftwork.com/portfolios/mushi/profile">網站</a>有許多他的作品。</p>

<p>找到作者後馬上寫 email 和他聯繫，解釋了一下我很喜歡這張圖，也用這張圖作為我的代表 Logo 許多年，想得知這張圖的 license ，看是否需要購買還是怎樣。</p>

<p>作者人非常好，只要我沒有拿來營利，他允許我免費使用他這張圖片，他也很高興我喜歡他的圖，只要我找個地方註記圖片作者的 URL 即可。所以後來我在 Blog footer 就加上了作者網站連結。</p>
]]></content>
  </entry>
  
</feed>
