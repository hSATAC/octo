<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[hSATAC]]></title>
  <link href="http://blog.hsatac.net/atom.xml" rel="self"/>
  <link href="http://blog.hsatac.net/"/>
  <updated>2012-10-30T13:43:55+08:00</updated>
  <id>http://blog.hsatac.net/</id>
  <author>
    <name><![CDATA[hSATAC]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Obj-C 單元測試非同步連線]]></title>
    <link href="http://blog.hsatac.net/2012/10/obj-c-unit-test-with-asynchronous-request/"/>
    <updated>2012-10-30T13:14:00+08:00</updated>
    <id>http://blog.hsatac.net/2012/10/obj-c-unit-test-with-asynchronous-request</id>
    <content type="html"><![CDATA[<p>使用 Xcode 的 OCUnit 來做單元測試網路連線時，由於 OCUnit 不會等 block 執行，所以會直接跳到 pass。一般正常作法應該是用 mock object 來測試，不過總有要實際測試真實連線的時候。這時可以使用以下的 snippet:</p>

<div><script src='https://gist.github.com/3978482.js?file='></script>
<noscript><pre><code>- (void)testLogin
{
    dispatch_semaphore_t semaphore = dispatch_semaphore_create(0);
    [[miiiCasaServer getServer] login:@&quot;test@example.com&quot; andPassword:@&quot;password&quot; success:^(AFHTTPRequestOperation *operation, id responseObject) {
        assertThat(responseObject[@&quot;status&quot;], is(@&quot;ok&quot;));
        dispatch_semaphore_signal(semaphore);
    } failure:nil];
    while (dispatch_semaphore_wait(semaphore, DISPATCH_TIME_NOW))
        [[NSRunLoop currentRunLoop] runMode:NSDefaultRunLoopMode
                                 beforeDate:[NSDate dateWithTimeIntervalSinceNow:10]];
    dispatch_release(semaphore);   // You don't need this if your deployment target &gt;= 6.0 and ARC enabled.
}
- (void)testLoginFail
{
    dispatch_semaphore_t semaphore = dispatch_semaphore_create(0);
    [[miiiCasaServer getServer] login:@&quot;test@example.com&quot; andPassword:@&quot;wrongpassword&quot; success:nil failure:^(AFHTTPRequestOperation *operation, NSError *error) {
        assertThat([[error userInfo] objectForKey:@&quot;errmsg&quot;], containsString(@&quot;incorrect&quot;));
        assertThatInteger([error code], equalToInt(401));
        dispatch_semaphore_signal(semaphore);
    }];
    while (dispatch_semaphore_wait(semaphore, DISPATCH_TIME_NOW))
        [[NSRunLoop currentRunLoop] runMode:NSDefaultRunLoopMode
                                 beforeDate:[NSDate dateWithTimeIntervalSinceNow:10]];
    dispatch_release(semaphore);   // You don't need this if your deployment target &gt;= 6.0 and ARC enabled.
}</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[關於我的 Logo]]></title>
    <link href="http://blog.hsatac.net/2012/10/about-my-logo/"/>
    <updated>2012-10-21T11:07:00+08:00</updated>
    <id>http://blog.hsatac.net/2012/10/about-my-logo</id>
    <content type="html"><![CDATA[<p>在<a href="http://kvzhuang.blogspot.tw/2012/10/logo.html">莊神的部落格</a>被點名了，再加上我好像也沒講過我 Logo 的故事，只好發文解釋一下。</p>

<p><img src="http://www.loftwork.com/lw-content/users/8399/21a7cb1c760942198a0ace0efe362e78.gif" alt="Logo" /></p>

<!--more-->


<p>這個 Logo 是大學時代一個朋友傳給我的，一看就非常喜歡，比較熟的朋友大概都看得出來，完全能代表我這個人(笑)。所以馬上就拿來當 Logo 使用，一用就用到現在。</p>

<p>不過因為我朋友在網路掃圖掃太凶，他已經不記得這張圖是在哪裡取得，更不用說知道作者了，我一直很想知道這張圖的 license 獲得到原作者的授權，但始終無法找到，這件事就一直掛在我心上。</p>

<p>還好沒過多久，Google 推出了兇惡的「以圖找圖」功能，馬上就用這個功能下去找&#8230;&#8230;沒想到不知道是當初作者網站還沒建立起來、還是還沒索引到，又或者是那時以圖找圖搜尋技術還沒成熟，仍然是無功而返。</p>

<p>時光又過了一兩年，有一天我又突然想起這件事，再試著找看看，沒想到這時很精準的就找到了作者的網站。</p>

<p>作者是日本的 64CAT64 ，他的<a href="http://www.loftwork.com/portfolios/mushi/profile">網站</a>有許多他的作品。</p>

<p>找到作者後馬上寫 email 和他聯繫，解釋了一下我很喜歡這張圖，也用這張圖作為我的代表 Logo 許多年，想得知這張圖的 license ，看是否需要購買還是怎樣。</p>

<p>作者人非常好，只要我沒有拿來營利，他允許我免費使用他這張圖片，他也很高興我喜歡他的圖，只要我找個地方註記圖片作者的 URL 即可。所以後來我在 Blog footer 就加上了作者網站連結。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[同步 git 和 hg 的 repository]]></title>
    <link href="http://blog.hsatac.net/2012/10/sync-git-with-hg/"/>
    <updated>2012-10-17T10:20:00+08:00</updated>
    <id>http://blog.hsatac.net/2012/10/sync-git-with-hg</id>
    <content type="html"><![CDATA[<p>最近在玩 go，編輯器主要是使用 vim 搭配 <a href="https://github.com/nsf/gocode">gocode</a>。我習慣用 <a href="https://github.com/tpope/vim-pathogen">pathogen.vim</a> 來管理我的 vim 套件，不過 go 官方附的 vim syntax plugin 和 gocode 提供的 autocompletion plugin 目錄結構都無法直接當成 git submodule 引入我的 vim 設定中。</p>

<p>由於我個人潔癖作祟，不想再用 copy 的方式來管理我的 vim plugins，所以我決定自己把這兩份 plugin 抽出來獨立成各自的 git repositories，就可以當成 git submodule 引用了。</p>

<!--more-->


<p>gocode 的部分很容易，他原本就是 git，只要參考我之前的文章「<a href="http://blog.hsatac.net/2012/04/moving-files-from-one-git-repository-to-another-keeping-commit-history/">把 Git 中的目錄搬到另一個 Git 並保留 Commit</a>」就可以了。不過 go 的部分就沒這麼簡單了。go 的原始碼 host 在 google code 上，採用 hg，因此要想辦法先把他由 hg 轉換成 git 才行。</p>

<p>一開始使用的是 <a href="http://hg-git.github.com/">hg-git</a> 這套，不過在 gexport 這個過程非常緩慢，不知道是這個套件本身有問題還是 go 的 hg repository 太大了。試了兩天之後只好放棄，改用 <a href="http://offbytwo.com/git-hg/">git-hg</a> 這套。這套一樣也是使用 python 寫的，不過效率上就挺不錯的。使用上也很方便，直接 <code>git-hg clone https://code.google.com/p/go/</code> 出來就是 git 的目錄了。</p>

<p>值得一提的是，使用 homebrew 安裝 git-hg 時，由於 git-hg 有 require <a href="http://repo.or.cz/w/fast-export.git">fast-export</a> 這個 submodule，但 homebrew 安裝下來的 fast-export 居然不是最新的，導致無法使用。後來自己到 <code>/usr/local/Cellar/git-hg/HEAD</code> 把 fast-export 這個目錄移除，再 clone 一份新的 fast-export 就可以正常使用了。</p>

<p>我不想弄亂這個目錄，所以我是在 local 端再 clone 一次這個使用 git-hg clone 下來的 repository，再來作 <code>git filter-branch</code> 的動作。另外這個 repository 也順便丟到 github 上當作一個 go 的 git mirror 給有需要的人使用。</p>

<p>產出三個 repositories:</p>

<ul>
<li><p><a href="https://github.com/golangtw/go.vim">https://github.com/golangtw/go.vim</a> go 的 syntax plugin</p></li>
<li><p><a href="https://github.com/golangtw/gocode.vim">https://github.com/golangtw/gocode.vim</a> gocode 的 autocomplete plugin</p></li>
<li><p><a href="https://github.com/golangtw/go">https://github.com/golangtw/go</a> go 的 git mirror</p></li>
</ul>


<p>最後再寫一個 script 每天跑一次 cronjob 自動去 sync 就完成啦！</p>

<div><script src='https://gist.github.com/3903435.js?file='></script>
<noscript><pre><code>#!/bin/sh

# do gocode first
cd /Users/cat/golang.tw/gocode
git pull
git filter-branch -f --subdirectory-filter vim -- --all
git push pathogen master
git fetch
git reset --hard origin/master

# do git-hg sync go
cd /Users/cat/golang.tw/go.git
git-hg pull
git push origin master

# do go.vim

cd /Users/cat/golang.tw/go.vim
git pull
git filter-branch -f --subdirectory-filter misc/vim -- --all
git push github master
git fetch
git reset --hard origin/master
</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[8 款我最近常用的 command line 工具]]></title>
    <link href="http://blog.hsatac.net/2012/09/8-command-line-tools-i-have-been-using-lately/"/>
    <updated>2012-09-28T13:45:00+08:00</updated>
    <id>http://blog.hsatac.net/2012/09/8-command-line-tools-i-have-been-using-lately</id>
    <content type="html"><![CDATA[<p>介紹八款我最近常用的 command line 工具，對開發很有幫助。</p>

<!--more-->


<h2>1. Mosh</h2>

<h3>說明</h3>

<p>不會斷線的 ssh
<a href="http://mosh.mit.edu/">http://mosh.mit.edu/</a></p>

<h3>安裝</h3>

<p>client 和 server 都需要安裝</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>packer mosh (Archlinux)
</span><span class='line'>yum install mosh (Centos)
</span><span class='line'>brew install mobile-shell (MacOS)</span></code></pre></td></tr></table></div></figure>


<h3>使用</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mosh ash_wu@myserver.com
</span><span class='line'>mosh myserver.com -- screen -rx</span></code></pre></td></tr></table></div></figure>


<h2>2. Mitmproxy</h2>

<h3>說明</h3>

<p>middleman proxy 可用來 debug , fiddler 的 *nix 版</p>

<p><a href="http://mitmproxy.org">http://mitmproxy.org</a></p>

<h3>安裝</h3>

<p>使用 python 套件管理 pip 安裝</p>

<p>有 https 需求的話則需要安裝他的憑證</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pip install mitmproxy</span></code></pre></td></tr></table></div></figure>


<h3>使用</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mitmproxy
</span><span class='line'>mitmdump</span></code></pre></td></tr></table></div></figure>


<h3>擴充</h3>

<p>mitmproxy 提供許多 hook 可以自訂擴充，以 python 編寫即可。可參考我的文章</p>

<p><a href="http://blog.hsatac.net/2012/08/mitmproxy-modify-request-host-and-port-howto/">http://blog.hsatac.net/2012/08/mitmproxy-modify-request-host-and-port-howto/</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mitmproxy -s test.py</span></code></pre></td></tr></table></div></figure>


<h2>3. pdsh/pdcp/rpdcp</h2>

<h3>說明</h3>

<p>一次大量對許多機器下指令/複製檔案</p>

<h3>安裝</h3>

<p>要使用 pdcp 的話 client 和 server 都要裝</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>packer pdsh (Archlinux)
</span><span class='line'>yum install pdsh (Centos)
</span><span class='line'>brew install pdsh (MacOS)</span></code></pre></td></tr></table></div></figure>


<h3>使用</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pdsh -w web[01-10],static[7,9-10] ls
</span><span class='line'>pdcp -w ash_wu@dmyserver[1-2].com test.py /home/ash_wu/</span></code></pre></td></tr></table></div></figure>


<h2>4. htop</h2>

<h3>說明</h3>

<p>better top. 可以直接看 process tree, 直接砍掉</p>

<p><a href="http://htop.sourceforge.net/">http://htop.sourceforge.net/</a></p>

<h2>5. goaccess</h2>

<p>看 apache/nginx log</p>

<p><a href="http://goaccess.prosoftcorp.com/">http://goaccess.prosoftcorp.com/</a></p>

<h3>使用</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>goaccess &lt;apache_access_log or nginx_access_log></span></code></pre></td></tr></table></div></figure>


<h2>6. ack, ag</h2>

<h3>說明</h3>

<p>Ack - Better than grep</p>

<p>Ag - Better than Ack</p>

<p>比 grep 更方便好用</p>

<p><a href="http://betterthangrep.com/">http://betterthangrep.com/</a></p>

<p><a href="https://github.com/ggreer/the_silver_searcher">https://github.com/ggreer/the_silver_searcher</a></p>

<h3>安裝</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>packer the_silver_searcher
</span><span class='line'>brew install the_silver_searcher</span></code></pre></td></tr></table></div></figure>


<h3>同場加映</h3>

<p>ack.vim</p>

<p><a href="https://github.com/mileszs/ack.vim">https://github.com/mileszs/ack.vim</a></p>

<p>ag.vim</p>

<p><a href="https://github.com/epmatsw/ag.vim">https://github.com/epmatsw/ag.vim</a></p>

<h2>7. tig</h2>

<p>git CUI client</p>

<p><a href="https://github.com/jonas/tig">https://github.com/jonas/tig</a></p>

<h2>8. bashmarks</h2>

<h3>說明</h3>

<p>快速在目錄間切換</p>

<p><a href="https://github.com/huyng/bashmarks">https://github.com/huyng/bashmarks</a></p>

<h3>安裝</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/huyng/bashmarks.git
</span><span class='line'>make install
</span><span class='line'>source ~/.local/bin/bashmarks.sh from within your ~.bash_profile or ~/.bashrc file</span></code></pre></td></tr></table></div></figure>


<h3>使用</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>s &lt;bookmark_name> - Saves the current directory as "bookmark_name"
</span><span class='line'>g &lt;bookmark_name> - Goes (cd) to the directory associated with "bookmark_name"
</span><span class='line'>p &lt;bookmark_name> - Prints the directory associated with "bookmark_name"
</span><span class='line'>d &lt;bookmark_name> - Deletes the bookmark
</span><span class='line'>l                 - Lists all available bookmarks</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[身體調校聖經]]></title>
    <link href="http://blog.hsatac.net/2012/09/the-4-hours-body/"/>
    <updated>2012-09-20T23:23:00+08:00</updated>
    <id>http://blog.hsatac.net/2012/09/the-4-hours-body</id>
    <content type="html"><![CDATA[<p><img src="http://blog.hsatac.net/images/the_4_hours_body/cover.jpg" alt="cover" /></p>

<blockquote><p>⋯⋯《身體調校聖經》所提供的，是對人類重建身體的全新探索，全盤收錄幾百位優異運動員、幾十位醫師，以及幾千小時讓人目瞪口呆的個人實驗智慧；從奧林匹克訓練中心到地下實驗室，從矽谷到南非，作者提摩西．費里斯念茲在茲的改變人生問題是：</p><p>　　對所有關於身體的事情，如何以最小的改變來創造最大的成果？⋯⋯</p></blockquote>


<p>前陣子很紅的《<a href="http://www.books.com.tw/exep/prod/booksfile.php?item=0010541859">身體調校聖經</a>》，看了許多人的心得和推薦以後覺得很有意思，也買了一本。</p>

<p>我的故事很平常，跟大多數人一樣，入伍時有著健康的好身材，退伍就業沒多久就因為天天坐在電腦前缺乏運動而發胖。從 70 kg 暴增到 90 kg。一直都有要減重的念頭，卻遲遲沒有實行。直到看了這本書。</p>

<!--more-->


<p>我覺得這本書給了我兩個很重要的觀念：一個是書中所提的「原宿時刻」。故事不在這邊細說，留給各位買書後自行閱讀。我就和故事的主角一樣，突然領悟到，在生命中我一直對最重要的資產——身體視而不見。下意識去忽略他。我知道我需要減重，我知道我要吃得健康，我知道我要維持運動。可是我總是什麼都不去做，就這樣等著看會不會有什麼神奇的事情發生。我每天在寫程式，學習新技術。不斷磨練自己，不斷改進自己的產品、開發流程。因為我知道每天都進步一點，持久下來就會很可觀。可是對自己身體的態度，我卻偏偏是我最瞧不起的那種人。意識到這點以後，要做改變一點都不困難了。</p>

<p>第二個我覺得很棒的觀點是：「測量」。</p>

<p>我從沒想過自己的身體也可以當玩具。我每個月都在買新玩具，沉迷於新玩具帶給我的刺激。但是陪伴我最久，離我最近的身體我居然沒想過要好好去研究他。書中提供了許多測量的方式和策略，只要有了測量和資料，我就可以分析方法是否有效，要如何改變或是繼續加強。就跟我們平時在優化程式、調校伺服器一樣。這不正是我們最擅長的嗎？</p>

<p>除了帶給我這兩點觀念外，書裡也充滿了許多有用的知識和各種你沒想過/沒聽過的調校方法。真的很值得買一本，偶爾隨手翻翻都好，會有意想不到的收穫。</p>

<p>最後附上我按書中提供的方法，選擇比較適合我生活型態的減重方式，運行一個月以來的成果。</p>

<p>我使用的是「低醣減脂法」。不吃米麥糖奶和水果，只吃菜肉蛋豆；不喝飲料，只喝開水或黑咖啡/無糖茶。每天早上起床一小時內一定吃早餐並且補充蛋白質。每週六是作弊日，可以盡情吃任何想吃的東西。</p>

<p>洗澡時洗冷水澡，並且固定時間測量自己的體重/體脂肪/腰圍等等。</p>

<p>從 8/21 實行到今天結束剛好 30 天整。我的成果：腰圍由 101 cm 縮減到 93 cm；體重從 92.3 kg 減輕到 86 kg。後面附的是我體重曲線圖。</p>

<p><img src="http://blog.hsatac.net/images/the_4_hours_body/weight.png" alt="weight" /></p>

<p>還沒達到我的理想體重，因此我還會再持續好一陣子。以前減重帶給我的只有節制和痛苦。但現在我和我自己的身體玩的不亦樂乎，再也不是一件令人難以忍受的事了。我對自己身體的探索，還會再繼續下去。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[開發 Golang 的 IDEs]]></title>
    <link href="http://blog.hsatac.net/2012/09/golang-ides/"/>
    <updated>2012-09-19T00:34:00+08:00</updated>
    <id>http://blog.hsatac.net/2012/09/golang-ides</id>
    <content type="html"><![CDATA[<p>介紹一些開發 Golang 的 IDEs</p>

<p>首先是我慣常使用的 <a href="http://www.sublimetext.com/2">Sublime Text 2</a> 搭配  <a href="https://github.com/disposaboy/gosublime">gosublime</a> 外掛。</p>

<p><img src="http://blog.hsatac.net/images/golang_ides/subl.png" alt="gosublime" /></p>

<!--more-->


<p>以及也是我慣用的 vim + <a href="https://github.com/nsf/gocode/">gocode</a></p>

<p>在 <code>$GOROOT/misc/vim</code> 下已經有提供給 vim 使用的 syntax, indent, plugin 等，全部複製到 <code>~/.vim</code> 下面即可。如果不知道 go 安裝的位置可以使用 <code>go env</code> 來查詢。</p>

<p>按 gocode 的說明安裝完成後就可以在 vim 裡面使用 golang 的 autocompletion 了。</p>

<p><img src="http://blog.hsatac.net/images/golang_ides/vim.png" alt="vim + gocode" /></p>

<p>提了 vim 也不得不提 emacs. Emacs 一樣使用 <code>$GOROOT/misc/emacs</code> 下提供的檔案以及搭配 gocode 做自動完成。</p>

<p><img src="http://blog.hsatac.net/images/golang_ides/emacs.png" alt="emacs + gocode" /></p>

<p>再來介紹一個大陸開發的 <a href="http://code.google.com/p/golangide/">golangide</a> 相當優秀，也是跨三平台版本。安裝就可以使用了，不需要多餘的設定。</p>

<p><img src="http://blog.hsatac.net/images/golang_ides/golangide.png" alt="golangide" /></p>

<p><a href="http://code.google.com/p/goclipse/">goeclipse</a>
Golang 的 Eclipse plugin…Eclipse 現在完全是個萬能 editor.</p>

<p><img src="http://blog.hsatac.net/images/golang_ides/goeclipse.png" alt="goeclipse" /></p>

<p><a href="http://www.zeusedit.com/go.html">zeus</a> 是一個 windows 的 programming editor，也提供了深度支援開發 golang。</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/CZ5Yl0KnbKs" frameborder="0" allowfullscreen></iframe>




<iframe width="560" height="315" src="http://www.youtube.com/embed/84i7H-E0YUM" frameborder="0" allowfullscreen></iframe>


<p>Zeus 整合的相當好，包括 debugger, build manager, package manager 都有提供，比較有完整 IDE 的感覺。但完整版是要付費購買的。不管如何，選擇一個喜歡，順手合自己意的才是最重要的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自動檢查 git branch 是否 merge 過]]></title>
    <link href="http://blog.hsatac.net/2012/08/git-branching-model-regular-check/"/>
    <updated>2012-08-12T12:28:00+08:00</updated>
    <id>http://blog.hsatac.net/2012/08/git-branching-model-regular-check</id>
    <content type="html"><![CDATA[<p>按照一般 <a href="http://nvie.com/posts/a-successful-git-branching-model/">Git branching model</a> 來開發，當團隊人數稍多時，管理 Git branch 會變得有些麻煩。Branch 數量多之外，也很難記得哪些 branches 是已經 merge 進主幹、不再需要可以刪除；或者哪些 branches 沒有 merge 進主幹但已經放棄不用。這時就需要一些自動化的 script 幫助管理。</p>

<!--more-->


<p>本來是想全部用 bash 寫，不過功力不夠，最後還是偷懶用 ruby 了。</p>

<p>這個 script 會先檢查哪些 branches 已經 merge 過，如果沒有特殊理由就可以刪除了。也可以把刪除的動作寫在 script 讓他自動化，不過我這邊選擇保留一些手動的彈性。</p>

<p>再來是檢查哪些 branches 已經開很久了(開超過一個月)，卻又沒有 merge 進主幹，這時管理者可以看一下這些 branches 是否已經不再使用，可以刪除。</p>

<div><script src='https://gist.github.com/3246217.js?file='></script>
<noscript><pre><code>#!/usr/bin/env ruby
require 'rubygems'
require 'active_support'

merged = `cd /home/m/git/repositories/miiicasa.git &amp;&amp; git branch --merged master | grep -v master`
not_merged_cmd = 'cd /home/m/git/repositories/miiicasa.git &amp;&amp; git branch | grep -v master | grep -v support | grep -v qa'
for line in merged.split(&quot;\n&quot;)
  not_merged_cmd += '| grep -v ' + line
end
puts &quot;This is a regular check of miiiCasa.git branches\n&quot;
puts &quot;List below are branches already been merged into [master]:&quot;
puts &quot;Please check if they are still needed, grb delete them otherwise.\n&quot;
puts merged

puts &quot;\n--------------------\n\n&quot;

puts 'List below are branches order than 1 month and have NOT been merged into [master]:'
puts &quot;Please check if they are abandoned or forgotten.&quot;
not_merged = `#{not_merged_cmd}`
for line in not_merged
  date =  /\S+_([0-9]+)_/.match(line)[1]
  puts line if 1.month.ago &gt; Date.parse(date)
end</code></pre></noscript></div>


<p>我們團隊對於 branch 命名有規定，中間一定是八位數字的日期，例如 feature_20120812_sthcool 以便分辨這個 branch 的開創時間。如果沒有這樣的命名規定的話，也可以透過下面這樣的 script 來找出最後 active 的時間。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for k in `git branch|perl -pe s/^..//`;do echo -e `git show --pretty=format:"%Cgreen%ci %Cblue%cr%Creset" $k|head -n 1`\\t$k;done|sort -r</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 mitmproxy 替換 request host 和 port]]></title>
    <link href="http://blog.hsatac.net/2012/08/mitmproxy-modify-request-host-and-port-howto/"/>
    <updated>2012-08-09T11:25:00+08:00</updated>
    <id>http://blog.hsatac.net/2012/08/mitmproxy-modify-request-host-and-port-howto</id>
    <content type="html"><![CDATA[<p>常在開發或測試階段會有更換 http request host 的需求。
簡單一點的方法就是直接更改 /etc/hosts 檔案。但如果連 port 都需要轉，那就需要其他方式了。</p>

<p>一般在 windows 上是推薦 <a href="http://www.fiddler2.com">fiddler 2</a> 這套軟體，非常好用。可以參考 <a href="http://blog.xuite.net/vexed/tech/62341108">vexed 的文章</a>。</p>

<p>不過在其他平台，可以使用 <a href="http://mitmproxy.org">mitmproxy</a> 這套軟體，他是 CUI 介面，操作上沒有 fiddler 那樣直覺，但稍微看一下說明即可上手。</p>

<p>mitmproxy 提供許多 API 讓使用者自訂需求，都使用 Python 來編寫。不過關於 script 的 document 較少，可以參考<a href="http://mitmproxy.org//doc/scripts.html">官方說明</a>有簡單的範例，或者使用 <code>pydoc libmproxy.flow.Request</code> 這樣的指令來查閱，再不然就只能直接看<a href="https://github.com/cortesi/mitmproxy/">原始碼</a>了。</p>

<!--more-->


<p>使用方法很簡單，首先開一個檔案例如 mitmproxy.py</p>

<div><script src='https://gist.github.com/3300699.js?file='></script>
<noscript><pre><code>def request(context, flow):
    if &quot;miiicasa.com&quot; in flow.request.host:
        flow.request.host = &quot;192.168.254.9&quot;
        flow.request.port = &quot;50113&quot;</code></pre></noscript></div>


<p>開啟 mitmproxy 的時候帶參數 -s <code>mitmproxy -s mitmproxy.py</code> 或者進入 mitmproxy 後按快速鍵 s 輸入 mitmproxy.py 載入即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git 救回已刪除的檔案]]></title>
    <link href="http://blog.hsatac.net/2012/07/git-restore-removed-files/"/>
    <updated>2012-07-28T20:30:00+08:00</updated>
    <id>http://blog.hsatac.net/2012/07/git-restore-removed-files</id>
    <content type="html"><![CDATA[<p>在 Git 操作的過程中，有些檔案是無法用 git checkout 救回來的。這些稱之為 unreachable files 。例如你 git add 了，但還沒 commit 就 pull ，這時這些檔案會被刪除，但因為沒有 commit 所以無法用 reset 救回。並且在 git reflog 裡面也不會有紀錄。</p>

<p>還好 Git 非常萬能，可以使用 <code>git fsck --cache --unreachable</code> 會列出一堆檔案的 bash ，再使用 <code>git show &lt;hash&gt;</code> 逐一檢視檔案內容即可救回失去的檔案。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP openssl_pkey_get_details implement in c]]></title>
    <link href="http://blog.hsatac.net/2012/06/php-openssl-pkey-get-details-implement-in-c/"/>
    <updated>2012-06-14T10:49:00+08:00</updated>
    <id>http://blog.hsatac.net/2012/06/php-openssl-pkey-get-details-implement-in-c</id>
    <content type="html"><![CDATA[<p>It&#8217;s easy to generate a RSA keypair in PHP, just like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>// Create the keypair
</span><span class='line'>$res=openssl_pkey_new();
</span><span class='line'>
</span><span class='line'>// Get private key
</span><span class='line'>openssl_pkey_export($res, $privkey);
</span><span class='line'>
</span><span class='line'>// Get public key
</span><span class='line'>$pubkey=openssl_pkey_get_details($res);
</span><span class='line'>$pubkey=$pubkey["key"];
</span><span class='line'>?&gt;</span></code></pre></td></tr></table></div></figure>


<p>But when it comes to C, it&#8217;s not that simple.</p>

<p>You might want to use <code>RSA_generate_key</code> and then <code>PEM_write_RSAPublicKey</code>, but in fact, the output format of PHP&#8217;s <code>openssl_pkey_get_details</code> is not a RSA public key.</p>

<p>If you want to get the same result in C, you have to convert your RSA keypair into EVP keypair.</p>

<!--more-->


<p>Here&#8217;s my sample script:</p>

<div><script src='https://gist.github.com/2909583.js?file='></script>
<noscript><pre><code>/*
example of c equivalent to php
&lt;?php
// Create the keypair
$res=openssl_pkey_new();

// Get private key
openssl_pkey_export($res, $privkey);

// Get public key
$pubkey=openssl_pkey_get_details($res);
$pubkey=$pubkey[&quot;key&quot;];
?&gt;
*/
#include&lt;stdio.h&gt;
#include&lt;openssl/rsa.h&gt;
#include&lt;openssl/evp.h&gt;

EVP_PKEY *pubkey_a,*privkey_a;

generate_keys ()
{
  RSA *rsa, *pub_rsa, *priv_rsa;
  int len;
  unsigned char *buf, *p;

  rsa = RSA_generate_key (1024, RSA_F4, NULL, (char *) stdout);

  buf = (char *) malloc (2048);

  p = buf;

  len = i2d_RSAPublicKey (rsa, &amp;p);
  len += i2d_RSAPrivateKey (rsa, &amp;p);

  RSA_free (rsa);

  p = buf;
  pub_rsa = d2i_RSAPublicKey (NULL, &amp;p, (long) len);
  len -= (p - buf);
  priv_rsa = d2i_RSAPrivateKey (NULL, &amp;p, (long) len);

  if ((pub_rsa == NULL) || (priv_rsa == NULL))
    ERR_print_errors_fp (stderr);


  pubkey_a = EVP_PKEY_new ();
  privkey_a = EVP_PKEY_new ();

  EVP_PKEY_set1_RSA (pubkey_a, pub_rsa);
  EVP_PKEY_set1_RSA (privkey_a, priv_rsa);

  RSA_free (pub_rsa);
  RSA_free (priv_rsa);

}

main()
{   

  EVP_PKEY *pubkey,*privkey;

  generate_keys ();

  pubkey=pubkey_a;
  privkey=privkey_a;

  PEM_write_PUBKEY(stdout, pubkey);
  return 0;
 
}</code></pre></noscript></div>


<p>You can test it by folloing commands:
<code>gcc -o key key.c -lssl &amp;&amp; ./key</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 ec2 的 Name tag 設定 hostname]]></title>
    <link href="http://blog.hsatac.net/2012/06/set-ec2-hostname-from-name-tag/"/>
    <updated>2012-06-07T15:50:00+08:00</updated>
    <id>http://blog.hsatac.net/2012/06/set-ec2-hostname-from-name-tag</id>
    <content type="html"><![CDATA[<p>如果 hostname 每一台都要自己一一指定相當麻煩，寫了一個小 script 放在開機時執行，抓取 instance-id 後取得 Name tag 再設定成 hostname。</p>

<div><script src='https://gist.github.com/2887240.js?file='></script>
<noscript><pre><code>#!/usr/bin/env ruby
require 'rubygems'
require 'aws-sdk'

instance_id = `wget &quot;http://169.254.169.254/latest/meta-data/instance-id&quot; -o /dev/null -O /dev/stdout`
config = {:access_key_id =&gt; '',
          :secret_access_key =&gt; ''}
AWS.config(config)
ec2 = AWS::EC2.new
ec2 = ec2.regions['ap-northeast-1']
hostname = ec2.instances[instance_id].tags.to_h[&quot;Name&quot;]
`hostname #{hostname}`</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[動態產生 ec2 的 hosts 檔案]]></title>
    <link href="http://blog.hsatac.net/2012/06/generate-aws-ec2-hosts-file/"/>
    <updated>2012-06-07T11:43:00+08:00</updated>
    <id>http://blog.hsatac.net/2012/06/generate-aws-ec2-hosts-file</id>
    <content type="html"><![CDATA[<p>這個議題類似上一篇 <a href="http://blog.hsatac.net/2012/06/aws-ec2-setup-dynamic-dns-using-route-53/">利用 Route 53 設定 Ec2 動態 DNS</a> ，同樣也是要解決主機名稱對應浮動 ip 的問題。</p>

<p>雖然現在用完整域名已經可以對應到 ip ，但是還是有很多時候我們的主機需要知道主機名稱和 ip 的對應。</p>

<p>這個問題大概也是可以用 hosts 或 dns 來解決，不過由於我已經把 yp nis 架設起來，其他機器可以直接吃 nis 伺服器的 hosts 檔案，所以決定用 hosts 這個方式來處理。</p>

<p>概念很簡單，利用 ec2 api sdk 抓取正在運行的主機列表，一一寫入 /etc/hosts 後再重新 make yp 的資料庫。</p>

<p>設個排程每個小時跑一下或開新機器時手動執行一下即可。</p>

<p>script 如下：</p>

<div><script src='https://gist.github.com/2881131.js?file='></script>
<noscript><pre><code>#!/usr/bin/env ruby
# coding: utf-8
require 'rubygems'
require 'aws-sdk'

config = {:access_key_id =&gt; '',
          :secret_access_key =&gt; ''}
AWS.config(config)
ec2 = AWS::EC2.new
ec2 = ec2.regions['ap-northeast-1']

hosts = []
hosts &lt;&lt; &quot;127.0.0.1\tlocalhost localhost.localdomain&quot;
ec2.instances.each do |instance|
  next unless instance.status == :running
  tags = instance.tags.to_h
  hosts &lt;&lt; &quot;#{instance.private_ip_address}\t#{tags[&quot;Name&quot;]}&quot;
end

`cp -p /etc/hosts /etc/hosts.bak`
open(&quot;/etc/hosts.new&quot;, &quot;w&quot;) {|f| f.write hosts.join(&quot;\n&quot;)+&quot;\n&quot;}
is_same = system(&quot;diff -q /etc/hosts.new /etc/hosts &gt; /dev/null 2&gt;/dev/null&quot;)
unless is_same
  `cp -p /etc/hosts.new /etc/hosts`
end</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用 route 53 設定 ec2 動態 DNS]]></title>
    <link href="http://blog.hsatac.net/2012/06/aws-ec2-setup-dynamic-dns-using-route-53/"/>
    <updated>2012-06-06T14:44:00+08:00</updated>
    <id>http://blog.hsatac.net/2012/06/aws-ec2-setup-dynamic-dns-using-route-53</id>
    <content type="html"><![CDATA[<p>最近在玩 aws ec2 第一個一定會碰到的問題就是 ip 都是動態的，每次開機都不一樣。造成大部分的佈署方式會有問題，一般都是用動態 dns 來解決，原本想自己架 bind 或 djbdns ，但是架好以後還要處理動態 dns 更新的機制，於是把想法動到價格低廉的 route 53 身上，他有完整的 restful api 應該很符合我的需求。</p>

<p>找到這個 <a href="http://www.linkdata.se/downloads/sourcecode/other/route53-dyndns.sh">script</a> 是利用 http://checkip.dyndns.com 來抓取自己 ip 再更新 route 53 的 A record 。</p>

<p>不過 ec2 的 public dns 有一個特性，從外面解會解到 public ip ，但是從裡面解會解到 private ip ，同一個 availability zone 用 private ip 互連是不多收費的。</p>

<p>如果設 A record 使用 public 連線，就沒有這個優勢了，所以我改用 CNAME 指到 ec2 的 public dns。然後原本取得 ip 的部分也改用 aws 取 meta-data 就可以了。</p>

<p>具體作法，可以開一個 subdomain 例如 ec2.hsatac.net ，然後把這個 subdomain delegate 給我們的 route 53 來解析。在 DNS 的部分新增一筆 NS  <code>ec2.hsatac.net</code> 然後 server 設定為 route 53 給的那幾組即可。</p>

<!-- more -->


<p>修改過後的 script 如下：</p>

<div><script src='https://gist.github.com/2880516.js?file='></script>
<noscript><pre><code>#!/bin/sh

# Setup dynamic dns on Route 53 for aws ec2 (CNAME)
#
# Modified from Johan Lindh's script
#
# Script requirements:
#
#  wget
#  grep
#  sed
#  dig
#  cut
#  openssl
#  base64
#
# Most if not all of these come standard on *nix distros.
#

# The domain and host name to update
# and the desired TTL of the record
Domain=your.domain.net
Hostname=`hostname`
NewTTL=600

# The Amazon Route 53 zone ID for the domain
# and the Amazon ID and SecretKey. Remember to
# ensure that this file can't be read by
# unauthorized people!
ZoneID=Z1234567890
AmazonID=A1234567890
SecretKey=GR$WYTJ%Y$@GY%J$%GY@H

# Enter the URL used to check extern IP
CheckIPURL='http://169.254.169.254/latest/meta-data/public-hostname'

# Enter some static text that immediately preceeds the current IP in the HTML output
# Note that you'll probably need to look at the actual HTML code to find this
CheckIPText='Current IP Address:'

###############################################################
# You should not need to change anything beyond this point
###############################################################

# Find an authoritative AWS R53 nameserver so we get a clean TTL
AuthServer=$(dig NS $Domain | grep -v ';' | grep -m 1 awsdns | grep $Domain | cut -f 6)
if [ &quot;$AuthServer&quot; = &quot;&quot; ]; then
  echo The domain $Domain has no authoritative Amazon Route 53 name servers
  exit 1
fi

# Get the record and extract its parts
Record=$(dig @$AuthServer A $Hostname.$Domain | grep -v &quot;;&quot; | grep &quot;$Hostname\.$Domain&quot;)
OldType=$( echo $Record | cut -d ' ' -f 4 )
OldTTL=$( echo $Record | cut -d ' ' -f 2 )
OldIP=$( echo $Record | cut -d ' ' -f 5 | sed s/.$//)

# Make sure it is an A record (could be CNAME)
if [ &quot;$Record&quot; != &quot;&quot; -a &quot;$OldType&quot; != &quot;CNAME&quot; ]; then
  echo $Hostname.$Domain has a $OldType record, expected 'CNAME'
  exit 1
fi

# Retrieve the current IP
CurrentIP=$(wget &quot;$CheckIPURL&quot; -o /dev/null -O /dev/stdout)

# Changeset preamble
Changeset=&quot;&quot;
Changeset=$Changeset&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;&quot;
Changeset=$Changeset&quot;&lt;ChangeResourceRecordSetsRequest xmlns=\&quot;https://route53.amazonaws.com/doc/2010-10-01/\&quot;&gt;&quot;
Changeset=$Changeset&quot;&lt;ChangeBatch&gt;&lt;Comment&gt;Update $Hostname.$Domain&lt;/Comment&gt;&lt;Changes&gt;&quot;

if [ &quot;$OldIP&quot; != &quot;&quot; ]; then
  # Add a DELETE request to the changeset
  Changeset=$Changeset&quot;&lt;Change&gt;&quot;
  Changeset=$Changeset&quot;&lt;Action&gt;DELETE&lt;/Action&gt;&quot;
  Changeset=$Changeset&quot;&lt;ResourceRecordSet&gt;&quot;
  Changeset=$Changeset&quot;&lt;Name&gt;$Hostname.$Domain.&lt;/Name&gt;&quot;
  Changeset=$Changeset&quot;&lt;Type&gt;CNAME&lt;/Type&gt;&quot;
  Changeset=$Changeset&quot;&lt;TTL&gt;$OldTTL&lt;/TTL&gt;&quot;
  Changeset=$Changeset&quot;&lt;ResourceRecords&gt;&quot;
  Changeset=$Changeset&quot;&lt;ResourceRecord&gt;&quot;
  Changeset=$Changeset&quot;&lt;Value&gt;$OldIP&lt;/Value&gt;&quot;
  Changeset=$Changeset&quot;&lt;/ResourceRecord&gt;&quot;
  Changeset=$Changeset&quot;&lt;/ResourceRecords&gt;&quot;
  Changeset=$Changeset&quot;&lt;/ResourceRecordSet&gt;&quot;
  Changeset=$Changeset&quot;&lt;/Change&gt;&quot;
fi

# Add CREATE request to the changeset
Changeset=$Changeset&quot;&lt;Change&gt;&quot;
Changeset=$Changeset&quot;&lt;Action&gt;CREATE&lt;/Action&gt;&quot;
Changeset=$Changeset&quot;&lt;ResourceRecordSet&gt;&quot;
Changeset=$Changeset&quot;&lt;Name&gt;$Hostname.$Domain.&lt;/Name&gt;&quot;
Changeset=$Changeset&quot;&lt;Type&gt;CNAME&lt;/Type&gt;&quot;
Changeset=$Changeset&quot;&lt;TTL&gt;$NewTTL&lt;/TTL&gt;&quot;
Changeset=$Changeset&quot;&lt;ResourceRecords&gt;&quot;
Changeset=$Changeset&quot;&lt;ResourceRecord&gt;&quot;
Changeset=$Changeset&quot;&lt;Value&gt;$CurrentIP&lt;/Value&gt;&quot;
Changeset=$Changeset&quot;&lt;/ResourceRecord&gt;&quot;
Changeset=$Changeset&quot;&lt;/ResourceRecords&gt;&quot;
Changeset=$Changeset&quot;&lt;/ResourceRecordSet&gt;&quot;
Changeset=$Changeset&quot;&lt;/Change&gt;&quot;

# Close the changeset
Changeset=$Changeset&quot;&lt;/Changes&gt;&quot;
Changeset=$Changeset&quot;&lt;/ChangeBatch&gt;&quot;
Changeset=$Changeset&quot;&lt;/ChangeResourceRecordSetsRequest&gt;&quot;

if [ &quot;$OldIP&quot; != &quot;$CurrentIP&quot; ]; then
  # Get the date at the Amazon servers
  CurrentDate=$(wget -q -S https://route53.amazonaws.com/date -O /dev/null 2&gt;&amp;1 | grep Date | sed 's/.*Date: //')

  # Calculate the SHA1 hash and required headers
  Signature=$(echo -n $CurrentDate | openssl dgst -binary -sha1 -hmac $SecretKey | base64)
  DateHeader=&quot;Date: &quot;$CurrentDate
  AuthHeader=&quot;X-Amzn-Authorization: AWS3-HTTPS AWSAccessKeyId=$AmazonID,Algorithm=HmacSHA1,Signature=$Signature&quot;

  # Submit request
  Result=$(wget -nv --header=&quot;$DateHeader&quot; --header=&quot;$AuthHeader&quot; --header=&quot;Content-Type: text/xml; charset=UTF-8&quot; --post-data=&quot;$Changeset&quot; -O /dev/stdout -o /dev/stdout https://route53.amazonaws.com/2010-10-01/hostedzone/$ZoneID/rrset)

  if [ &quot;$?&quot; -ne &quot;0&quot; ]; then
    echo &quot;Failed to update $Hostname.$Domain: &quot;$Result
  fi
fi</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ssh vm with virsh console]]></title>
    <link href="http://blog.hsatac.net/2012/05/ssh-vm-with-virsh-console/"/>
    <updated>2012-05-02T16:29:00+08:00</updated>
    <id>http://blog.hsatac.net/2012/05/ssh-vm-with-virsh-console</id>
    <content type="html"><![CDATA[<p>最近在玩 kvm，當 guest vm 的 network 環境不確定的時候，可以用 virt-viewer vnc 進去作設定，但總有沒有 X 或不適合使用 GUI 的狀況。這時可以利用 virsh console 這個指令進行連線。不過在 guest vm 要先修改一下設定。</p>

<p>首先修改 guest vm 的 <code>/etc/grub.conf</code> ，把 kernel 那行最後加上 <code>console=tty0 console=ttyS0,1152200</code></p>

<p>例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kernel /vmlinuz-2.6.32-220.13.1.el6.centos.plus.x86_64 ro root=/dev/mappp
</span><span class='line'>er/vg_w2vm001-lv_root rd_NO_LUKS  KEYBOARDTYPE=pc KEYTABLE=us LANG=en_US.UTF-8 rr
</span><span class='line'>d_LVM_LV=vg_w2vm001/lv_swap rd_NO_MD quiet rd_LVM_LV=vg_w2vm001/lv_root rhgb craa
</span><span class='line'>shkernel=auto SYSFONT=latarcyrheb-sun16 rd_NO_DM console=tty0 console=ttyS0,1152200</span></code></pre></td></tr></table></div></figure>


<p>重開 guest vm 之後，在 host 就可以用 <code>virsh console &lt;domain&gt;</code> 直接連到 ssh terminal 啦。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 CentOS 5 上安裝 Python26, hg, mercurial-server]]></title>
    <link href="http://blog.hsatac.net/2012/04/python26-hg-mercurial-server-on-centos-5/"/>
    <updated>2012-04-13T10:41:00+08:00</updated>
    <id>http://blog.hsatac.net/2012/04/python26-hg-mercurial-server-on-centos-5</id>
    <content type="html"><![CDATA[<p>筆記一下在 CentOS 5 上設定 Python 2.6, hg 以及 mercurial-server。</p>

<p>CentOS 套件庫裡面有 hg ，不過版本很舊，而且 mercurial-server 的 hook 部分會需要 python 2.5+ 的特性，而官方套件庫裡的 hg 相依於 python 2.4，因此套件庫裡面的 hg 就不合用了。</p>

<h2>安裝 Python 2.6 + hg</h2>

<ul>
<li>先 <code>sudo yum install python26 python26-devel</code> 從 epel 安裝 python 2.6</li>
<li>抓下最新的 hg source <code>wget http://mercurial.selenic.com/release/mercurial-2.1.2.tar.gz</code> 解壓後不要急著 make，先修改一下 Makefile</li>
<li>line 9 的 PYTHON 改成 <code>PYTHON=python26</code> 讓他抓 python 2.6</li>
<li><p>doc 的部份應該是缺 docutils 所以會出錯，不需要 doc 直接砍掉：line 33 改為 <code>all: build</code>, line 53 改為 <code>install: install-bin</code></p></li>
<li><p>接著就可以 <code>make all &amp;&amp; su -c "make install" &amp;&amp; hg version</code></p></li>
</ul>


<h2>安裝 mercurial-server</h2>

<ul>
<li>抓下最新 mercurial-server 原始碼解壓</li>
<li>一樣先修改 Makefile， doc 的部份一樣移除： line 53 改為 <code>installfiles: install pythoninstall</code></li>
<li>CentOS 的 useradd 不支援 <code>--system</code>，把 <code>--system</code> 改成 <code>-r</code>。如果 repositories 的 path 想改可以順便修改 <code>--home</code> 的值。</li>
<li>修改完後 <code>sudo make setup-useradd</code> 就安裝好了</li>
</ul>


<h2>設定 mercurial-server</h2>

<ul>
<li>先把自己的 public key 放到 <code>/etc/mercurial-server/keys/root/</code> 下，接著要改用 hgadmin 這個 repo 來設定</li>
<li>check out hgadmin 這個 repo <code>hg clone ssh://hg@localhost/hgadmin</code></li>
<li>把 <code>/etc/mercurial-server/keys</code> 和 <code>etc/mercurial-server/access.conf</code> 複製過來。</li>
<li>add, commit 後 push，以後就可以用這個 repo 來管理使用者和權限了。</li>
<li>原本的 <code>/etc/mercurial-server/access.conf</code> 和 <code>/etc/mercurial-server/keys</code> 就可以刪除了。</li>
</ul>


<h3>Redmine + hg</h3>

<p>順便講一下 Redmine 和 hg 搭配，如果設定好後在 repositories 分頁一直 404，看 log 顯示 <code>hg: error during getting info: hg exited with non-zero status: 255</code> 的話，多半是檔案權限問題。</p>

<p>可以修改 <code>redmine/config/environment.rb</code> 打開 <code>config.log_level = :debug</code> 看更詳細的 log</p>

<p>應該可以看到實際執行的 hg 指令，用 redmine user 去執行看看就能抓出問題所在。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[把 Git 中的目錄搬到另一個 Git 並保留 commit]]></title>
    <link href="http://blog.hsatac.net/2012/04/moving-files-from-one-git-repository-to-another-keeping-commit-history/"/>
    <updated>2012-04-03T21:43:00+08:00</updated>
    <id>http://blog.hsatac.net/2012/04/moving-files-from-one-git-repository-to-another-keeping-commit-history</id>
    <content type="html"><![CDATA[<p>今天在 refactor 公司的 git repository 時，有個需求，是要把原本 A repository 的其中一個目錄抽出來，獨立成 B repository。</p>

<p>原本以為這個需求無法達成，不過做了點研究以後發現是可行的，甚至 B repository 是已存在的 repository 也可以做到！</p>

<p>先說獨立出新的 repository 這個狀況，很簡單，先 git clone 出一個乾淨的 A repository 然後 <code>git remote rm origin</code> 不要 track remote。</p>

<p>接著在 git 根目錄下 <code>git filter-branch --subdirectory-filter &lt;目錄&gt; -- --all</code> 你就會看到這個目錄以外的東西都不見了，而且相關的 commit log 還在。</p>

<p>如果是要獨立出一個新的 repository 做到這邊就可以結束了。</p>

<p>接著講要把檔案和 commit log 匯到已存在的 B repository：接續上一步，用 <code>mkdir &lt;你要的目錄&gt;; mv * &lt;你要的目錄&gt;</code> 把抽出來的檔案都移到你預想要放的目錄 <code>git add .; git commit</code> 後 <code>cd ..</code> 再用 git clone 把 B repository clone 出來，切到 B repository 的目錄，用 add local repository as remote 的方式 <code>git remote add repoA ../&lt;A repo 的目錄&gt;</code> 然後 <code>git pull repoA master</code> 就完成了。</p>

<p>參考：<a href="http://gbayer.com/development/moving-files-from-one-git-repository-to-another-preserving-history/">Moving Files from one Git Repository to Another, Preserving History</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode 4.3 publish ipa for testflight]]></title>
    <link href="http://blog.hsatac.net/2012/03/xcode-4-dot-3-publish-ipa-for-testflight/"/>
    <updated>2012-03-07T10:05:00+08:00</updated>
    <id>http://blog.hsatac.net/2012/03/xcode-4-dot-3-publish-ipa-for-testflight</id>
    <content type="html"><![CDATA[<p>這兩天在研究 testflight 碰到了一點 Xcode 4.3 的小雷，記錄一下。</p>

<p>按照 testflight 的教學上傳 ipa 檔，一直出現 <code>mismatched-ubiquitykvstore-identifier-value</code> 的錯誤，但是憑證已經確認多次，肯定沒有問題。</p>

<p>翻了一下應該是 APP ID enable iCloud 的問題，但是不能 disable 掉的狀況，只好自己去 entitlement 補上需要的參數。</p>

<p>Xcode 4.3 的 entitlement 換地方了。</p>

<ul>
<li>請到 target 的 summary tab 拉到最底下找到 entitlement 區塊，勾選 <code>enable Entitlement</code>。</li>
<li><code>iCloud key-value Store</code> 這個欄位填上 <code>.*</code></li>
<li><code>iCloud Container</code> 這個部分自己加一個值 <code>.*</code></li>
</ul>


<p>存檔後你的專案就會多一個 <code>專案名.entitlements</code> 的檔案，打開確認一下內容是否有</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;key&gt;com.apple.developer.ubiquity-container-identifiers&lt;/key&gt;
</span><span class='line'> &lt;array&gt;
</span><span class='line'>     &lt;string&gt;$(TeamIdentifierPrefix).*&lt;/string&gt;
</span><span class='line'> &lt;/array&gt;
</span><span class='line'> &lt;key&gt;com.apple.developer.ubiquity-kvstore-identifier&lt;/key&gt;
</span><span class='line'> &lt;string&gt;$(TeamIdentifierPrefix).*&lt;/string&gt;</span></code></pre></td></tr></table></div></figure>


<p>再做 Archive, Share 成 ipa 檔上傳就可以了。</p>

<p><em>2012/04/42 補充</em></p>

<p>用 .* 的 key 送審 AppStore 時會被 reject，請設成跟你的 bundle identifier 一樣即可。</p>

<p>也就是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;key&gt;com.apple.developer.ubiquity-container-identifiers&lt;/key&gt;
</span><span class='line'> &lt;array&gt;
</span><span class='line'>     &lt;string&gt;$(TeamIdentifierPrefix)com.yourcompany.coolapp&lt;/string&gt;
</span><span class='line'> &lt;/array&gt;
</span><span class='line'> &lt;key&gt;com.apple.developer.ubiquity-kvstore-identifier&lt;/key&gt;
</span><span class='line'> &lt;string&gt;$(TeamIdentifierPrefix)com.yourcompany.coolapp&lt;/string&gt;</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP-Resque Auto Scale Workers]]></title>
    <link href="http://blog.hsatac.net/2012/02/php-resque-auto-scale-workers/"/>
    <updated>2012-02-02T14:56:00+08:00</updated>
    <id>http://blog.hsatac.net/2012/02/php-resque-auto-scale-workers</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/chrisboulton/php-resque">PHP-Resque</a> is an amazing PHP port of <a href="http://github.com/defunkt/resque/">Resque</a>. After playing it for a while, an idea crossed my mind: It&#8217;s a total waste to create numbers of workers when there&#8217;s not many jobs to do. How about auto scale it? With the EventListener design of PHP-Resque, we could achieve it by writing some simple hooks.</p>

<p>Also, it solved <a href="https://github.com/chrisboulton/php-resque/issues/32">issue #32 of PHP-Resque</a>.</p>

<p>Here&#8217;s my code: <a href="https://github.com/hSATAC/php-resque-auto-scale">PHP-Resque Auto Scale</a></p>

<h2>Introduction</h2>

<p>This is a project trying to build an auto scale architecture of PHP-Resque.</p>

<!-- more -->


<h2>Design</h2>

<h3>Expected Behavior</h3>

<ul>
<li><p>Trigger <code>afterEnqueue</code> to check the total job number of this queue.</p></li>
<li><p>If the number larger than <code>15</code> than check the total number of workers involved in this queue.</p></li>
<li><p>If the worker number is not enough, create one or more workers.</p>

<ul>
<li><p>If there are more than one server, divided the number equally to each server.</p></li>
<li><p>In the mean time, try to create workers that deal the same queues on each server.</p></li>
</ul>
</li>
<li><p>Trigger <code>beforeFork</code> to check the total job number and worker number, close the useless ones.</p></li>
</ul>


<h3>Number of Jobs and Workers</h3>

<ul>
<li><p>1~15 jobs => 1 worker</p></li>
<li><p>16~25 jobs => 2 workers</p></li>
<li><p>26~40 jobs => 3 workers</p></li>
<li><p>41~60 jobs => 4 workers</p></li>
<li><p>60+ jobs => 5 workers</p></li>
</ul>


<h2>Usage</h2>

<ul>
<li>You need to add the queue type as a member static variable to your Job class. Like this:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">PHP_Job</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">public</span> <span class="nv">$queue</span> <span class="o">=</span> <span class="s2">&quot;default&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Require <code>plugin.php</code> both in your resque init script and enqueue part.</p></li>
<li><p>Change the setting and code in <code>plugin.php</code> based on your need.</p></li>
<li><p>Start only one worker via your resque init script.</p></li>
<li><p>Now it&#8217;s auto-scalable.</p></li>
</ul>


<h2>Disclaimer</h2>

<p>For now it&#8217;s all experimental design.</p>

<p>All numbers and codes are not from production enviroments nor runned benchmarks. It&#8217;s just a prototype for now, but it does what it says.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Youtube 加入我的最愛後自動抓檔上傳至 Google Music]]></title>
    <link href="http://blog.hsatac.net/2012/01/youtube-favorite-add-google-music/"/>
    <updated>2012-01-17T19:33:00+08:00</updated>
    <id>http://blog.hsatac.net/2012/01/youtube-favorite-add-google-music</id>
    <content type="html"><![CDATA[<p>這個標題很冗長，不過正是 Youtube 加入我的最愛後自動抓檔上傳到 Google Music 。</p>

<p>這個需求是這樣來的，我常常在 Youtube 聽到喜歡的歌，習慣性按加入最愛，隨時可以拿出來重複播放。不過在最近都用 Google Music 來管理我的音樂庫，行進時也可以用 Android 上的 Google Music App 聆聽音樂。</p>

<p>但這樣一來，就要透過 Youtube Downloader 等網站或軟體抓下影片檔後再轉檔、上傳到 Google Music ，這樣實在是太麻煩了。</p>

<p>有沒有什麼方法可以把這個過程自動化呢？第一個想到的是利用 ifttt 。不過 ifttt 要達成這個功能需要繞許多彎路，最後決定自己寫一個。</p>

<!--more-->


<p>想法很簡單，大概分為四部分：</p>

<ul>
<li><p>讀取 Youtube 我的最愛</p></li>
<li><p>抓到有新增就取得資訊下載影片</p></li>
<li><p>透過 <code>ffmpeg</code> 之類轉為 mp3</p></li>
<li><p>透過 Google Music Manager 上傳</p></li>
</ul>


<p>做了一番 survey 後發現 <a href="https://github.com/rg3/youtube-dl">youtube-dl</a> 這個工具實在非常好用。他是用 python 寫的一個 script ，只要丟網址給他就會幫你下載。更棒的是他連 <code>ffmpeg</code> 都接好了，加上參數就可以直接輸出成 mp3 檔案。</p>

<p>抓取的指令是：</p>

<p><code>youtube-dl -o "%(title)s.%(ext)s" -q --extract-audio --audio-format "mp3" "[youtube_url]"</code></p>

<p>剩下的工作就只剩下讀取 Youtube 我的最愛，判斷加入的時間。想來應該很簡單，不過這部份卻卡了一兩個小時。</p>

<p>原因是 <strong>Youtube 的 API 寫的太不清楚啦！！！</strong></p>

<p>根據 <a href="http://code.google.com/intl/zh-TW/apis/youtube/2.0/developers_guide_protocol_favorites.html#Retrieving_favorite_videos">GData Youtube API</a> ：</p>

<blockquote><p>The <code>&lt;published&gt;</code> tag in a favorite videos feed entry identifies the time that the video was marked as a favorite and not the time that the video was published.</p></blockquote>

<p>用 <code>&lt;published&gt;</code> 這個欄位就可以取得這筆影片新增到我的最愛的時間，這樣就可以用來判斷是否是新加入的項目。</p>

<p>但是他從頭到尾沒有提到 <strong>這個 API 要用 v=2 來連這個欄位才會有效</strong> 這件事。如果沒有指定 version ，這個欄位出來的值是影片上傳時間，卡在這邊超久的啊。</p>

<p>總之用一個檔案來記錄上次抓取的時間，就可以達成原本的目的了。</p>

<p>記得最後把 Google Music Manager 設定成這個目錄，這樣轉好的 mp3 就會自動上傳到 Google Music 啦。</p>

<p>所有的程式碼在這裡。</p>

<p><a href="https://github.com/hSATAC/youtube-favorite-to-google-music">https://github.com/hSATAC/youtube-favorite-to-google-music</a></p>

<h3>附錄</h3>

<p>其實原本的需求是抓下來以後先存進 itunes 再上傳到 Google Music ，但是後來因為現在沒在用 itunes 所以簡化了。</p>

<p>如果有這個需求的朋友可以參考 <a href="http://dougscripts.com/itunes/itinfo/folderaction01.php">Folder Actions and iTunes</a> (Mac Only)。</p>

<p>對指定資料夾設定動作，當有新增音樂檔案到此資料夾的時候自動把檔案丟進 itunes 。再把 Google Music Manager 設定成自動上傳 itunes 新增的音樂即可。</p>

<p>之後可能會加上轉好 mp3 後加上 ID3 TAG 的功能吧，不過那又是另外一個故事了(遠目)。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redmine migration from Trac 0.12]]></title>
    <link href="http://blog.hsatac.net/2012/01/redmine-migrate-from-trac-0-dot-12/"/>
    <updated>2012-01-13T14:03:00+08:00</updated>
    <id>http://blog.hsatac.net/2012/01/redmine-migrate-from-trac-0-dot-12</id>
    <content type="html"><![CDATA[<p>This article will demostrate a near perfect redmine migration from trac 0.12 step by step.</p>

<ul>
<li><a href="http://www.redmine.org/projects/redmine/wiki/HowTo_install_Redmine_on_CentOS_5">Install Redmine on CentOS 5</a>

<ul>
<li>Install Ruby</li>
<li>Install rubygem</li>
<li>Install passenger

<ul>
<li>/etc/conf.d/ruby.conf</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LoadModule passenger_module /usr/lib/ruby/gems/1.8/gems/passenger-3.0.11/ext/apache2/mod_passenger.so
</span><span class='line'>PassengerRoot /usr/lib/ruby/gems/1.8/gems/passenger-3.0.11
</span><span class='line'>PassengerRuby /usr/bin/ruby</span></code></pre></td></tr></table></div></figure>


<pre><code>* /etc/httpd/conf.d/redmine.conf
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   &lt;VirtualHost *:80&gt;
</span><span class='line'>      ServerName redmine.miiicasa.com 
</span><span class='line'>      DocumentRoot /home/m/share/htdocs/redmine/public
</span><span class='line'>      &lt;Directory /home/m/share/htdocs/redmine/public&gt;
</span><span class='line'>         AllowOverride all    
</span><span class='line'>         Options -MultiViews    
</span><span class='line'>      &lt;/Directory&gt;
</span><span class='line'>   &lt;/VirtualHost&gt;</span></code></pre></td></tr></table></div></figure>


<!--more-->


<ul>
<li>Get Redmine source from <a href="https://github.com/miiicasa/redmine">miiiCasa github repo</a> (bundler integrated and migrate_from_trac.rake modified)</li>
<li>install bundler and bundle install</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo gem install bundler
</span><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Setup mysql database and user</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>create database redmine character set utf8;
</span><span class='line'>create user 'redmine'@'localhost' identified by 'my_password';
</span><span class='line'>grant all privileges on redmine.* to 'redmine'@'localhost';</span></code></pre></td></tr></table></div></figure>


<ul>
<li>cp config/database.yml.example config/database.yml and modify it based on previous settings.</li>
<li>cp config/configure.yml.example config/configure.yml and modify it.</li>
<li>Generate the session store</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RAILS_ENV=production bundle exec rake generate_session_store</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Migrate the database models</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RAILS_ENV=production bundle exec rake db:migrate</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Load default data</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RAILS_ENV=production bundle exec rake redmine:load_default_data</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Migrate from trac

<ul>
<li>install sqlite3-ruby</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo gem install sqlite3-ruby</span></code></pre></td></tr></table></div></figure>


<ul>
<li>migrate from trac</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RAILS_ENV=production bundle exec rake redmine:migrate_from_trac
</span><span class='line'>...
</span><span class='line'>Are you sure you want to continue ? [y/N] y                     
</span><span class='line'>
</span><span class='line'>Trac directory []: /var/www/trac/miiicasa
</span><span class='line'>Trac database adapter (sqlite, sqlite3, mysql, postgresql) [sqlite3]:
</span><span class='line'>Trac database encoding [UTF-8]: 
</span><span class='line'>Target project identifier []: miiicasa</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>git clone https://github.com/xfalcons/migrate-trac-to-redmine.git
Follow the instruction.</p></li>
<li><p>Setup Redmine</p>

<ul>
<li>Make all users admin:</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ RAILS_ENV=production ./script/console
</span><span class='line'>..
</span><span class='line'>for u in User.all
</span><span class='line'>  u.admin = true
</span><span class='line'>  u.save
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Login and setup scm path</li>
<li>Load git repo from script (prevent timeout)</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ruby script/runner "Repository.fetch_changesets" -e production</span></code></pre></td></tr></table></div></figure>


<p>  This action could take a very long time (maybe 1 day) and it got no progress bar nor any output. If you want to check where it went, try:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ps axww | grep git | grep -v grep</span></code></pre></td></tr></table></div></figure>


<p>  You&#8217;ll see it&#8217;s parsing git log.</p>
]]></content>
  </entry>
  
</feed>
