<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[hSATAC]]></title>
  <link href="http://blog.hsatac.net/atom.xml" rel="self"/>
  <link href="http://blog.hsatac.net/"/>
  <updated>2012-01-13T14:17:57+08:00</updated>
  <id>http://blog.hsatac.net/</id>
  <author>
    <name><![CDATA[hSATAC]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Redmine migration from Trac 0.12]]></title>
    <link href="http://blog.hsatac.net/2012/01/redmine-migrate-from-trac-0-dot-12/"/>
    <updated>2012-01-13T14:03:00+08:00</updated>
    <id>http://blog.hsatac.net/2012/01/redmine-migrate-from-trac-0-dot-12</id>
    <content type="html"><![CDATA[<p>This article will demostrate a near perfect redmine migration from trac 0.12 step by step.</p>

<ul>
<li><a href="http://www.redmine.org/projects/redmine/wiki/HowTo_install_Redmine_on_CentOS_5">Install Redmine on CentOS 5</a>

<ul>
<li>Install Ruby</li>
<li>Install rubygem</li>
<li>Install passenger

<ul>
<li>/etc/conf.d/ruby.conf</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LoadModule passenger_module /usr/lib/ruby/gems/1.8/gems/passenger-3.0.11/ext/apache2/mod_passenger.so
</span><span class='line'>PassengerRoot /usr/lib/ruby/gems/1.8/gems/passenger-3.0.11
</span><span class='line'>PassengerRuby /usr/bin/ruby</span></code></pre></td></tr></table></div></figure>


<pre><code>* /etc/httpd/conf.d/redmine.conf
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   &lt;VirtualHost *:80&gt;
</span><span class='line'>      ServerName redmine.miiicasa.com 
</span><span class='line'>      DocumentRoot /home/m/share/htdocs/redmine/public
</span><span class='line'>      &lt;Directory /home/m/share/htdocs/redmine/public&gt;
</span><span class='line'>         AllowOverride all    
</span><span class='line'>         Options -MultiViews    
</span><span class='line'>      &lt;/Directory&gt;
</span><span class='line'>   &lt;/VirtualHost&gt;</span></code></pre></td></tr></table></div></figure>


<!--more-->


<ul>
<li>Get Redmine source from <a href="https://github.com/miiicasa/redmine">miiiCasa github repo</a> (bundler integrated and migrate_from_trac.rake modified)</li>
<li>install bundler and bundle install</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo gem install bundler
</span><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Setup mysql database and user</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>create database redmine character set utf8;
</span><span class='line'>create user 'redmine'@'localhost' identified by 'my_password';
</span><span class='line'>grant all privileges on redmine.* to 'redmine'@'localhost';</span></code></pre></td></tr></table></div></figure>


<ul>
<li>cp config/database.yml.example config/database.yml and modify it based on previous settings.</li>
<li>cp config/configure.yml.example config/configure.yml and modify it.</li>
<li>Generate the session store</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RAILS_ENV=production bundle exec rake generate_session_store</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Migrate the database models</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RAILS_ENV=production bundle exec rake db:migrate</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Load default data</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RAILS_ENV=production bundle exec rake redmine:load_default_data</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Migrate from trac

<ul>
<li>install sqlite3-ruby</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo gem install sqlite3-ruby</span></code></pre></td></tr></table></div></figure>


<ul>
<li>migrate from trac</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RAILS_ENV=production bundle exec rake redmine:migrate_from_trac
</span><span class='line'>...
</span><span class='line'>Are you sure you want to continue ? [y/N] y                     
</span><span class='line'>
</span><span class='line'>Trac directory []: /var/www/trac/miiicasa
</span><span class='line'>Trac database adapter (sqlite, sqlite3, mysql, postgresql) [sqlite3]:
</span><span class='line'>Trac database encoding [UTF-8]: 
</span><span class='line'>Target project identifier []: miiicasa</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>git clone https://github.com/xfalcons/migrate-trac-to-redmine.git
Follow the instruction.</p></li>
<li><p>Setup Redmine</p>

<ul>
<li>Make all users admin:</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ RAILS_ENV=production ./script/console
</span><span class='line'>..
</span><span class='line'>for u in User.all
</span><span class='line'>  u.admin = true
</span><span class='line'>  u.save
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Login and setup scm path</li>
<li>Load git repo from script (prevent timeout)</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ruby script/runner "Repository.fetch_changesets" -e production</span></code></pre></td></tr></table></div></figure>


<p>  This action could take a very long time (maybe 1 day) and it got no progress bar nor any output. If you want to check where it went, try:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ps axww | grep git | grep -v grep</span></code></pre></td></tr></table></div></figure>


<p>  You&#8217;ll see it&#8217;s parsing git log.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP-Resque 簡介]]></title>
    <link href="http://blog.hsatac.net/2012/01/php-resque-introduction/"/>
    <updated>2012-01-06T15:14:00+08:00</updated>
    <id>http://blog.hsatac.net/2012/01/php-resque-introduction</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/defunkt/resque">Resque</a> 是 github 基於 Redis 開發的 background job 系統。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 CentOs 5 上升級 Redis 2.4.5]]></title>
    <link href="http://blog.hsatac.net/2012/01/upgrade-redis245-on-centos5/"/>
    <updated>2012-01-05T13:51:00+08:00</updated>
    <id>http://blog.hsatac.net/2012/01/upgrade-redis245-on-centos5</id>
    <content type="html"><![CDATA[<p>CentOS 5 上的 Redis 套件只有到 2.0
最近用一套 <a href="https://github.com/chrisboulton/php-resque">PHP-Resque</a> 需求 Redis 2.2 以上，只好手動升級了。</p>

<p>首先抓下最新穩定版解壓</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://redis.googlecode.com/files/redis-2.4.5.tar.gz
</span><span class='line'>tar zxvf redis-2.4.5.tar.gz
</span><span class='line'>cd redis-2.4.5
</span><span class='line'>make</span></code></pre></td></tr></table></div></figure>


<p>跟原本的 redis 2.0 裝在同一個目錄</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo make PREFIX=/usr install</span></code></pre></td></tr></table></div></figure>


<p>再把新的 config 檔蓋過去</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo cp redis.conf /etc/</span></code></pre></td></tr></table></div></figure>


<p>為了讓原本的 init script 正常運作
redis.conf 要稍微修改</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>daemonize yes
</span><span class='line'>...
</span><span class='line'>pidfile /var/run/redis/redis.pid</span></code></pre></td></tr></table></div></figure>


<p>原本 redis-server 是裝在 /usr/sbin 新的是裝在 /usr/bin
把 /usr/sbin/redis-server 覆蓋過去</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo mv /usr/bin/redis-server /usr/sbin/</span></code></pre></td></tr></table></div></figure>


<p>大功告成。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 scrpit 指令來紀錄輸出及輸入]]></title>
    <link href="http://blog.hsatac.net/2011/12/record-terminal-using-script/"/>
    <updated>2011-12-29T14:59:00+08:00</updated>
    <id>http://blog.hsatac.net/2011/12/record-terminal-using-script</id>
    <content type="html"><![CDATA[<p>假設我們現在要執行一個重要的動作，想要紀錄 terminal 下面每一個輸出和輸入，當然我們可以在每個指令後面用 <code>cmd &gt; filename</code> 把輸出導向 log 檔，但如果是一連串的動作時就很不方便了。</p>

<p>unix 系列內建一個指令叫 <code>script</code> ，他可以很方便的紀錄你每一個輸出和輸入。詳細用法可以參考 <code>man script</code> 。</p>

<p>在這邊講兩個常用的方法，一個是 <code>script log.txt</code> 會把紀錄存到 log.txt, 用 <code>script -a log.txt</code> 就可以把新的 log append 到檔案後，不會蓋掉原本檔案。當你動作結束，想停止紀錄時，只要打 <code>exit</code> 就可以停止紀錄。</p>

<p>另一個是 <code>script -C "ls -al" log.txt</code> 他會把你指定的指令存到 log.txt 中，這個用法的不需輸入 <code>exit</code> 。</p>

<p>如果你的 .bash_profile 裏面有用到一些自訂的函數例如 git-autocompletion 之類，那你在使用 script 的時候可能會發現每下一個指令都告訴你 <code>command not found</code>。正確的解法是把你的 function 移到 .bashrc 中，在 .bash_profile 裏面去 source .bashrc 即可。</p>

<p>最後說明一下 log 檔的觀看方式，因為 script 會把所有東西都紀錄下來，包括控制碼這些，所以可以用 <code>less -r log.txt</code> 或 <code>more log.txt</code> 來觀看。</p>

<p>如果需要把 log 的控制碼去掉，可以參考下面這個 script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1">#!/usr/bin/env perl</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="o">&lt;&gt;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="sr">s/ \e[ #%()*+\-.\/]. |</span>
</span><span class='line'><span class="sr">       (?:\e\[|\x9b) [ -?]* [@-~] | # CSI ... Cmd</span>
</span><span class='line'><span class="sr">       (?:\e\]|\x9d) .*? (?:\e\\|[\a\x9c]) | # OSC ... (ST|BEL)</span>
</span><span class='line'><span class="sr">       (?:\e[P^_]|[\x90\x9e\x9f]) .*? (?:\e\\|\x9c) | # (DCS|PM|APC) ... ST</span>
</span><span class='line'><span class="sr">       \e.|[\x80-\x9f] //xg</span><span class="p">;</span>
</span><span class='line'>    <span class="k">print</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim runtime 不需存檔檢查 PHP 語法]]></title>
    <link href="http://blog.hsatac.net/2011/12/vim-php-runtime-syntax-check-without-saving-file/"/>
    <updated>2011-12-22T17:29:00+08:00</updated>
    <id>http://blog.hsatac.net/2011/12/vim-php-runtime-syntax-check-without-saving-file</id>
    <content type="html"><![CDATA[<p>之前 vim PHP syntax check 都是跟存檔綁在一起，同事想要不用存檔就可以檢查，就弄了一下。</p>

<div><script src='https://gist.github.com/1496197.js?file='></script>
<noscript><pre><code>  set errorformat=%m\ in\ %f\ on\ line\ %l
  if !exists('*PHPsynCHK')
    function! PHPsynCHK()
      ccl
      let winnum = winnr()
      let linenum = line('.')
      let colnum = col('.')
      silent execute &quot;%!php -l -f /dev/stdin | sed 's/\\/dev\\/stdin/&quot;.bufname(&quot;%&quot;).&quot;/g' &gt;.vimerr; cat&quot;
      silent cf .vimerr
      cw
      execute winnum . &quot;wincmd w&quot;
      silent undo
      silent cf
      if 1 == len(getqflist())
         call cursor(linenum, colnum)
      endif
    endfunction
  endif
</code></pre></noscript></div>


<p>用法直接 <code>:call PHPsynCHK()</code> 即可，可以自己綁定熱鍵。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bash PS1 補滿]]></title>
    <link href="http://blog.hsatac.net/2011/12/bash-ps1-fill/"/>
    <updated>2011-12-20T16:00:00+08:00</updated>
    <id>http://blog.hsatac.net/2011/12/bash-ps1-fill</id>
    <content type="html"><![CDATA[<p>今天 Even Wu 在 facebook 上問了一個問題：他的 Bash PS1 要補滿 dash 到換行為止，感覺很有趣，稍微研究了一下。</p>

<p>首先要取得 term 的寬度，這個很容易直接抓 <code>$COLUMNS</code> 就好。</p>

<p>再來要抓原本 PS1 的長度，原本打算用 <code>$PWD</code> 去抓，不過 \w 碰到自己的家目錄會變 <code>~</code> 所以長度不對，這邊要自己處理一下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$HOME&quot;</span> <span class="o">==</span> <span class="s2">&quot;$PWD&quot;</span> <span class="o">]</span>
</span><span class='line'>  <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nv">newPWD</span><span class="o">=</span><span class="s2">&quot;~&quot;</span>
</span><span class='line'>  <span class="k">elif</span> <span class="o">[</span> <span class="s2">&quot;$HOME&quot;</span> <span class="o">==</span>  <span class="s2">&quot;${PWD:0:${#HOME}}&quot;</span> <span class="o">]</span>
</span><span class='line'>  <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nv">newPWD</span><span class="o">=</span><span class="s2">&quot;~${PWD:${#HOME}}&quot;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'><span class="k">    </span><span class="nv">newPWD</span><span class="o">=</span><span class="nv">$PWD</span>
</span><span class='line'>  <span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>然後塞成跟原本 PS1 一樣的 temp 字串來算長度，最後把 term width 減去 temp 就可以抓到長度了，再作補滿的動作即可。</p>

<p>最後結果如下：</p>

<div><script src='https://gist.github.com/1500143.js?file='></script>
<noscript><pre><code>function git_branch {
ref=$(git symbolic-ref HEAD 2&gt; /dev/null) || return;
echo &quot;(&quot;${ref#refs/heads/}&quot;) &quot;;
}

function git_since_last_commit {
now=`date +%s`;
last_commit=$(git log --pretty=format:%at -1 2&gt; /dev/null) || return;
seconds_since_last_commit=$((now-last_commit));
minutes_since_last_commit=$((seconds_since_last_commit/60));
hours_since_last_commit=$((minutes_since_last_commit/60));
minutes_since_last_commit=$((minutes_since_last_commit%60));

echo &quot;${hours_since_last_commit}h${minutes_since_last_commit}m &quot;;
}

unset temp

function prompt_command {

  if [ $HOME == $PWD ]
  then
    newPWD=&quot;~&quot;
  elif [ $HOME ==  ${PWD:0:${#HOME}} ]
  then
    newPWD=&quot;~${PWD:${#HOME}}&quot;
  else
    newPWD=$PWD
  fi

  TERMWIDTH=${COLUMNS}

  local temp=&quot;→ [ ${newPWD} ] $(git_branch)$(git_since_last_commit)&quot;
  let fillsize=${TERMWIDTH}-${#temp}
  if [ &quot;$fillsize&quot; -gt &quot;0&quot; ]
  then
    fill=&quot;----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&quot;
    fill=&quot;${fill:0:${fillsize}}&quot;
  fi
}

PROMPT_COMMAND=prompt_command
PS1=&quot;\[\033[1;31m\]→\[\033[0m\] \[\033[0;36m\][ \[\033[1;32m\]\${newPWD}\[\033[0;36m\] ] \[\033[0m\]\[\033[1;31m\]\$(git_branch)\[\033[0m\]\$(git_since_last_commit)\${fill}\n$ &quot;</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Logitech G300 on ArchLinux]]></title>
    <link href="http://blog.hsatac.net/2011/11/logitech-g300-on-archlinux/"/>
    <updated>2011-11-30T00:00:00+08:00</updated>
    <id>http://blog.hsatac.net/2011/11/logitech-g300-on-archlinux</id>
    <content type="html"><![CDATA[<p>前陣子入手了 Logitech G300 這支滑鼠，相當優秀。<br />
他的特色是把快速鍵記在滑鼠內，不需要安裝任何驅動程式。<br />
其原理是送出「真正的鍵盤訊號」，因此可以相容所有遊戲。</p>

<p>不過在我的 ArchLinux 下這支 G300 使用不太正常<br />
當我按下滑鼠鍵後，游標會飄移到螢幕左上方。<br />
經過測試後，判斷是他送出的 keyboard 訊號問題<br />
只要把 keyboard disable 掉就可以了。<!--more-->
<pre lang="bash">xinput list</pre>
應該可以看到各有一個 Logitech G300 的鍵盤和滑鼠，後面會有 id 例如 12
<pre lang="bash">xinput list-props 12</pre>
會看到類似
<pre lang="bash">Device Enabled (132)</pre>
再下
<pre lang="bash">xinput set-prop 12 132 0</pre>
就可以把這個裝置 disable 掉。</p>

<p>但是每次都要這樣查很麻煩，而且這號碼不是固定的<br />
所以我寫成 script 可以放在 xinitrc 裏面去自動執行
<pre lang="bash">#!/bin/sh
DEVICE_ID=`xinput list |  grep "Logitech Gaming Mouse G300" | grep keyboard | sed 's/.*id=\([0-9]*\).*/\1/'`

if xinput -list-props $DEVICE_ID | grep "Device Enabled" | grep "1$" &gt; /dev/null
then
    xinput set-int-prop $DEVICE_ID "Device Enabled" 8 0
fi
</pre>
接著還有一個小問題，就是每當機器 wake up 的時候，滑鼠又會跑掉了，那有沒有辦法在 wake up 時執行這段程式呢？<br />
在 /etc/pm/sleep.d/ 下<br />
新增一個 script 讓他去執行上一段程式就可以了。
<pre lang="bash">!/bin/sh
# 90G300: suspend/wakeup Logitech G300 devices

case "$1" in
hibernate|suspend)
;;
thaw|resume)
/home/cat/.xinitrc.d/50-logitech-g300-mouse
;;
*) exit $NA
;;
esac
</pre>

<p>這個 solution 也同步更新到 Archwiki 上，這就是社群的力量啊！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Archlinux 推廣]]></title>
    <link href="http://blog.hsatac.net/2011/11/archlinux/"/>
    <updated>2011-11-30T00:00:00+08:00</updated>
    <id>http://blog.hsatac.net/2011/11/archlinux</id>
    <content type="html"><![CDATA[<p><img class="alignnone" title="archlinux_logo" src="http://d11xdyzr0div58.cloudfront.net/main-20111101/media/logos/archlinux-logo-dark-90dpi.png" alt="" width="75%" /></p>

<p>一個月前，因為工作環境轉換，決定趁機開始使用 Linux 作為日常桌面環境。以往都用 ubuntu 但不甚滿意，這次決定試試看 Archlinux，果然沒有讓我失望。<!--more-->
<h1>Why Arch?</h1>
Archlinux 設計的理念是「簡單」、「正確」、「使用者至上」、「開放」、「自由」(參見 <a href="https://wiki.archlinux.org/index.php/The_Arch_Way_(%E6%AD%A3%E9%AB%94%E4%B8%AD%E6%96%87)" target="_blank">Arch 之道</a>)。</p>

<p>他採取滾動式升級 (rolling release system)，不再有每次大版本升級的噩夢。<br />
他的套件管理 pacman 相當優秀，更有社群貢獻的套件庫 AUR，安裝軟體簡單又不髒手。
<a href="https://wiki.archlinux.org/" target="_blank">Archwiki</a> 應該是網路上資料最豐富最齊全的 linux wiki 了，不管什麼疑難雜症都可以在裏面找到。<br />
Archlinux 安裝完是一個乾淨輕巧的系統，你可以依照自己的喜好打造自己的工作環境。
<h1>Install</h1>
一開始的安裝可以跟著這兩篇 wiki：
<ul>
	<li><a href="https://wiki.archlinux.org/index.php/Official_Installation_Guide" target="_blank">Official Installation Guide</a></li>
	<li><a href="https://wiki.archlinux.org/index.php/Beginners%27_Guide" target="_blank">Beginner&#8217;s Guide</a></li>
</ul>
其實安裝很簡單，光碟插進去以後下一步就結束了，不過選項還是要稍微看一下。
<h2>套件管理</h2>
安裝完以後先把 pacman mirror 只留台灣站，做一次系統升級 sudo pacman -Syu<br />
再想辦法安裝 AUR (Arch User Repositories) 輔助程式。<br />
比較有名的是 Yaourt 不過已經停止開發了，我推薦使用 packer。<br />
想辦法安裝 packer 以後，離成功就不遠啦！
<div>
<ul>
	<li><a href="https://wiki.archlinux.org/index.php/Pacman_(%E6%AD%A3%E9%AB%94%E4%B8%AD%E6%96%87)" target="_blank">pacman 說明</a></li>
	<li><a href="https://wiki.archlinux.org/index.php/AUR" target="_blank">AUR 說明</a></li>
	<li><a href="https://wiki.archlinux.org/index.php/AUR_Helpers" target="_blank">AUR helper 說明</a></li>
</ul>
</div>
<h2>桌面環境</h2>
桌面環境有許多選擇，例如 gnome, kde, xfce4, lxde 等等，可以按自己的喜好做選擇。<br />
安裝過程可以參考 archwiki，當然也有許多 Archlinux 分支出去，隨附 Desktop Environment 的發行版：<br />
例如 kde 的 <a href="http://chakra-linux.org/about.html" target="_blank">Chakra</a> 、gnome 的 <a href="http://www.kahelos.org/" target="_blank">KahelOS</a> 、openbox 的 <a href="http://archbang.org/" target="_blank">Archbang</a> 等等，這裡有<a href="https://wiki.archlinux.org/index.php/Arch_Based_Distributions_(Active)" target="_blank">清單一覽</a>。<br />
這些桌面發行版，除了簡化安裝流程外，通常也會針對桌面環境做設定和優化，想省時間的話不妨可以考慮。
<h2>中文使用</h2>
中文使用者的兩大問題不外乎就是字型和輸入法。<br />
字型的部份可以參考<a href="http://imxie.net/2010/06/basic-lcd-font-config-on-archlinux.htm" target="_blank">這篇文章</a>來做設定。<br />
我中文字型是選擇 Hiragino Sans GB ，從我的 Mac 上複製過來，效果非常好。<br />
輸入法的部份大概就 scim, gcin, ibus 選一套，ibus 我用不太習慣，用了一陣子 scim ，發現不是很穩定，目前改用 gcin ，使用狀況良好。
<h1>結語</h1>
本來有很多踩到的雷想寫，後來想想都太瑣碎了。<br />
玩 Arch 只要把握一個原則：查 wiki ，大概什麼問題都可以迎刃而解。<br />
Linux DE 的原罪就是選擇太多，通常要自己試用、設定後才能符合自己的需求。<br />
在這之中可能會有很多挫折，不過解決問題的過程也是一種喜悅。<br />
只要肯花時間，絕對能把環境打造到你喜歡的樣子。<br />
一起來享受 Arch 吧！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redmine + Bundler 復活記]]></title>
    <link href="http://blog.hsatac.net/2011/09/redmine-bundler-%E5%BE%A9%E6%B4%BB%E8%A8%98/"/>
    <updated>2011-09-30T00:00:00+08:00</updated>
    <id>http://blog.hsatac.net/2011/09/redmine-bundler-復活記</id>
    <content type="html"><![CDATA[<p>老實說，不記得之前是動了什麼，總之我的佈署 apache + passenger + ree 環境<br />
redmine 爆炸了。推測應該是 gem 的關係。<br />
上網看了一下， rails 2.3 只支援 rubygems 1.7<br />
就先把 rubygems downgrade 回來
<pre lang="bash">gem update --system 1.7</pre></p>

<p>和 tkalu, xdite, ihower, 以及小蟹詢問了各種可能的解決方案後<br />
確定我應該是要用 bundler 來管理一下 redmine 的 gems</p>

<p>根據 ihower 提供的資訊， redmine 有一個內建 bundler 的 fork 版<br />
搜尋了一下找到了 https://www.chiliproject.org/<br />
把他的 <a href="https://github.com/chiliproject/chiliproject/blob/unstable/Gemfile" target="_blank">Gemfile</a> 借過來一用</p>

<p>再按照 <a href="http://gembundler.com/rails23.html" target="_blank">Bundler 官網上的 Rails 2 教學</a>
來設定，果然成功把我的 redmine 救了回來！</p>

<p>chiliproject 的 Gemfile 可能要稍加修改，例如他用 rails 2.3.14，可以改成 redmine 官網支援的 2.3.11<br />
然後一些沒用到的 gem 例如 pg 可以移除。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rake 0.9 爆炸解法]]></title>
    <link href="http://blog.hsatac.net/2011/09/rake-0-9/"/>
    <updated>2011-09-20T00:00:00+08:00</updated>
    <id>http://blog.hsatac.net/2011/09/rake-0-9</id>
    <content type="html"><![CDATA[<p>由於 rake 0.9 跟之前的不相容，因此裝了以後大概都會碰到這堆錯誤：
<pre lang="bash">/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/version.rb:4: warning: already initialized constant MAJOR
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/version.rb:5: warning: already initialized constant MINOR
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/version.rb:6: warning: already initialized constant BUILD
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/version.rb:3: warning: already initialized constant NUMBERS
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/version.rb:9: warning: already initialized constant VERSION
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake.rb:26: warning: already initialized constant RAKEVERSION
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/early_time.rb:17: warning: already initialized constant EARLY
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/alt_system.rb:32: warning: already initialized constant WINDOWS
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/application.rb:28: warning: already initialized constant DEFAULT_RAKEFILES
WARNING: Possible conflict with Rake extension: String#ext already exists
WARNING: Possible conflict with Rake extension: String#pathmap already exists
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/task_arguments.rb:73: warning: already initialized constant EMPTY_TASK_ARGS
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/invocation_chain.rb:49: warning: already initialized constant EMPTY
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/file_utils.rb:10: warning: already initialized constant RUBY
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/file_utils.rb:84: warning: already initialized constant LN_SUPPORTED
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/dsl_definition.rb:143: warning: already initialized constant Commands
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/file_list.rb:44: warning: already initialized constant ARRAY_METHODS
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/file_list.rb:47: warning: already initialized constant MUST_DEFINE
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/file_list.rb:51: warning: already initialized constant MUST_NOT_DEFINE
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/file_list.rb:55: warning: already initialized constant SPECIAL_RETURN
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/file_list.rb:61: warning: already initialized constant DELEGATING_METHODS
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/file_list.rb:364: warning: already initialized constant DEFAULT_IGNORE_PATTERNS
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake/file_list.rb:370: warning: already initialized constant DEFAULT_IGNORE_PROCS
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake.rb:64: warning: already initialized constant FileList
/Users/cat/.rvm/gems/ruby-1.9.2-p290@global/gems/rake-0.9.2/lib/rake.rb:65: warning: already initialized constant RakeFileUtils
rake aborted!
stack level too deep</pre></p>

<p>(See full trace by running task with &#8211;trace)
<!--more--></p>

<p>解決的方法很簡單，你知道、我知道、獨眼龍也知道：就是 bundle exec rake</p>

<p>但是一直打一直打實在很煩。寫 Ruby 的時候，當你開始覺得有重複的打字作業的時候，就表示事情不太對勁了&#8230;&#8230;</p>

<p>那該怎麼辦呢？<del>你怎麼不問問神奇海螺呢？</del></p>

<p>Google 了一下，發現 <a href="http://ihower.tw/blog/archives/5762" target="_blank">ihower 的這個解法</a>不錯。</p>

<p>簡單說，在你的目錄下先下
<pre lang="bash">bundle install --binstubs</pre>
這個指令會把 Gemfile 裡面的執行檔安裝在專案目錄的 bin 目錄下面。</p>

<p>接著在專案目錄開一個 .rvmrc 裡面填
<pre lang="bash">export PATH="./bin:$PATH"</pre>
這樣當你執行 rake 的時候 rvm 就會幫你抓到專案目錄下的 bin 下的 rake 執行檔了！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CloudAAA 雲端大亂鬥簡記]]></title>
    <link href="http://blog.hsatac.net/2011/06/cloudaaa/"/>
    <updated>2011-06-23T00:00:00+08:00</updated>
    <id>http://blog.hsatac.net/2011/06/cloudaaa</id>
    <content type="html"><![CDATA[<p>這次 CloudAAA 活動是由 <a href="http://groups.google.com/group/cloudtw?pli=1">CloudTW</a> 與 <a href="http://www.taipei-gtug.org/">Taipei-GTUG</a> 合辦<br />
借到了精誠資訊的大樓，相當棒的一個場地。<br />
不得不稱讚主辦單位，一進來打開電腦四個 AP 速度又快，足顯誠意<br />
食物飲水也很精美充足，真的是沒什麼好挑剔的。</p>

<p>一開始 Hank Lin 主講 aws 的部份<br />
Hank 一開場就直接嗆「aws feature 比微軟和 google 多的多」<br />
因為我本身對 aws 比較沒有深入研究<br />
加上 Hank 講得實在是有點快<br />
只略約有印象好像介紹了一些 Route 53 的新特色<br />
還有 Oracle 的部份可以用自己的 license ，沒有的話可以用租的<br />
然後<del datetime="2011-06-23T01:26:58+00:00"><a href="http://www.cite.com.tw/product_info.php?products_id=18865">買他的書</a></del>。<br />
(認識的要買可以找我，打6折)<!--more--></p>

<p>再來是微軟的 Tom 介紹 Windows Azure<br />
Windows Azure 應該大家比較沒有接觸過，應該都很有興趣<br />
簡單的說：「aws 有的微軟都有，價格只會便宜不會貴」<br />
然後展示了一下 WebMatrix 這套 IDE 搭配 Windows Azure 的佈署方式<br />
整合的相當好的一個 IDE，感覺開發起來也很方便，習慣 .net 的用戶應該很容易能夠上手<br />
WebMatrix 這套 IDE 是免費的，現場微軟也提供了一組 30 天 Windows Azure 試用序號
<p style="text-align: center;"><a href="http://blog.hsatac.net/images/wp-uploads/2011/06/3648187_0b55ff2678e6a623989d55396bba56311.jpg"><img class="aligncenter size-full wp-image-468" title="3648187_0b55ff2678e6a623989d55396bba5631[1]" src="http://blog.hsatac.net/images/wp-uploads/2011/06/3648187_0b55ff2678e6a623989d55396bba56311.jpg" alt="" width="480" height="640" /></a></p>
使用 windows live 帳號登入 http://windowsazurepass.com/ 輸入 SSAPERUZAWT<br />
然後 ericsk 上官大大有提到 SQL Azure 使用 MSSQL 的話可以做 scalibility<br />
這點我還滿有興趣的，目前 GAE 和 aws 似乎都做不到<br />
詳細實做方式可能還要再研究一下。</p>

<p>ericsk 上官大大提供的相關資料：
<a href="http://blog.smarx.com/posts/node-js-ruby-and-python-in-windows-azure-my-mix-talk">其他語言在 Windows Azure</a>
<a href="http://webpi.dotblogs.com.tw/">下載微軟 Web Platform 抽 Kinect</a></p>

<p>Tom 在 session 中提到的這篇文章：
<a href="http://highscalability.com/blog/2010/5/26/end-to-end-performance-study-of-cloud-services.html">有 AAA 的 performance 比較</a></p>

<p>接下來的時間因為 Google 的講者 Ikai 還在機場過來的路上，因此先進行了 Lightning Talk<br />
cloudena 在徵人<br />
PyConTW 和 HIT 2011 歡迎報名 (PyConTW 早就爆滿啦)<br />
Ken 介紹了自己開發的<a href="http://www.ps158.com/blog/archives/1664">活動簽到 App</a> 概念很不錯</p>

<p>最後 Ikai 終於到場了，稍微介紹了一下 GAE 和 GO<br />
GAE 的部份跟以前認知的差不多，<br />
GO 感覺滿吸引人的</p>

<p>我提供的 GO 相關文章：<br />
剛好 Hack News 那邊同時跳出來XD<br />
http://blog.kowalczyk.info/article/Go-vs-Python-for-a-simple-web-server.html</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[讓 Empathy 支援 P4-Context]]></title>
    <link href="http://blog.hsatac.net/2011/06/empathy-p4-context/"/>
    <updated>2011-06-12T00:00:00+08:00</updated>
    <id>http://blog.hsatac.net/2011/06/empathy-p4-context</id>
    <content type="html"><![CDATA[<p>這兩天灌了 Ubuntu 11.04 在玩<br />
內建的 Empathy 即時通訊軟體很強大，整合了多種 im<br />
但是他的 msn 不支援 msn protocol 的 P4-Context tag<br />
最直接的影響就是 m群看不到是誰在說話。<br />
看了一下發現他底層是用 python-papyon 這套 msn lib<br />
於是就可以直接動手修改啦！</p>

<p>先開啟 /usr/share/pyshared/papyon/conversation.py<br />
找到 387 行：
<pre lang="python" line="387">        if message_type == 'text/plain':
            msg = ConversationMessage(unicode(message.body, message_encoding),
                    TextFormat.parse(message_formatting),
                    self.__last_received_msn_objects)
            try:
                display_name = message.get_header('P4-Context')</pre>
<!--more-->
將這段改成：
<pre lang="python" line="387">       if message_type == 'text/plain':
            try:
                msg = ConversationMessage(unicode("["+message.get_header('P4-Context')+"]"+message.body, message_encoding),
                        TextFormat.parse(message_formatting),
                        self.__last_received_msn_objects)
            except KeyError:
                msg = ConversationMessage(unicode(message.body, message_encoding),
                        TextFormat.parse(message_formatting),
                        self.__last_received_msn_objects)
            try:
                display_name = message.get_header('P4-Context')</pre>
存檔後重新啟動 empathy 就可以了！</p>

<p>ps. 請自行注意 python 縮排</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Better Array, Better PHP]]></title>
    <link href="http://blog.hsatac.net/2011/06/better-array-better-php/"/>
    <updated>2011-06-11T00:00:00+08:00</updated>
    <id>http://blog.hsatac.net/2011/06/better-array-better-php</id>
    <content type="html"><![CDATA[<p>PHP 的 array() 大家都是詬病已久了，總是在想，要是能像其他語言一樣，用個中括號括起來就好那該有多好。
<p style="text-align: center;"><a href="http://blog.hsatac.net/images/wp-uploads/2011/06/betterphp.png"><img class="aligncenter size-full wp-image-445" title="betterphp" src="http://blog.hsatac.net/images/wp-uploads/2011/06/betterphp.png" alt="" width="446" height="393" /></a></p>
<!--more-->昨天剛好看到鐵神分享的這篇 <a href="http://www.xarg.org/2011/06/php-hacking/" target="_blank">PHP Hacking</a> ，作者把 PHP 修改了許多小地方，除了上述的新 array 語法外，還有許多新增函式和效能調校，感覺真的很不錯。</p>

<p>不過我最想要的只有 array 這個語法，而且不想被作者的版本綁死，於是我決定下載他的程式碼來研究一下如何修改。結果發現，只要改一行，就可以擁有這個功能！</p>

<p>以下紀錄一下我修改成功的過程，我開了一台乾淨的 Ubuntu 11.04 vm 出來測試。</p>

<p>首先抓好 PHP 5.3.6 的原始碼生肉，找到 Zend/zend_language_parser.y 這個檔案：</p>

<p>找到
<pre lang="c">  |  T_ARRAY '(' array_pair_list ')' { $$ = $3; }</pre>
這行，在下面多加一行
<pre lang="c">  |  '[' array_pair_list ']'         { $$ = $2; }</pre>
接著安裝一些必要的元件：
<pre lang="bash">sudo apt-get install apache
sudo apt-get install apache2-prefork-dev #要編譯成 libphp5.so 需要裝這個
sudo apt-get install libxml2-dev
sudo apt-get install re2c</pre>
接著還要安裝 <a href="http://www.gnu.org/software/bison/" target="_blank">bison</a> ，apt-get 裝的 bison 版本太舊不合用，可以自己去抓 2.3 版來編譯</p>

<p>bison 需要 m4, 所以編譯過程中有需要的話就 apt-get install m4 吧。</p>

<p>以上準備工作都做好後，就可以開始編譯 PHP 啦。
<pre lang="bash">./configure --prefix=/usr/local/lib/php5.3.6.infusion --with-apxs2=/usr/bin/apxs2
make && sudo make install</pre>
記得在 configure 的過程要注意有沒抓到 bison ，這是最重要的，如果沒抓到的話這個修改是不會有作用的。</p>

<p>都編完以後趕快
<pre lang="bash">a2enmod php5
sudo apachectl restart</pre>
來試試看有沒有成功吧！我編完以後，8245個測試都跑過了，應該是沒問題，enjoy it！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的 vimrc for vim, win32 gvim, macvim]]></title>
    <link href="http://blog.hsatac.net/2011/05/my-vimrc-for-vim-win32-gvim-macvim/"/>
    <updated>2011-05-18T00:00:00+08:00</updated>
    <id>http://blog.hsatac.net/2011/05/my-vimrc-for-vim-win32-gvim-macvim</id>
    <content type="html"><![CDATA[<p><a href="http://blog.hsatac.net/images/wp-uploads/2011/05/gvim.png"><img class="size-large wp-image-416 aligncenter" title="gvim" src="http://blog.hsatac.net/images/wp-uploads/2011/05/gvim-1024x649.png" alt="" width="393" height="249" /></a></p>

<p>最近在調整我的 vim 設定，目標是在 vim, win32 gvim, macvim 上都能有盡量相同的編輯體驗。<!--more--></p>

<p>先說明一下我的工作環境，我有一台 Mac mini server，平常會用 pietty 連上去改 code；有一台 Macbook Air ，使用 MacVim 開發，家中和公司使用的是 Win 7 64bit，使用放在 dropbox 的 portable gvim。</p>

<p>主要用到的 plugin 是 Command-T, taglist 以及 omnicomplete 。</p>

<p><a href="http://blog.hsatac.net/images/wp-uploads/2011/05/vim.png"><img class="aligncenter size-large wp-image-415" title="vim" src="http://blog.hsatac.net/images/wp-uploads/2011/05/vim-1024x605.png" alt="" width="368" height="218" /></a></p>

<p>一開始我用 <a href="https://github.com/vgod/vimrc" target="_blank">vgod 的 vimrc</a> 來當範本修改，詳細設定可以參考<a href="https://github.com/hSATAC/vimrc" target="_blank">我的 vimrc </a></p>

<p>主要的困難點大概有幾個：
<h2>Command-T</h2>
在 MacVim 上， Command-T 使用相當簡單，裝好以後直接執行
<pre lang="bash">ruby extconf.rb
make</pre>
之後就可以使用了。<br />
但純文字模式下的 vim 就沒這麼簡單了，我在 mac server 上重編的 +ruby vim 無論如何都沒辦法把編譯好的 plugin 載入。<br />
後來只好折衷直接使用 macvim 內置的 vim ，他在你的 MacVim.app/Contents/MacOS/Vim 。</p>

<p>這個檔案不管是複製或是 ln -s 到其他 path 執行，都會報錯，最後是用
<pre lang="bash">alias vim='PATH/MacVim.app/Contents/MacOS/Vim'</pre>
來解決。</p>

<p>不過這個用法有一個需要注意的地方，就是在 vim 中我們判斷 MacVim 一般會用
<pre lang="vim">has("gui_macvim")</pre>
來判斷，但用 MacVim 自帶的 Vim，這個判斷會成立。</p>

<p>因此要改用
<pre lang="vim">has("gui_macvim") && has("gui_running")</pre>
Windows 的部份比較麻煩，你要先安裝 <a href="http://rubyinstaller.org/downloads/" target="_blank">Ruby 和 DevKit</a> 才能編譯這個 plugin。</p>

<p>編譯：
<pre lang="bash">C:\Ruby192\DevKit\devkitvars.bat
cd yourvimfiles\plugins\ruby\command-t
ruby extconf.rb
make
make install</pre>
然後因為現在官網的 gvim 7.3.46 版只支援 ruby 1.9.1，要抓最新的 trunk code 下來編譯成 +ruby。</p>

<p>這個動作在 windows 實在不是很容易，所以這邊提供了<a href="http://dl.dropbox.com/u/7919509/gvim73.zip" target="_blank">編譯好的版本</a>。
<h2>taglist</h2>
taglist 需要 <a href="http://ctags.sourceforge.net/" target="_blank">Exuberant Ctags</a></p>

<p>這個部份 windows 平台反而單純，直接下載編譯好的執行檔丟到 vim 目錄下就好。</p>

<p>Mac 自帶的 ctags 不相容，所以需要抓新的來編。</p>

<p>我是直接用
<pre lang="bash">brew install ctags</pre>
讓各平台的 plugin 都能正常運作以後，最後就是設定一些快速鍵和 fix term 的問題，這邊就是個人偏好了，詳情可以直接看我的 <a href="https://github.com/hSATAC/vimrc" target="_blank">vimrc github</a></p>

<p>最後，如上所述，這份 vimrc 主要是在 mac 和 windows 使用，沒有在其他作業系統測試過。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Firefox4 x WebM x Apache]]></title>
    <link href="http://blog.hsatac.net/2011/04/firefox4-x-webm-x-apache/"/>
    <updated>2011-04-28T00:00:00+08:00</updated>
    <id>http://blog.hsatac.net/2011/04/firefox4-x-webm-x-apache</id>
    <content type="html"><![CDATA[<p><a rel="attachment wp-att-397" href="http://blog.hsatac.net/?attachment_id=397"><img class="size-full wp-image-397 alignleft" title="webm_open-media-project_logo[1]" src="http://blog.hsatac.net/images/wp-uploads/2011/04/webm_open-media-project_logo1.png" alt="" width="180" height="60" /></a> 今天在弄一些 WebM 的東西，同樣的頁面和影像檔在 chrome 都很正常，但是碰到 firefox 4 就會爛掉，可是 firefox 4 明明就支援 WebM 了啊</p>

<p>&nbsp;</p>

<p>後來做了幾個實驗，直接用 file:/// 開檔案，居然就正常了！ 但放到伺服器上，又出了問題。</p>

<p>survey 了一下，果然是 apache 處理 WebM 時 mimetype 沒有正確送出。</p>

<p>只要修改 /etc/apache2/mime.types 把 WebM 加進去就可以了
<pre lang="bash">video/webm webm</pre>
至於 chrome 為什麼會正常，只能猜測 chrome 有特別針對這個問題做優化吧&#8230;</p>

<p>有沒有 chrome 偷偷對 WebM mimetype 做優化都不告訴別人的八卦？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[整合 Redmine 和 git]]></title>
    <link href="http://blog.hsatac.net/2011/04/redmine-git-integration/"/>
    <updated>2011-04-14T00:00:00+08:00</updated>
    <id>http://blog.hsatac.net/2011/04/redmine-git-integration</id>
    <content type="html"><![CDATA[<p>其實就是[專案設定] > [版本控管] 裡面填 git repo path 而已<br />
不過一直報找不到專案，看了一下 error log  原來是找不到 git 執行檔<br />
解法很簡單，原本 httpd.conf 設定的 ruby 要再包一層去 export path<br />
例如原本你設定的是
<pre lang="bash">
PassengerRuby /usr/local/Cellar/ruby-enterprise-edition/2011.03/bin/ruby
</pre></p>

<p>就開一個  /usr/local/bin/ruby_with_env 的可執行檔<br />
裡面把 export $PATH
<pre lang="bash">
#!/bin/bash
export PATH="/usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/X11/bin:/opt/local/bin:/usr/local/git/bin:/usr/local/git/bin/:$PATH"
/usr/local/Cellar/ruby-enterprise-edition/2011.03/bin/ruby $*
</pre></p>

<p>再把 httpd.conf 的裡面設定的 ruby 改成
<pre lang="bash">
PassengerRuby /usr/local/bin/ruby_with_env
</pre></p>

<p>大功告成！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to enable php gmp on Mac OS X without macports]]></title>
    <link href="http://blog.hsatac.net/2011/04/how-to-enable-php-gmp-on-mac-os-x/"/>
    <updated>2011-04-07T00:00:00+08:00</updated>
    <id>http://blog.hsatac.net/2011/04/how-to-enable-php-gmp-on-mac-os-x</id>
    <content type="html"><![CDATA[<p>If you are using macports, you can easily install the package of &#8220;php-gmp&#8221;.</p>

<p>But if you are a user of homebrew like me, you may need these tips.</p>

<p>First, you have to install gmp via homebrew, but it will give you gmp 5.0.1, which doesn&#8217;t work with PHP 5.3</p>

<p>So you have to modify your Formula, go to /usr/local/Library/Formula/gmp.rb and modify:
<pre lang="ruby">url 'ftp://ftp.gnu.org/gnu/gmp/gmp-5.0.1.tar.bz2'
sha1 '6340edc7ceb95f9015a758c7c0d196eb0f441d49'</pre>
to
<pre lang="ruby">url 'ftp://ftp.gmplib.org/pub/gmp-4.3.2/gmp-4.3.2.tar.bz2'
sha1 'c011e8feaf1bb89158bd55eaabd7ef8fdd101a2c'</pre></p>

<p>Now, you can run <pre lang="bash">brew install gmp</pre> to install gmp.</p>

<p>Next step, download the php source code from php.net, we will need to build a php_gmp.so module from it.</p>

<p>Extract the source code and go to phpsource/ext/gmp/</p>

<p>run
<pre lang="bash">
phpize
./configure
MACOSX_DEPLOYMENT_TARGET=10.6 CFLAGS='-O3 -fno-common -arch i386 -arch x86_64' LDFLAGS='-O3 -arch i386 -arch x86_64' CXXFLAGS='-O3 -fno-common -arch i386 -arch x86_64' make -j6;sudo make install
</pre></p>

<p>And you will get your gmp.so in phpsource/ext/gmp/module/</p>

<p>Copy that to your /usr/lib/php/extensions/no-debug-non-zts-20090626/</p>

<p>And load it in your /private/etc/php.ini</p>

<p>It&#8217;s done!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[連猴子也會之：在 Mac mini server 上架設 WebDAV git server]]></title>
    <link href="http://blog.hsatac.net/2011/04/%E9%80%A3%E7%8C%B4%E5%AD%90%E4%B9%9F%E6%9C%83%E4%B9%8B%EF%BC%9A%E5%9C%A8-mac-mini-server-%E4%B8%8A%E6%9E%B6%E8%A8%AD-webdav-git-server/"/>
    <updated>2011-04-04T00:00:00+08:00</updated>
    <id>http://blog.hsatac.net/2011/04/連猴子也會之：在-mac-mini-server-上架設-webdav-git-server</id>
    <content type="html"><![CDATA[<p>因為我的 mac mini server 不想開著 ssh 一直給人掃，所以想設定 https 的 git server，試了一下真的超簡單的。
<p style="text-align: center;"><a href="http://blog.hsatac.net/images/wp-uploads/2011/04/螢幕快照-2011-04-04-下午1.47.38.png"><img class="aligncenter size-full wp-image-360" title="螢幕快照 2011-04-04 下午1.47.38" src="http://blog.hsatac.net/images/wp-uploads/2011/04/螢幕快照-2011-04-04-下午1.47.38.png" alt="" width="522" height="312" /></a></p>
▲首先打開你的 Server Admin 建立一個新 Site 例如 repo.hsatac.net
<!--more--></p>

<p><p style="text-align: center;"><a href="http://blog.hsatac.net/images/wp-uploads/2011/04/螢幕快照-2011-04-04-下午1.48.24.jpg"><img class="aligncenter size-full wp-image-371" title="螢幕快照 2011-04-04 下午1.48.24" src="http://blog.hsatac.net/images/wp-uploads/2011/04/螢幕快照-2011-04-04-下午1.48.24.jpg" alt="" width="523" height="307" /></a></p>
▲Option 的部份把 WebDAV 打勾，我們要用這個做認證，Folding Listing 也勾起來比較方便。
<p style="text-align: center;"><a href="http://blog.hsatac.net/images/wp-uploads/2011/04/螢幕快照-2011-04-04-下午1.49.02.jpg"><img class="aligncenter size-full wp-image-372" title="螢幕快照 2011-04-04 下午1.49.02" src="http://blog.hsatac.net/images/wp-uploads/2011/04/螢幕快照-2011-04-04-下午1.49.02.jpg" alt="" width="332" height="162" /></a></p>
▲接著建立一個新的 Realm ，範例就用 project.git
<p style="text-align: center;"><a href="http://blog.hsatac.net/images/wp-uploads/2011/04/螢幕快照-2011-04-04-下午1.49.51.jpg"><img class="aligncenter size-full wp-image-373" title="螢幕快照 2011-04-04 下午1.49.51" src="http://blog.hsatac.net/images/wp-uploads/2011/04/螢幕快照-2011-04-04-下午1.49.51.jpg" alt="" width="522" height="288" /></a></p>
▲按+號把你的使用者拖過來，給他權限 Browse and Read/Write WebDAV，</p>

<p>當然如果你要公開這個 repo 給別人讀取，可以把 everyone 的權限設成 Browse and Read
<p style="text-align: center;"><a href="http://blog.hsatac.net/images/wp-uploads/2011/04/螢幕快照-2011-04-04-下午1.50.20.jpg"><img class="aligncenter size-full wp-image-374" title="螢幕快照 2011-04-04 下午1.50.20" src="http://blog.hsatac.net/images/wp-uploads/2011/04/螢幕快照-2011-04-04-下午1.50.20.jpg" alt="" width="521" height="310" /></a></p>
▲最後在 Security 的部份 把 SSL 打勾並選你的憑證</p>

<p>接著就來設定 remote repo 吧！<br />
把你剛剛設定的目錄建立起來
<pre lang="bash">mkdir /Library/WebServer/Documents/repo/project.git
cd /Library/WebServer/Documents/repo/project.git
git init --bare
mv hooks/post-update.sample hooks/post-update
git update-server-info</pre>
記得整個目錄的owner要改回 _www</p>

<p>遠端這樣就設定好啦！<br />
接著本地端的部份：</p>

<p>因為我們是走 https ，如果你的憑證是自簽的話，請先跟我這樣做：
<pre lang="bash">git config --global http.sslVerify false</pre>
接著一樣三步驟：
<pre lang="bash">git init
git add .
git commit -m "first commit"
git remote add origin https://repo.hsatac.net/project.git/
git push origin master --force -v</pre>
最後編輯 .git/config<br />
加上
<pre lang="bash">[branch "master"]
	 remote = origin
	 merge = refs/heads/master</pre></p>

<p>以上，就大功告成啦！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mahou Shoujo Madoka Magica - Connect - ClariS 歌詞 漢字假名拼音對照版]]></title>
    <link href="http://blog.hsatac.net/2011/02/mahou-shoujo-madoka-magica-connect-claris-%E6%AD%8C%E8%A9%9E-%E6%BC%A2%E5%AD%97%E5%81%87%E5%90%8D%E6%8B%BC%E9%9F%B3%E5%B0%8D%E7%85%A7%E7%89%88/"/>
    <updated>2011-02-28T00:00:00+08:00</updated>
    <id>http://blog.hsatac.net/2011/02/mahou-shoujo-madoka-magica-connect-claris-歌詞-漢字假名拼音對照版</id>
    <content type="html"><![CDATA[<p>最近在迷這首&#8230;
<iframe title="YouTube video player" width="480" height="390" src="http://www.youtube.com/embed/UcOb5dDKNqI" frameborder="0" allowfullscreen></iframe>
<!--more-->
<div class="title">Connect</div>
<hr />
<ruby><rb>交</rb><rp>(</rp><rt>カ</rt><rp>)</rp></ruby>わした<ruby><rb>約束</rb><rp>(</rp><rt>やくそく</rt><rp>)</rp></ruby><ruby><rb>忘</rb><rp>(</rp><rt>わす</rt><rp>)</rp></ruby>れないよ<br />
<span class="romaji">KAwashita Yakusoku Wasurenaiyo</span><br />
<ruby><rb>目</rb><rp>(</rp><rt>め</rt><rp>)</rp></ruby>を<ruby><rb>閉</rb><rp>(</rp><rt>と</rt><rp>)</rp></ruby>じた<ruby><rb>確</rb><rp>(</rp><rt>し</rt><rp>)</rp></ruby>かめる<br />
<span class="romaji">Meo Tojita Shikameru</span><br />
<ruby><rb>押</rb><rp>(</rp><rt>お</rt><rp>)</rp></ruby>し<ruby><rb>寄</rb><rp>(</rp><rt>よ</rt><rp>)</rp></ruby>せた<ruby><rb>闇</rb><rp>(</rp><rt>やみ</rt><rp>)</rp></ruby>　<ruby><rb>振</rb><rp>(</rp><rt>ふ</rt><rp>)</rp></ruby>り<ruby><rb>払</rb><rp>(</rp><rt>はら</rt><rp>)</rp></ruby>って<ruby><rb>進</rb><rp>(</rp><rt>すす</rt><rp>)</rp></ruby>むよ<br />
<span class="romaji">Oshi Yoseta Yami Furi Haratte Susumuyo</span><br />
<br />
<span class="romaji"></span><br />
いつになったらなくした<ruby><rb>未来</rb><rp>(</rp><rt>みらい</rt><rp>)</rp></ruby>を<br />
<span class="romaji">Itsuninattaranakushita Miraio</span><br />
<ruby><rb>私</rb><rp>(</rp><rt>わたし</rt><rp>)</rp></ruby>ここでまた<ruby><rb>見</rb><rp>(</rp><rt>み</rt><rp>)</rp></ruby>ることできるの？<br />
<span class="romaji">Watashikokodemata Mirukotodekiruno?</span><br />
<br />
<span class="romaji"></span><br />
<ruby><rb>溢</rb><rp>(</rp><rt>あふ</rt><rp>)</rp></ruby>れ<ruby><rb>出</rb><rp>(</rp><rt>だ</rt><rp>)</rp></ruby>した<ruby><rb>不安</rb><rp>(</rp><rt>ふあん</rt><rp>)</rp></ruby>の<ruby><rb>影</rb><rp>(</rp><rt>かげ</rt><rp>)</rp></ruby>を<ruby><rb>何度</rb><rp>(</rp><rt>なんど</rt><rp>)</rp></ruby>でも<ruby><rb>裂</rb><rp>(</rp><rt>さ</rt><rp>)</rp></ruby>いて<br />
<span class="romaji">Afure Dashita Fuanno Kageo Nandodemo Saite</span><br />
この<ruby><rb>世界</rb><rp>(</rp><rt>せかい</rt><rp>)</rp></ruby><ruby><rb>歩</rb><rp>(</rp><rt>あゆ</rt><rp>)</rp></ruby>んでこう<br />
<span class="romaji">Kono Sekai Ayundekou</span><br />
<br />
<span class="romaji"></span><br />
とめどなく<ruby><rb>刻</rb><rp>(</rp><rt>きざ</rt><rp>)</rp></ruby>まれた<ruby><rb>時</rb><rp>(</rp><rt>とき</rt><rp>)</rp></ruby>は<ruby><rb>今</rb><rp>(</rp><rt>いま</rt><rp>)</rp></ruby><ruby><rb>始</rb><rp>(</rp><rt>はじ</rt><rp>)</rp></ruby>まり<ruby><rb>告</rb><rp>(</rp><rt>つ</rt><rp>)</rp></ruby>げ<br />
<span class="romaji">Tomedonaku Kizamareta Tokiwa Ima Hajimari Tsuge</span><br />
<ruby><rb>変</rb><rp>(</rp><rt>か</rt><rp>)</rp></ruby>わらない<ruby><rb>思</rb><rp>(</rp><rt>おも</rt><rp>)</rp></ruby>いをのせ<br />
<span class="romaji">Kawaranai Omoio Nose</span><br />
<ruby><rb>閉</rb><rp>(</rp><rt>と</rt><rp>)</rp></ruby>ざされた<ruby><rb>扉</rb><rp>(</rp><rt>とびら</rt><rp>)</rp></ruby><ruby><rb>開</rb><rp>(</rp><rt>ひら</rt><rp>)</rp></ruby>けよう<br />
<span class="romaji">Tozasareta Tobira Hirakeyou</span><br />
<br />
<span class="romaji"></span><br />
<ruby><rb>目覚</rb><rp>(</rp><rt>めざ</rt><rp>)</rp></ruby>めた<ruby><rb>心</rb><rp>(</rp><rt>こころ</rt><rp>)</rp></ruby>は<ruby><rb>走</rb><rp>(</rp><rt>はし</rt><rp>)</rp></ruby>りだした<ruby><rb>未来</rb><rp>(</rp><rt>みらい</rt><rp>)</rp></ruby>を<ruby><rb>描</rb><rp>(</rp><rt>えが</rt><rp>)</rp></ruby>くため<br />
<span class="romaji">Mezameta Kokorowa Hashiridashita Miraio Egaku Tame</span><br />
<ruby><rb>難</rb><rp>(</rp><rt>むずか</rt><rp>)</rp></ruby>しい<ruby><rb>道</rb><rp>(</rp><rt>みち</rt><rp>)</rp></ruby>で<ruby><rb>立</rb><rp>(</rp><rt>た</rt><rp>)</rp></ruby>ち<ruby><rb>止</rb><rp>(</rp><rt>と</rt><rp>)</rp></ruby>まっても<br />
<span class="romaji">Muzukashi- Michide Tachi Tomattemo</span><br />
<ruby><rb>空</rb><rp>(</rp><rt>そら</rt><rp>)</rp></ruby>はきれいな<ruby><rb>青</rb><rp>(</rp><rt>あお</rt><rp>)</rp></ruby>さでいつも<ruby><rb>待</rb><rp>(</rp><rt>ま</rt><rp>)</rp></ruby>っててくれる<br />
<span class="romaji">Sorahakireina Aosadeitsumo Mattetekureru</span><br />
だから<ruby><rb>怖</rb><rp>(</rp><rt>こわ</rt><rp>)</rp></ruby>くない<br />
<span class="romaji">Dakara Kowaku Nai</span><br />
もう<ruby><rb>何</rb><rp>(</rp><rt>なに</rt><rp>)</rp></ruby>があっても<ruby><rb>挫</rb><rp>(</rp><rt>くじ</rt><rp>)</rp></ruby>けない<br />
<span class="romaji">Mou Naniga-ttemo Kujikenai</span><br />
<br />
<span class="romaji"></span><br />
<ruby><rb>振り返</rb><rp>(</rp><rt>ふりかえ</rt><rp>)</rp></ruby>れば<ruby><rb>仲間</rb><rp>(</rp><rt>なかま</rt><rp>)</rp></ruby>がいて<br />
<span class="romaji">Furikaereba Nakamagaite</span><br />
<ruby><rb>気</rb><rp>(</rp><rt>き</rt><rp>)</rp></ruby>がつけば<ruby><rb>優</rb><rp>(</rp><rt>やさ</rt><rp>)</rp></ruby>しく<ruby><rb>包</rb><rp>(</rp><rt>つつ</rt><rp>)</rp></ruby>まれてた<br />
<span class="romaji">Kiga Tsukeba Yasashiku Tsutsumareteta</span><br />
<br />
<span class="romaji"></span><br />
<ruby><rb>何</rb><rp>(</rp><rt>なに</rt><rp>)</rp></ruby>もかもが<ruby><rb>歪</rb><rp>(</rp><rt>ひず</rt><rp>)</rp></ruby>んだ<ruby><rb>世界</rb><rp>(</rp><rt>せかい</rt><rp>)</rp></ruby>で<br />
<span class="romaji">Nanimo Kamoga Hizunda Sekaide</span><br />
<ruby><rb>唯一</rb><rp>(</rp><rt>ゆいいつ</rt><rp>)</rp></ruby><ruby><rb>信</rb><rp>(</rp><rt>しん</rt><rp>)</rp></ruby>じれるここが<ruby><rb>救</rb><rp>(</rp><rt>すく</rt><rp>)</rp></ruby>いだった<br />
<span class="romaji">Yui-tsu Shinjirerukokoga Sukuidatta</span><br />
<br />
<span class="romaji"></span><br />
<ruby><rb>喜</rb><rp>(</rp><rt>よろこ</rt><rp>)</rp></ruby>びも<ruby><rb>悲</rb><rp>(</rp><rt>かな</rt><rp>)</rp></ruby>しみもわけあえば<ruby><rb>強</rb><rp>(</rp><rt>つよ</rt><rp>)</rp></ruby>まる<ruby><rb>思</rb><rp>(</rp><rt>おも</rt><rp>)</rp></ruby>い<br />
<span class="romaji">Yorokobimo Kanashimimowakeaeba Tsuyomaru Omoi</span><br />
この<ruby><rb>声</rb><rp>(</rp><rt>こえ</rt><rp>)</rp></ruby>が<ruby><rb>届</rb><rp>(</rp><rt>とど</rt><rp>)</rp></ruby>くのなら<br />
<span class="romaji">Kono Koega Todoku Nonara</span><br />
きっと<ruby><rb>奇跡</rb><rp>(</rp><rt>きせき</rt><rp>)</rp></ruby>はおこせるだろう<br />
<span class="romaji">Kitto Kisekihaokoserudarou</span><br />
<br />
<span class="romaji"></span><br />
<ruby><rb>交</rb><rp>(</rp><rt>カ</rt><rp>)</rp></ruby>わした<ruby><rb>約束</rb><rp>(</rp><rt>やくそく</rt><rp>)</rp></ruby><ruby><rb>忘</rb><rp>(</rp><rt>わす</rt><rp>)</rp></ruby>れないよ<br />
<span class="romaji">KAwashita Yakusoku Wasurenaiyo</span><br />
<ruby><rb>目</rb><rp>(</rp><rt>め</rt><rp>)</rp></ruby>を<ruby><rb>閉</rb><rp>(</rp><rt>と</rt><rp>)</rp></ruby>じ<ruby><rb>確</rb><rp>(</rp><rt>たし</rt><rp>)</rp></ruby>かめる<br />
<span class="romaji">Meo Toji Tashikameru</span><br />
<ruby><rb>押</rb><rp>(</rp><rt>お</rt><rp>)</rp></ruby>し<ruby><rb>寄</rb><rp>(</rp><rt>よ</rt><rp>)</rp></ruby>せた<ruby><rb>闇</rb><rp>(</rp><rt>やみ</rt><rp>)</rp></ruby>　<ruby><rb>振</rb><rp>(</rp><rt>ふ</rt><rp>)</rp></ruby>り<ruby><rb>払</rb><rp>(</rp><rt>はら</rt><rp>)</rp></ruby>って<ruby><rb>進</rb><rp>(</rp><rt>すす</rt><rp>)</rp></ruby>むよ<br />
<span class="romaji">Oshi Yoseta Yami Furi Haratte Susumuyo</span><br />
どんなに<ruby><rb>大</rb><rp>(</rp><rt>おお</rt><rp>)</rp></ruby>きな<ruby><rb>壁</rb><rp>(</rp><rt>かべ</rt><rp>)</rp></ruby>があっても<br />
<span class="romaji">Donnani O-kina Kabega-ttemo</span><br />
<ruby><rb>越</rb><rp>(</rp><rt>こ</rt><rp>)</rp></ruby>えて<ruby><rb>見</rb><rp>(</rp><rt>み</rt><rp>)</rp></ruby>せるからきっと<br />
<span class="romaji">Koete Miserukarakitto</span><br />
<ruby><rb>明日</rb><rp>(</rp><rt>あした</rt><rp>)</rp></ruby><ruby><rb>信</rb><rp>(</rp><rt>しん</rt><rp>)</rp></ruby>じて<ruby><rb>祈</rb><rp>(</rp><rt>いの</rt><rp>)</rp></ruby>って<br />
<span class="romaji">Ashita Shinjite Inotte</span><br />
<br />
<span class="romaji"></span><br />
<ruby><rb>壊</rb><rp>(</rp><rt>こわ</rt><rp>)</rp></ruby>れた<ruby><rb>世界</rb><rp>(</rp><rt>せかい</rt><rp>)</rp></ruby>で<ruby><rb>彷徨</rb><rp>(</rp><rt>ほうこう</rt><rp>)</rp></ruby>って<ruby><rb>私</rb><rp>(</rp><rt>わたし</rt><rp>)</rp></ruby>は<br />
<span class="romaji">Kowareta Sekaide Houkoutte Watashiwa</span><br />
<ruby><rb>引</rb><rp>(</rp><rt>び</rt><rp>)</rp></ruby>き<ruby><rb>寄</rb><rp>(</rp><rt>よ</rt><rp>)</rp></ruby>せられるように<ruby><rb>辿</rb><rp>(</rp><rt>たど</rt><rp>)</rp></ruby>り<ruby><rb>着</rb><rp>(</rp><rt>つ</rt><rp>)</rp></ruby>いた<br />
<span class="romaji">Biki Yoserareruyouni Tadori Tsuita</span><br />
<br />
<span class="romaji"></span><br />
<ruby><rb>目覚</rb><rp>(</rp><rt>めざ</rt><rp>)</rp></ruby>めた<ruby><rb>心</rb><rp>(</rp><rt>こころ</rt><rp>)</rp></ruby>は<ruby><rb>走</rb><rp>(</rp><rt>はし</rt><rp>)</rp></ruby>り<ruby><rb>出</rb><rp>(</rp><rt>だ</rt><rp>)</rp></ruby>した<ruby><rb>未来</rb><rp>(</rp><rt>みらい</rt><rp>)</rp></ruby>を<ruby><rb>描</rb><rp>(</rp><rt>えが</rt><rp>)</rp></ruby>くため<br />
<span class="romaji">Mezameta Kokorowa Hashiri Dashita Miraio Egaku Tame</span><br />
<ruby><rb>難</rb><rp>(</rp><rt>むずか</rt><rp>)</rp></ruby>しい<ruby><rb>道</rb><rp>(</rp><rt>みち</rt><rp>)</rp></ruby>で<ruby><rb>立</rb><rp>(</rp><rt>た</rt><rp>)</rp></ruby>ち<ruby><rb>止</rb><rp>(</rp><rt>と</rt><rp>)</rp></ruby>まっても<br />
<span class="romaji">Muzukashi- Michide Tachi Tomattemo</span><br />
<ruby><rb>空</rb><rp>(</rp><rt>そら</rt><rp>)</rp></ruby>はきれいな<ruby><rb>青</rb><rp>(</rp><rt>あお</rt><rp>)</rp></ruby>さでいつも<ruby><rb>待</rb><rp>(</rp><rt>ま</rt><rp>)</rp></ruby>っててくれる<br />
<span class="romaji">Sorahakireina Aosadeitsumo Mattetekureru</span><br />
だから<ruby><rb>怖</rb><rp>(</rp><rt>こわ</rt><rp>)</rp></ruby>くない<br />
<span class="romaji">Dakara Kowaku Nai</span><br />
もう<ruby><rb>何</rb><rp>(</rp><rt>なに</rt><rp>)</rp></ruby>があっても<ruby><rb>挫</rb><rp>(</rp><rt>くじ</rt><rp>)</rp></ruby>けない<br />
<span class="romaji">Mou Naniga-ttemo Kujikenai</span><br />
<br />
<span class="romaji"></span><br />
ずっと<ruby><rb>明日</rb><rp>(</rp><rt>あした</rt><rp>)</rp></ruby><ruby><rb>待</rb><rp>(</rp><rt>ま</rt><rp>)</rp></ruby>った<br />
<span class="romaji">Zutto Ashita Matta</span><br />
<br />&nbsp;<em class="cpinfo">&mdash;本文件以 <a href="http://but.lolicom.org/tool/" target="_blank">bRubyEditor</a> 編輯產生 &copy; but &mdash;</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 Passenger(mod_rails) 部屬 Sinatra]]></title>
    <link href="http://blog.hsatac.net/2011/02/%E7%94%A8-passengermod_rails-%E9%83%A8%E5%B1%AC-sinatra/"/>
    <updated>2011-02-22T00:00:00+08:00</updated>
    <id>http://blog.hsatac.net/2011/02/用-passengermod_rails-部屬-sinatra</id>
    <content type="html"><![CDATA[<p>最近寫了一些小 app / web service ，因為用不到 rails 那樣的大架構和功能，於是嘗試了 sinatra。<br />
寫起來挺快得，感覺跟之前玩 node.js 的感覺有點像。<br />
部屬方面也很容易<br />
在你的專案目錄下新建一個 config.ru 檔案，以及 public 和 tmp 資料夾<br />
config.ru 檔案內容為
<pre lang="ruby">
require 'project'</pre></p>

<p>root_dir = File.dirname(__FILE__)</p>

<p>set :environment, ENV[&#8216;RACK_ENV&#8217;].to_sym<br />
set :root,        root_dir<br />
set :app_file,    File.join(root_dir, &#8216;project.rb&#8217;)<br />
disable :run</p>

<p>run Sinatra::Application</p>

<p>
把 project 替換成你的專案名稱<br />
apache vhost的設法和 rails 的一樣即可
<pre lang="bash">
<VirtualHost *:80>
  ServerName project.hsatac.net
  DocumentRoot "/project/public"
  RackEnv production
  <Directory "/project/public">
    Order allow,deny
    Allow from all
  

</pre></p>
]]></content>
  </entry>
  
</feed>
